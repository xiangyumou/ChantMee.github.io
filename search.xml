<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>神经网络和反向传播算法</title>
      <link href="/2021/09/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/09/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="/Users/chant/Library/Application Support/typora-user-images/image-20210917103508177.png" alt="image-20210917103508177" style="zoom:50%;" /></p><h2 id="1-规定"><a href="#1-规定" class="headerlink" title="1.规定"></a>1.规定</h2><ul><li>$y_{ij}$为第$i$层网络第$j$个神经元的输出.</li><li>$t_i$为输出层第$i$个输出.</li><li>$n_i$为第$i$层网络的神经元数量.</li><li>激活函数$\sigma(x)=Sigmod(x)=\frac{1}{1+e^{-x}}$，因此$\frac{\partial \sigma(x)}{\partial x}=\sigma(x)[1-\sigma(x)]$.</li><li>$E$代表误差，即$E=\sum_{i=1}^{2}(y_{3i}-t_i)^{2}$.</li><li>$\nabla_{ijk}$为第$i$层网络第$j$个神经元，它对上一层网络的第$k$个神经元的$\omega$的梯度值.</li></ul><h2 id="2-公式推导"><a href="#2-公式推导" class="headerlink" title="2.公式推导"></a>2.公式推导</h2><p>现在以$11\rarr 21 \rarr 31$该过程为例，同时导出通项公式。</p><h3 id="net-ij"><a href="#net-ij" class="headerlink" title="$net_{ij}$"></a>$net_{ij}$</h3><p>$net_{21}=\sum_{i=1}^{2}(\omega_{21i}y_{1i})$.</p><p>$net_{31}=\sum_{i=1}^{3}(\omega_{31i}y_{2i})$.</p><p>因此通项公式为：$net_{ij}=\sum_{k=1}^{n_{i-1}}(\omega_{ijk}y_{i-1,k})$, $y_{ij}=\sigma(net_{ij})$.</p><h3 id="3-y-ij"><a href="#3-y-ij" class="headerlink" title="3.$y_{ij}$"></a>3.$y_{ij}$</h3><p>$y_{21}=\sigma(net_{21})$.</p><p>$y_{31}=\sigma(net_{31})$.</p><p>因此通项公式为：$y_{ij}=\sigma(net_{ij})$.</p><h3 id="4-误差-E"><a href="#4-误差-E" class="headerlink" title="4.误差$E$"></a>4.误差$E$</h3><p>$E=\sum_{i=1}^{2}(y_{3i}-t_{i})^2$.</p><h3 id="5-nabla-3ij-（输出层各-omega-的梯度值）"><a href="#5-nabla-3ij-（输出层各-omega-的梯度值）" class="headerlink" title="5.$\nabla_{3ij}$（输出层各$\omega$的梯度值）"></a>5.$\nabla_{3ij}$（输出层各$\omega$的梯度值）</h3><p>$\frac{\partial E}{\partial net_{31}}=\frac{E}{\partial y_{31}}\cdot \frac{\partial y_{31}}{\partial {net_{31}}}=2(y_{31}-t_1)y_{31}(1-y_{31})$.</p><p>$\therefore \frac{E}{\partial net_{3i}}=2(y_{3i}-t_i)y_{3i}(1-y_{3i})$.</p><p>$\nabla_{311}=\frac{\partial E}{\partial net_{31}} \cdot \frac{\partial net_{31}}{\partial \omega_{311}}=\frac{\partial E}{\partial net_{31}}\cdot y_{21}$.</p><p>因此通项公式为：$\nabla_{3ij}=\frac{\partial E}{\partial net_{3i}}\cdot \frac{\partial net_{3i}}{\partial \omega_{3ij}}=2(y_{3i}-t_{i})y_{3i}(1-y_{3i})y_{2i}$.</p><h3 id="6-nabla-2ij-（隐藏层各-omega-的梯度值）"><a href="#6-nabla-2ij-（隐藏层各-omega-的梯度值）" class="headerlink" title="6.$\nabla_{2ij}$（隐藏层各$\omega$的梯度值）"></a>6.$\nabla_{2ij}$（隐藏层各$\omega$的梯度值）</h3><p>$\nabla_{211}=\frac{\partial E}{\partial \omega_{211}}=\frac{\partial E}{\partial net_{31}}\cdot \frac{\partial net_{31}}{\partial y_{21}}\cdot \frac{\partial y_{21}}{\partial net_{21}}\cdot \frac{\partial{net_{21}}}{\partial \omega_{211}}\+\frac{\partial E}{\partial net_{32}}\cdot \frac{\partial net_{32}}{\partial y_{21}}\cdot \frac{\partial y_{21}}{\partial net_{21}}\cdot \frac{\partial{net_{21}}}{\partial \omega_{211}}\\=[\sum_{i=1}^{2}(\frac{\partial E}{\partial net_{3i}}\cdot \frac{\partial net_{3i}}{\partial y_{2i}})]\cdot \frac{\partial y_{21}}{\partial net_{21}} \cdot \frac{\partial net_{21}}{\partial \omega_{211}}\\=[\sum_{i=1}^{2}(\frac{\partial E}{\partial net_{3i}}\cdot \omega_{3i1})]\cdot y_{21}(1-y_{21})\omega_{21}$</p><p>因此通项公式为：$\nabla_{2ij}=\frac{\partial E}{\partial \omega_{2ij}}=[\sum_{k=1}^{2}(\frac{\partial E}{\partial net_{3k}})\cdot \omega_{3ki}]\cdot y_{2i}(1-2_i)\omega_{2ij}$.</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用线性回归进行气温预测</title>
      <link href="/2021/09/18/%E5%88%A9%E7%94%A8%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%BF%9B%E8%A1%8C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/"/>
      <url>/2021/09/18/%E5%88%A9%E7%94%A8%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E8%BF%9B%E8%A1%8C%E6%B0%94%E6%B8%A9%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络和反向传播算法</title>
      <link href="/2021/09/18/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/"/>
      <url>/2021/09/18/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用欧拉型常微分方程绘制函数图像</title>
      <link href="/2021/09/18/%E5%88%A9%E7%94%A8%E6%AC%A7%E6%8B%89%E5%9E%8B%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%BB%98%E5%88%B6%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/"/>
      <url>/2021/09/18/%E5%88%A9%E7%94%A8%E6%AC%A7%E6%8B%89%E5%9E%8B%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%BB%98%E5%88%B6%E5%87%BD%E6%95%B0%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知器算法的公式推导及代码实现</title>
      <link href="/2021/09/18/%E6%84%9F%E7%9F%A5%E5%99%A8%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/09/18/%E6%84%9F%E7%9F%A5%E5%99%A8%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用bash_shell批量添加删除用户</title>
      <link href="/2021/09/18/%E5%88%A9%E7%94%A8bash-shell%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/"/>
      <url>/2021/09/18/%E5%88%A9%E7%94%A8bash-shell%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb的基本使用</title>
      <link href="/2021/09/18/gdb%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/18/gdb%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc的基本使用</title>
      <link href="/2021/09/18/gcc%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/18/gcc%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim的基本使用</title>
      <link href="/2021/09/18/vim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/09/18/vim%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> None </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021牛客暑期多校训练营4</title>
      <link href="/2021/07/27/2021%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54/"/>
      <url>/2021/07/27/2021%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54/</url>
      
        <content type="html"><![CDATA[<h2 id="C-LCS"><a href="#C-LCS" class="headerlink" title="C. LCS"></a>C. LCS</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(string &amp;a, string &amp;b, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j - <span class="number">1</span>], f[i - <span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string &amp;s, <span class="keyword">char</span> ch, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++) &#123;</span><br><span class="line">        s.<span class="built_in">push_back</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">3</span>] = &#123;a, b, c&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr, arr + <span class="number">3</span>, std::greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> x = arr[<span class="number">0</span>], y = arr[<span class="number">1</span>], z = arr[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (x + y - z &gt; n) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string s1, s2, s3;</span><br><span class="line">    <span class="built_in">push</span>(s1, <span class="string">&#x27;a&#x27;</span>, x);</span><br><span class="line">    <span class="built_in">push</span>(s1, <span class="string">&#x27;x&#x27;</span>, n - s1.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">push</span>(s2, <span class="string">&#x27;a&#x27;</span>, x);</span><br><span class="line">    <span class="built_in">push</span>(s2, <span class="string">&#x27;b&#x27;</span>, y - z);</span><br><span class="line">    <span class="built_in">push</span>(s2, <span class="string">&#x27;y&#x27;</span>, n - s2.<span class="built_in">size</span>());</span><br><span class="line">    <span class="built_in">push</span>(s3, <span class="string">&#x27;a&#x27;</span>, z);</span><br><span class="line">    <span class="built_in">push</span>(s3, <span class="string">&#x27;b&#x27;</span>, y - z);</span><br><span class="line">    <span class="built_in">push</span>(s3, <span class="string">&#x27;z&#x27;</span>, n - s3.<span class="built_in">size</span>());</span><br><span class="line">    string *ss[] = &#123;&amp;s1, &amp;s2, &amp;s3&#125;;</span><br><span class="line">    <span class="keyword">int</span> per[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        string &amp;ss1 = *ss[per[<span class="number">0</span>]], &amp;ss2 = *ss[per[<span class="number">1</span>]], &amp;ss3 = *ss[per[<span class="number">2</span>]];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">lcs</span>(ss1, ss2, n) == a &amp;&amp; <span class="built_in">lcs</span>(ss2, ss3, n) == b &amp;&amp; <span class="built_in">lcs</span>(ss1, ss3, n) == c) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, ss1.<span class="built_in">c_str</span>(), ss2.<span class="built_in">c_str</span>(), ss3.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(per, per + <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Just-a-joke"><a href="#F-Just-a-joke" class="headerlink" title="F. Just a joke"></a>F. Just a joke</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1003</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[N], vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">Find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    u = <span class="built_in">Find</span>(u), v = <span class="built_in">Find</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (u != v) father[u] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) <span class="built_in">Union</span>(u, v);</span><br><span class="line">        <span class="keyword">else</span> cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="built_in">Find</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (!vis[t]) &#123;</span><br><span class="line">            vis[t] = <span class="literal">true</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Inverse-Pair"><a href="#I-Inverse-Pair" class="headerlink" title="I. Inverse Pair"></a>I. Inverse Pair</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], vis[N], tmp[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a, l, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(a, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[j] &lt; a[i]) &#123;</span><br><span class="line">            tmp[tot++] = a[j++];</span><br><span class="line">            ans = ans + mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[tot++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[tot++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[tot++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = l; i &lt; tot; i++, j++) &#123;</span><br><span class="line">        a[j] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[a[i] + <span class="number">1</span>]) &#123;</span><br><span class="line">            vis[a[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vis[++a[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Average"><a href="#J-Average" class="headerlink" title="J. Average"></a>J. Average</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">double</span> pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">double</span> ave)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + a[i] - ave;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> minn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i++) &#123;</span><br><span class="line">        minn = <span class="built_in">min</span>(minn, pre[i - x]);</span><br><span class="line">        <span class="keyword">if</span> (pre[i] - minn &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">1e6</span>, r = <span class="number">-1e6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        l = <span class="built_in">min</span>(l, (<span class="keyword">double</span>)a[i]);</span><br><span class="line">        r = <span class="built_in">max</span>(r, (<span class="keyword">double</span>)a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1e-8</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(n, x, mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;n, &amp;m, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">double</span> aa = <span class="built_in">work</span>(n, x);</span><br><span class="line">    <span class="keyword">double</span> bb = <span class="built_in">work</span>(m, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.8lf\n&quot;</span>, aa + bb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1400-D. Zigzags</title>
      <link href="/2021/07/20/CF1400-D.%20Zigzags/"/>
      <url>/2021/07/20/CF1400-D.%20Zigzags/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由-n-个数字构成的数组-a-，让你在这个数组中找出有多少个符合以下要求的元组-i-j-k-l-："><a href="#给出一个由-n-个数字构成的数组-a-，让你在这个数组中找出有多少个符合以下要求的元组-i-j-k-l-：" class="headerlink" title="给出一个由$n$个数字构成的数组$a$，让你在这个数组中找出有多少个符合以下要求的元组$(i,j,k,l)$："></a>给出一个由$n$个数字构成的数组$a$，让你在这个数组中找出有多少个符合以下要求的元组$(i,j,k,l)$：</h3><h3 id="1-i-lt-j-lt-k-lt-l-；"><a href="#1-i-lt-j-lt-k-lt-l-；" class="headerlink" title="1. $i&lt;j&lt;k&lt;l$；"></a>1. $i&lt;j&lt;k&lt;l$；</h3><h3 id="2-a-i-a-k-a-j-a-l"><a href="#2-a-i-a-k-a-j-a-l" class="headerlink" title="2. $a_i==a_k,a_j=a_l$."></a>2. $a_i==a_k,a_j=a_l$.</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="维护两个前缀和-pre-suf-。-pre-维护前-i-个数字中数字-j-的数量，-suf-维护后-i-个数字中数字-j-的数量。"><a href="#维护两个前缀和-pre-suf-。-pre-维护前-i-个数字中数字-j-的数量，-suf-维护后-i-个数字中数字-j-的数量。" class="headerlink" title="维护两个前缀和$pre,suf$。$pre$维护前$i$个数字中数字$j$的数量，$suf$维护后$i$个数字中数字$j$的数量。"></a>维护两个前缀和$pre,suf$。$pre$维护前$i$个数字中数字$j$的数量，$suf$维护后$i$个数字中数字$j$的数量。</h3><h3 id="那么只需要枚举每一个-j-和-k-，用前缀和找出前-j-1-个数字中-a-k-的数量-pre-j-1-a-k-和后-k-1-个数字中-a-j-的数量-suf-k-1-a-j-，两个数字相乘就是对于当前-j-k-符合要求的元组的数量。最后累加起来就是答案。"><a href="#那么只需要枚举每一个-j-和-k-，用前缀和找出前-j-1-个数字中-a-k-的数量-pre-j-1-a-k-和后-k-1-个数字中-a-j-的数量-suf-k-1-a-j-，两个数字相乘就是对于当前-j-k-符合要求的元组的数量。最后累加起来就是答案。" class="headerlink" title="那么只需要枚举每一个$j$和$k$，用前缀和找出前$j-1$个数字中$a[k]$的数量$pre[j-1][a[k]]$和后$k+1$个数字中$a[j]$的数量$suf[k+1][a[j]]$，两个数字相乘就是对于当前$j,k$符合要求的元组的数量。最后累加起来就是答案。"></a>那么只需要枚举每一个$j$和$k$，用前缀和找出前$j-1$个数字中$a[k]$的数量$pre[j-1][a[k]]$和后$k+1$个数字中$a[j]$的数量$suf[k+1][a[j]]$，两个数字相乘就是对于当前$j,k$符合要求的元组的数量。最后累加起来就是答案。</h3><h3 id="ans-sum-2-lt-j-lt-k-lt-n-1-pre-j-1-a-k-suf-k-1-a-j"><a href="#ans-sum-2-lt-j-lt-k-lt-n-1-pre-j-1-a-k-suf-k-1-a-j" class="headerlink" title="$ans=\sum_{2&lt;=j&lt;k&lt;=n-1}pre[j-1][a[k]]*suf[k+1][a[j]]$"></a>$ans=\sum_{2&lt;=j&lt;k&lt;=n-1}pre[j-1][a[k]]*suf[k+1][a[j]]$</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><p>代码中的下标都是从$0$开始的，思路中提到的下标都是从$1$开始的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">3005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[Maxn][Maxn], suf[Maxn][Maxn], a[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(pre, <span class="number">0</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line"><span class="built_in">memset</span>(suf, <span class="number">0</span>, <span class="keyword">sizeof</span> suf);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line">pre[<span class="number">0</span>][a[<span class="number">0</span>]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">pre[i][j] = pre[i - <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">pre[i][a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">suf[n - <span class="number">1</span>][a[n - <span class="number">1</span>]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">suf[i][j] = suf[i + <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">suf[i][a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt;= n - <span class="number">2</span>; k++) &#123;</span><br><span class="line">ans += <span class="number">1LL</span> * pre[j - <span class="number">1</span>][a[k]] * suf[k + <span class="number">1</span>][a[j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021牛客暑期多校训练营1</title>
      <link href="/2021/07/19/2021%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51/"/>
      <url>/2021/07/19/2021%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Alice-and-Bob"><a href="#A-Alice-and-Bob" class="headerlink" title="A.Alice and Bob"></a>A.Alice and Bob</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5050</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">5</span>, <span class="number">7</span>&#125;, &#123;<span class="number">9</span>, <span class="number">12</span>&#125;, &#123;<span class="number">11</span>, <span class="number">15</span>&#125;, &#123;<span class="number">14</span>, <span class="number">20</span>&#125;, &#123;<span class="number">17</span>, <span class="number">22</span>&#125;, &#123;<span class="number">19</span>, <span class="number">33</span>&#125;, &#123;<span class="number">24</span>, <span class="number">32</span>&#125;, &#123;<span class="number">26</span>, <span class="number">35</span>&#125;, &#123;<span class="number">28</span>, <span class="number">58</span>&#125;, &#123;<span class="number">29</span>, <span class="number">40</span>&#125;, &#123;<span class="number">31</span>, <span class="number">38</span>&#125;, &#123;<span class="number">37</span>, <span class="number">53</span>&#125;, &#123;<span class="number">42</span>, <span class="number">52</span>&#125;, &#123;<span class="number">44</span>, <span class="number">75</span>&#125;, &#123;<span class="number">45</span>, <span class="number">60</span>&#125;, &#123;<span class="number">47</span>, <span class="number">65</span>&#125;, &#123;<span class="number">49</span>, <span class="number">70</span>&#125;, &#123;<span class="number">50</span>, <span class="number">62</span>&#125;, &#123;<span class="number">55</span>, <span class="number">68</span>&#125;, &#123;<span class="number">57</span>, <span class="number">79</span>&#125;, &#123;<span class="number">64</span>, <span class="number">87</span>&#125;, &#123;<span class="number">67</span>, <span class="number">86</span>&#125;, &#123;<span class="number">72</span>, <span class="number">92</span>&#125;, &#123;<span class="number">74</span>, <span class="number">99</span>&#125;, &#123;<span class="number">77</span>, <span class="number">101</span>&#125;, &#123;<span class="number">81</span>, <span class="number">174</span>&#125;, &#123;<span class="number">82</span>, <span class="number">118</span>&#125;, &#123;<span class="number">83</span>, <span class="number">110</span>&#125;, &#123;<span class="number">85</span>, <span class="number">113</span>&#125;, &#123;<span class="number">89</span>, <span class="number">123</span>&#125;, &#123;<span class="number">90</span>, <span class="number">116</span>&#125;, &#123;<span class="number">94</span>, <span class="number">129</span>&#125;, &#123;<span class="number">95</span>, <span class="number">127</span>&#125;, &#123;<span class="number">97</span>, <span class="number">126</span>&#125;, &#123;<span class="number">103</span>, <span class="number">136</span>&#125;, &#123;<span class="number">105</span>, <span class="number">199</span>&#125;, &#123;<span class="number">106</span>, <span class="number">146</span>&#125;, &#123;<span class="number">108</span>, <span class="number">145</span>&#125;, &#123;<span class="number">112</span>, <span class="number">166</span>&#125;, &#123;<span class="number">115</span>, <span class="number">246</span>&#125;, &#123;<span class="number">120</span>, <span class="number">161</span>&#125;, &#123;<span class="number">122</span>, <span class="number">160</span>&#125;, &#123;<span class="number">125</span>, <span class="number">164</span>&#125;, &#123;<span class="number">131</span>, <span class="number">309</span>&#125;, &#123;<span class="number">132</span>, <span class="number">182</span>&#125;, &#123;<span class="number">133</span>, <span class="number">177</span>&#125;, &#123;<span class="number">135</span>, <span class="number">198</span>&#125;, &#123;<span class="number">138</span>, <span class="number">180</span>&#125;, &#123;<span class="number">139</span>, <span class="number">156</span>&#125;, &#123;<span class="number">141</span>, <span class="number">239</span>&#125;, &#123;<span class="number">142</span>, <span class="number">190</span>&#125;, &#123;<span class="number">143</span>, <span class="number">186</span>&#125;, &#123;<span class="number">148</span>, <span class="number">203</span>&#125;, &#123;<span class="number">149</span>, <span class="number">195</span>&#125;, &#123;<span class="number">151</span>, <span class="number">340</span>&#125;, &#123;<span class="number">152</span>, <span class="number">197</span>&#125;, &#123;<span class="number">154</span>, <span class="number">232</span>&#125;, &#123;<span class="number">158</span>, <span class="number">218</span>&#125;, &#123;<span class="number">163</span>, <span class="number">229</span>&#125;, &#123;<span class="number">168</span>, <span class="number">215</span>&#125;, &#123;<span class="number">170</span>, <span class="number">286</span>&#125;, &#123;<span class="number">171</span>, <span class="number">228</span>&#125;, &#123;<span class="number">172</span>, <span class="number">224</span>&#125;, &#123;<span class="number">176</span>, <span class="number">350</span>&#125;, &#123;<span class="number">179</span>, <span class="number">298</span>&#125;, &#123;<span class="number">184</span>, <span class="number">253</span>&#125;, &#123;<span class="number">185</span>, <span class="number">236</span>&#125;, &#123;<span class="number">188</span>, <span class="number">268</span>&#125;, &#123;<span class="number">189</span>, <span class="number">259</span>&#125;, &#123;<span class="number">192</span>, <span class="number">241</span>&#125;, &#123;<span class="number">194</span>, <span class="number">256</span>&#125;, &#123;<span class="number">201</span>, <span class="number">266</span>&#125;, &#123;<span class="number">205</span>, <span class="number">281</span>&#125;, &#123;<span class="number">207</span>, <span class="number">274</span>&#125;, &#123;<span class="number">208</span>, <span class="number">264</span>&#125;, &#123;<span class="number">210</span>, <span class="number">271</span>&#125;, &#123;<span class="number">212</span>, <span class="number">322</span>&#125;, &#123;<span class="number">213</span>, <span class="number">317</span>&#125;, &#123;<span class="number">214</span>, <span class="number">278</span>&#125;, &#123;<span class="number">217</span>, <span class="number">289</span>&#125;, &#123;<span class="number">220</span>, <span class="number">327</span>&#125;, &#123;<span class="number">221</span>, <span class="number">280</span>&#125;, &#123;<span class="number">223</span>, <span class="number">315</span>&#125;, &#123;<span class="number">226</span>, <span class="number">301</span>&#125;, &#123;<span class="number">231</span>, <span class="number">332</span>&#125;, &#123;<span class="number">234</span>, <span class="number">307</span>&#125;, &#123;<span class="number">238</span>, <span class="number">372</span>&#125;, &#123;<span class="number">243</span>, <span class="number">391</span>&#125;, &#123;<span class="number">244</span>, <span class="number">325</span>&#125;, &#123;<span class="number">245</span>, <span class="number">313</span>&#125;, &#123;<span class="number">248</span>, <span class="number">306</span>&#125;, &#123;<span class="number">250</span>, <span class="number">321</span>&#125;, &#123;<span class="number">252</span>, <span class="number">305</span>&#125;, &#123;<span class="number">255</span>, <span class="number">339</span>&#125;, &#123;<span class="number">258</span>, <span class="number">565</span>&#125;, &#123;<span class="number">261</span>, <span class="number">346</span>&#125;, &#123;<span class="number">263</span>, <span class="number">359</span>&#125;, &#123;<span class="number">270</span>, <span class="number">375</span>&#125;, &#123;<span class="number">273</span>, <span class="number">521</span>&#125;, &#123;<span class="number">276</span>, <span class="number">358</span>&#125;, &#123;<span class="number">283</span>, <span class="number">370</span>&#125;, &#123;<span class="number">285</span>, <span class="number">362</span>&#125;, &#123;<span class="number">288</span>, <span class="number">379</span>&#125;, &#123;<span class="number">291</span>, <span class="number">456</span>&#125;, &#123;<span class="number">293</span>, <span class="number">367</span>&#125;, &#123;<span class="number">295</span>, <span class="number">390</span>&#125;, &#123;<span class="number">296</span>, <span class="number">386</span>&#125;, &#123;<span class="number">300</span>, <span class="number">432</span>&#125;, &#123;<span class="number">303</span>, <span class="number">415</span>&#125;, &#123;<span class="number">311</span>, <span class="number">464</span>&#125;, &#123;<span class="number">312</span>, <span class="number">411</span>&#125;, &#123;<span class="number">319</span>, <span class="number">408</span>&#125;, &#123;<span class="number">324</span>, <span class="number">501</span>&#125;, &#123;<span class="number">329</span>, <span class="number">435</span>&#125;, &#123;<span class="number">331</span>, <span class="number">702</span>&#125;, &#123;<span class="number">334</span>, <span class="number">454</span>&#125;, &#123;<span class="number">336</span>, <span class="number">545</span>&#125;, &#123;<span class="number">337</span>, <span class="number">489</span>&#125;, &#123;<span class="number">338</span>, <span class="number">449</span>&#125;, &#123;<span class="number">342</span>, <span class="number">496</span>&#125;, &#123;<span class="number">343</span>, <span class="number">446</span>&#125;, &#123;<span class="number">345</span>, <span class="number">445</span>&#125;, &#123;<span class="number">348</span>, <span class="number">558</span>&#125;, &#123;<span class="number">349</span>, <span class="number">467</span>&#125;, &#123;<span class="number">352</span>, <span class="number">461</span>&#125;, &#123;<span class="number">354</span>, <span class="number">590</span>&#125;, &#123;<span class="number">355</span>, <span class="number">577</span>&#125;, &#123;<span class="number">356</span>, <span class="number">532</span>&#125;, &#123;<span class="number">357</span>, <span class="number">479</span>&#125;, &#123;<span class="number">361</span>, <span class="number">478</span>&#125;, &#123;<span class="number">364</span>, <span class="number">494</span>&#125;, &#123;<span class="number">366</span>, <span class="number">527</span>&#125;, &#123;<span class="number">369</span>, <span class="number">520</span>&#125;, &#123;<span class="number">374</span>, <span class="number">509</span>&#125;, &#123;<span class="number">377</span>, <span class="number">505</span>&#125;, &#123;<span class="number">381</span>, <span class="number">639</span>&#125;, &#123;<span class="number">382</span>, <span class="number">553</span>&#125;, &#123;<span class="number">384</span>, <span class="number">470</span>&#125;, &#123;<span class="number">388</span>, <span class="number">485</span>&#125;, &#123;<span class="number">393</span>, <span class="number">518</span>&#125;, &#123;<span class="number">395</span>, <span class="number">474</span>&#125;, &#123;<span class="number">397</span>, <span class="number">511</span>&#125;, &#123;<span class="number">399</span>, <span class="number">487</span>&#125;, &#123;<span class="number">400</span>, <span class="number">483</span>&#125;, &#123;<span class="number">402</span>, <span class="number">588</span>&#125;, &#123;<span class="number">404</span>, <span class="number">601</span>&#125;, &#123;<span class="number">405</span>, <span class="number">531</span>&#125;, &#123;<span class="number">407</span>, <span class="number">530</span>&#125;, &#123;<span class="number">410</span>, <span class="number">568</span>&#125;, &#123;<span class="number">413</span>, <span class="number">537</span>&#125;, &#123;<span class="number">417</span>, <span class="number">586</span>&#125;, &#123;<span class="number">419</span>, <span class="number">557</span>&#125;, &#123;<span class="number">420</span>, <span class="number">541</span>&#125;, &#123;<span class="number">421</span>, <span class="number">529</span>&#125;, &#123;<span class="number">423</span>, <span class="number">525</span>&#125;, &#123;<span class="number">425</span>, <span class="number">580</span>&#125;, &#123;<span class="number">427</span>, <span class="number">560</span>&#125;, &#123;<span class="number">429</span>, <span class="number">719</span>&#125;, &#123;<span class="number">430</span>, <span class="number">624</span>&#125;, &#123;<span class="number">431</span>, <span class="number">570</span>&#125;, &#123;<span class="number">434</span>, <span class="number">549</span>&#125;, &#123;<span class="number">437</span>, <span class="number">574</span>&#125;, &#123;<span class="number">439</span>, <span class="number">603</span>&#125;, &#123;<span class="number">440</span>, <span class="number">600</span>&#125;, &#123;<span class="number">442</span>, <span class="number">683</span>&#125;, &#123;<span class="number">443</span>, <span class="number">556</span>&#125;, &#123;<span class="number">448</span>, <span class="number">614</span>&#125;, &#123;<span class="number">451</span>, <span class="number">871</span>&#125;, &#123;<span class="number">452</span>, <span class="number">651</span>&#125;, &#123;<span class="number">453</span>, <span class="number">620</span>&#125;, &#123;<span class="number">458</span>, <span class="number">772</span>&#125;, &#123;<span class="number">459</span>, <span class="number">671</span>&#125;, &#123;<span class="number">460</span>, <span class="number">596</span>&#125;, &#123;<span class="number">463</span>, <span class="number">661</span>&#125;, &#123;<span class="number">466</span>, <span class="number">666</span>&#125;, &#123;<span class="number">469</span>, <span class="number">610</span>&#125;, &#123;<span class="number">472</span>, <span class="number">761</span>&#125;, &#123;<span class="number">473</span>, <span class="number">632</span>&#125;, &#123;<span class="number">476</span>, <span class="number">760</span>&#125;, &#123;<span class="number">477</span>, <span class="number">691</span>&#125;, &#123;<span class="number">481</span>, <span class="number">660</span>&#125;, &#123;<span class="number">491</span>, <span class="number">726</span>&#125;, &#123;<span class="number">492</span>, <span class="number">635</span>&#125;, &#123;<span class="number">498</span>, <span class="number">673</span>&#125;, &#123;<span class="number">499</span>, <span class="number">646</span>&#125;, &#123;<span class="number">503</span>, <span class="number">653</span>&#125;, &#123;<span class="number">504</span>, <span class="number">649</span>&#125;, &#123;<span class="number">507</span>, <span class="number">788</span>&#125;, &#123;<span class="number">508</span>, <span class="number">648</span>&#125;, &#123;<span class="number">513</span>, <span class="number">776</span>&#125;, &#123;<span class="number">514</span>, <span class="number">716</span>&#125;, &#123;<span class="number">515</span>, <span class="number">664</span>&#125;, &#123;<span class="number">516</span>, <span class="number">658</span>&#125;, &#123;<span class="number">523</span>, <span class="number">740</span>&#125;, &#123;<span class="number">534</span>, <span class="number">893</span>&#125;, &#123;<span class="number">535</span>, <span class="number">855</span>&#125;, &#123;<span class="number">539</span>, <span class="number">752</span>&#125;, &#123;<span class="number">540</span>, <span class="number">735</span>&#125;, &#123;<span class="number">543</span>, <span class="number">723</span>&#125;, &#123;<span class="number">547</span>, <span class="number">825</span>&#125;, &#123;<span class="number">548</span>, <span class="number">800</span>&#125;, &#123;<span class="number">551</span>, <span class="number">697</span>&#125;, &#123;<span class="number">555</span>, <span class="number">711</span>&#125;, &#123;<span class="number">562</span>, <span class="number">1202</span>&#125;, &#123;<span class="number">563</span>, <span class="number">771</span>&#125;, &#123;<span class="number">564</span>, <span class="number">693</span>&#125;, &#123;<span class="number">567</span>, <span class="number">737</span>&#125;, &#123;<span class="number">572</span>, <span class="number">744</span>&#125;, &#123;<span class="number">576</span>, <span class="number">766</span>&#125;, &#123;<span class="number">579</span>, <span class="number">780</span>&#125;, &#123;<span class="number">582</span>, <span class="number">986</span>&#125;, &#123;<span class="number">583</span>, <span class="number">768</span>&#125;, &#123;<span class="number">585</span>, <span class="number">748</span>&#125;, &#123;<span class="number">592</span>, <span class="number">877</span>&#125;, &#123;<span class="number">593</span>, <span class="number">811</span>&#125;, &#123;<span class="number">594</span>, <span class="number">805</span>&#125;, &#123;<span class="number">595</span>, <span class="number">722</span>&#125;, &#123;<span class="number">598</span>, <span class="number">1599</span>&#125;, &#123;<span class="number">599</span>, <span class="number">828</span>&#125;, &#123;<span class="number">605</span>, <span class="number">866</span>&#125;, &#123;<span class="number">606</span>, <span class="number">845</span>&#125;, &#123;<span class="number">607</span>, <span class="number">810</span>&#125;, &#123;<span class="number">609</span>, <span class="number">849</span>&#125;, &#123;<span class="number">612</span>, <span class="number">842</span>&#125;, &#123;<span class="number">616</span>, <span class="number">831</span>&#125;, &#123;<span class="number">617</span>, <span class="number">822</span>&#125;, &#123;<span class="number">619</span>, <span class="number">787</span>&#125;, &#123;<span class="number">622</span>, <span class="number">818</span>&#125;, &#123;<span class="number">626</span>, <span class="number">799</span>&#125;, &#123;<span class="number">628</span>, <span class="number">785</span>&#125;, &#123;<span class="number">630</span>, <span class="number">836</span>&#125;, &#123;<span class="number">634</span>, <span class="number">778</span>&#125;, &#123;<span class="number">637</span>, <span class="number">879</span>&#125;, &#123;<span class="number">641</span>, <span class="number">886</span>&#125;, &#123;<span class="number">643</span>, <span class="number">899</span>&#125;, &#123;<span class="number">644</span>, <span class="number">827</span>&#125;, &#123;<span class="number">655</span>, <span class="number">1046</span>&#125;, &#123;<span class="number">656</span>, <span class="number">918</span>&#125;, &#123;<span class="number">657</span>, <span class="number">876</span>&#125;, &#123;<span class="number">663</span>, <span class="number">870</span>&#125;, &#123;<span class="number">668</span>, <span class="number">989</span>&#125;, &#123;<span class="number">669</span>, <span class="number">929</span>&#125;, &#123;<span class="number">675</span>, <span class="number">985</span>&#125;, &#123;<span class="number">676</span>, <span class="number">857</span>&#125;, &#123;<span class="number">678</span>, <span class="number">912</span>&#125;, &#123;<span class="number">679</span>, <span class="number">904</span>&#125;, &#123;<span class="number">680</span>, <span class="number">896</span>&#125;, &#123;<span class="number">682</span>, <span class="number">1107</span>&#125;, &#123;<span class="number">685</span>, <span class="number">869</span>&#125;, &#123;<span class="number">687</span>, <span class="number">964</span>&#125;, &#123;<span class="number">689</span>, <span class="number">920</span>&#125;, &#123;<span class="number">695</span>, <span class="number">883</span>&#125;, &#123;<span class="number">699</span>, <span class="number">946</span>&#125;, &#123;<span class="number">700</span>, <span class="number">937</span>&#125;, &#123;<span class="number">704</span>, <span class="number">948</span>&#125;, &#123;<span class="number">706</span>, <span class="number">910</span>&#125;, &#123;<span class="number">708</span>, <span class="number">957</span>&#125;, &#123;<span class="number">710</span>, <span class="number">892</span>&#125;, &#123;<span class="number">713</span>, <span class="number">996</span>&#125;, &#123;<span class="number">714</span>, <span class="number">935</span>&#125;, &#123;<span class="number">718</span>, <span class="number">969</span>&#125;, &#123;<span class="number">721</span>, <span class="number">976</span>&#125;, &#123;<span class="number">725</span>, <span class="number">1358</span>&#125;, &#123;<span class="number">728</span>, <span class="number">1010</span>&#125;, &#123;<span class="number">730</span>, <span class="number">917</span>&#125;, &#123;<span class="number">732</span>, <span class="number">924</span>&#125;, &#123;<span class="number">734</span>, <span class="number">1167</span>&#125;, &#123;<span class="number">739</span>, <span class="number">1062</span>&#125;, &#123;<span class="number">742</span>, <span class="number">1036</span>&#125;, &#123;<span class="number">743</span>, <span class="number">1007</span>&#125;, &#123;<span class="number">746</span>, <span class="number">1065</span>&#125;, &#123;<span class="number">747</span>, <span class="number">1000</span>&#125;, &#123;<span class="number">750</span>, <span class="number">982</span>&#125;, &#123;<span class="number">751</span>, <span class="number">944</span>&#125;, &#123;<span class="number">754</span>, <span class="number">1020</span>&#125;, &#123;<span class="number">756</span>, <span class="number">1013</span>&#125;, &#123;<span class="number">757</span>, <span class="number">995</span>&#125;, &#123;<span class="number">759</span>, <span class="number">1854</span>&#125;, &#123;<span class="number">763</span>, <span class="number">991</span>&#125;, &#123;<span class="number">765</span>, <span class="number">1038</span>&#125;, &#123;<span class="number">770</span>, <span class="number">1150</span>&#125;, &#123;<span class="number">774</span>, <span class="number">1017</span>&#125;, &#123;<span class="number">782</span>, <span class="number">1032</span>&#125;, &#123;<span class="number">784</span>, <span class="number">1085</span>&#125;, &#123;<span class="number">790</span>, <span class="number">1082</span>&#125;, &#123;<span class="number">791</span>, <span class="number">1061</span>&#125;, &#123;<span class="number">793</span>, <span class="number">1090</span>&#125;, &#123;<span class="number">794</span>, <span class="number">956</span>&#125;, &#123;<span class="number">796</span>, <span class="number">1029</span>&#125;, &#123;<span class="number">797</span>, <span class="number">1023</span>&#125;, &#123;<span class="number">802</span>, <span class="number">1777</span>&#125;, &#123;<span class="number">803</span>, <span class="number">1072</span>&#125;, &#123;<span class="number">807</span>, <span class="number">1081</span>&#125;, &#123;<span class="number">808</span>, <span class="number">1079</span>&#125;, &#123;<span class="number">813</span>, <span class="number">1118</span>&#125;, &#123;<span class="number">814</span>, <span class="number">1117</span>&#125;, &#123;<span class="number">815</span>, <span class="number">1110</span>&#125;, &#123;<span class="number">816</span>, <span class="number">1040</span>&#125;, &#123;<span class="number">820</span>, <span class="number">1131</span>&#125;, &#123;<span class="number">824</span>, <span class="number">1070</span>&#125;, &#123;<span class="number">830</span>, <span class="number">1098</span>&#125;, &#123;<span class="number">833</span>, <span class="number">1053</span>&#125;, &#123;<span class="number">835</span>, <span class="number">1122</span>&#125;, &#123;<span class="number">838</span>, <span class="number">1201</span>&#125;, &#123;<span class="number">839</span>, <span class="number">1165</span>&#125;, &#123;<span class="number">841</span>, <span class="number">1322</span>&#125;, &#123;<span class="number">844</span>, <span class="number">1241</span>&#125;, &#123;<span class="number">847</span>, <span class="number">1225</span>&#125;, &#123;<span class="number">848</span>, <span class="number">1120</span>&#125;, &#123;<span class="number">851</span>, <span class="number">1190</span>&#125;, &#123;<span class="number">852</span>, <span class="number">1106</span>&#125;, &#123;<span class="number">853</span>, <span class="number">1076</span>&#125;, &#123;<span class="number">859</span>, <span class="number">1145</span>&#125;, &#123;<span class="number">861</span>, <span class="number">1206</span>&#125;, &#123;<span class="number">862</span>, <span class="number">1180</span>&#125;, &#123;<span class="number">863</span>, <span class="number">1130</span>&#125;, &#123;<span class="number">864</span>, <span class="number">1055</span>&#125;, &#123;<span class="number">868</span>, <span class="number">1156</span>&#125;, &#123;<span class="number">873</span>, <span class="number">1384</span>&#125;, &#123;<span class="number">874</span>, <span class="number">1212</span>&#125;, &#123;<span class="number">875</span>, <span class="number">1102</span>&#125;, &#123;<span class="number">881</span>, <span class="number">1194</span>&#125;, &#123;<span class="number">882</span>, <span class="number">1175</span>&#125;, &#123;<span class="number">885</span>, <span class="number">1164</span>&#125;, &#123;<span class="number">888</span>, <span class="number">1192</span>&#125;, &#123;<span class="number">890</span>, <span class="number">1186</span>&#125;, &#123;<span class="number">895</span>, <span class="number">1285</span>&#125;, &#123;<span class="number">898</span>, <span class="number">1227</span>&#125;, &#123;<span class="number">901</span>, <span class="number">2018</span>&#125;, &#123;<span class="number">902</span>, <span class="number">1211</span>&#125;, &#123;<span class="number">906</span>, <span class="number">1208</span>&#125;, &#123;<span class="number">908</span>, <span class="number">1261</span>&#125;, &#123;<span class="number">909</span>, <span class="number">1231</span>&#125;, &#123;<span class="number">914</span>, <span class="number">1245</span>&#125;, &#123;<span class="number">915</span>, <span class="number">1214</span>&#125;, &#123;<span class="number">922</span>, <span class="number">1394</span>&#125;, &#123;<span class="number">923</span>, <span class="number">1269</span>&#125;, &#123;<span class="number">926</span>, <span class="number">1363</span>&#125;, &#123;<span class="number">927</span>, <span class="number">1243</span>&#125;, &#123;<span class="number">931</span>, <span class="number">1274</span>&#125;, &#123;<span class="number">933</span>, <span class="number">1307</span>&#125;, &#123;<span class="number">939</span>, <span class="number">1405</span>&#125;, &#123;<span class="number">940</span>, <span class="number">1268</span>&#125;, &#123;<span class="number">942</span>, <span class="number">1381</span>&#125;, &#123;<span class="number">943</span>, <span class="number">1219</span>&#125;, &#123;<span class="number">950</span>, <span class="number">1265</span>&#125;, &#123;<span class="number">952</span>, <span class="number">1314</span>&#125;, &#123;<span class="number">954</span>, <span class="number">1254</span>&#125;, &#123;<span class="number">959</span>, <span class="number">1311</span>&#125;, &#123;<span class="number">960</span>, <span class="number">1297</span>&#125;, &#123;<span class="number">962</span>, <span class="number">1420</span>&#125;, &#123;<span class="number">963</span>, <span class="number">1295</span>&#125;, &#123;<span class="number">966</span>, <span class="number">1390</span>&#125;, &#123;<span class="number">967</span>, <span class="number">1279</span>&#125;, &#123;<span class="number">971</span>, <span class="number">1337</span>&#125;, &#123;<span class="number">972</span>, <span class="number">1302</span>&#125;, &#123;<span class="number">973</span>, <span class="number">1248</span>&#125;, &#123;<span class="number">975</span>, <span class="number">3859</span>&#125;, &#123;<span class="number">978</span>, <span class="number">1284</span>&#125;, &#123;<span class="number">980</span>, <span class="number">1547</span>&#125;, &#123;<span class="number">981</span>, <span class="number">1348</span>&#125;, &#123;<span class="number">984</span>, <span class="number">1317</span>&#125;, &#123;<span class="number">988</span>, <span class="number">1451</span>&#125;, &#123;<span class="number">993</span>, <span class="number">1378</span>&#125;, &#123;<span class="number">994</span>, <span class="number">1329</span>&#125;, &#123;<span class="number">998</span>, <span class="number">1812</span>&#125;, &#123;<span class="number">999</span>, <span class="number">1372</span>&#125;, &#123;<span class="number">1002</span>, <span class="number">1336</span>&#125;, &#123;<span class="number">1004</span>, <span class="number">1461</span>&#125;, &#123;<span class="number">1005</span>, <span class="number">1400</span>&#125;, &#123;<span class="number">1006</span>, <span class="number">1346</span>&#125;, &#123;<span class="number">1009</span>, <span class="number">1366</span>&#125;, &#123;<span class="number">1012</span>, <span class="number">1361</span>&#125;, &#123;<span class="number">1015</span>, <span class="number">1465</span>&#125;, &#123;<span class="number">1016</span>, <span class="number">1432</span>&#125;, &#123;<span class="number">1019</span>, <span class="number">1419</span>&#125;, &#123;<span class="number">1022</span>, <span class="number">1477</span>&#125;, &#123;<span class="number">1025</span>, <span class="number">1376</span>&#125;, &#123;<span class="number">1027</span>, <span class="number">1292</span>&#125;, &#123;<span class="number">1031</span>, <span class="number">1633</span>&#125;, &#123;<span class="number">1034</span>, <span class="number">1389</span>&#125;, &#123;<span class="number">1035</span>, <span class="number">1371</span>&#125;, &#123;<span class="number">1042</span>, <span class="number">1527</span>&#125;, &#123;<span class="number">1043</span>, <span class="number">1334</span>&#125;, &#123;<span class="number">1045</span>, <span class="number">1387</span>&#125;, &#123;<span class="number">1048</span>, <span class="number">1458</span>&#125;, &#123;<span class="number">1050</span>, <span class="number">2369</span>&#125;, &#123;<span class="number">1051</span>, <span class="number">1331</span>&#125;, &#123;<span class="number">1057</span>, <span class="number">1695</span>&#125;, &#123;<span class="number">1058</span>, <span class="number">1414</span>&#125;, &#123;<span class="number">1060</span>, <span class="number">1408</span>&#125;, &#123;<span class="number">1064</span>, <span class="number">1446</span>&#125;, &#123;<span class="number">1067</span>, <span class="number">1543</span>&#125;, &#123;<span class="number">1068</span>, <span class="number">1521</span>&#125;, &#123;<span class="number">1069</span>, <span class="number">1413</span>&#125;, &#123;<span class="number">1074</span>, <span class="number">1514</span>&#125;, &#123;<span class="number">1075</span>, <span class="number">1492</span>&#125;, &#123;<span class="number">1078</span>, <span class="number">1428</span>&#125;, &#123;<span class="number">1084</span>, <span class="number">1687</span>&#125;, &#123;<span class="number">1087</span>, <span class="number">1499</span>&#125;, &#123;<span class="number">1088</span>, <span class="number">1457</span>&#125;, &#123;<span class="number">1089</span>, <span class="number">1397</span>&#125;, &#123;<span class="number">1092</span>, <span class="number">1468</span>&#125;, &#123;<span class="number">1094</span>, <span class="number">1455</span>&#125;, &#123;<span class="number">1096</span>, <span class="number">1443</span>&#125;, &#123;<span class="number">1100</span>, <span class="number">1425</span>&#125;, &#123;<span class="number">1104</span>, <span class="number">1464</span>&#125;, &#123;<span class="number">1109</span>, <span class="number">1481</span>&#125;, &#123;<span class="number">1112</span>, <span class="number">1606</span>&#125;, &#123;<span class="number">1113</span>, <span class="number">1539</span>&#125;, &#123;<span class="number">1115</span>, <span class="number">1758</span>&#125;, &#123;<span class="number">1116</span>, <span class="number">1484</span>&#125;, &#123;<span class="number">1124</span>, <span class="number">1510</span>&#125;, &#123;<span class="number">1125</span>, <span class="number">1449</span>&#125;, &#123;<span class="number">1127</span>, <span class="number">1626</span>&#125;, &#123;<span class="number">1129</span>, <span class="number">1516</span>&#125;, &#123;<span class="number">1133</span>, <span class="number">1575</span>&#125;, &#123;<span class="number">1134</span>, <span class="number">1509</span>&#125;, &#123;<span class="number">1136</span>, <span class="number">1532</span>&#125;, &#123;<span class="number">1137</span>, <span class="number">1502</span>&#125;, &#123;<span class="number">1139</span>, <span class="number">1537</span>&#125;, &#123;<span class="number">1140</span>, <span class="number">1438</span>&#125;, &#123;<span class="number">1142</span>, <span class="number">1563</span>&#125;, &#123;<span class="number">1143</span>, <span class="number">1470</span>&#125;, &#123;<span class="number">1144</span>, <span class="number">1403</span>&#125;, &#123;<span class="number">1147</span>, <span class="number">2604</span>&#125;, &#123;<span class="number">1148</span>, <span class="number">1674</span>&#125;, &#123;<span class="number">1149</span>, <span class="number">1581</span>&#125;, &#123;<span class="number">1152</span>, <span class="number">1541</span>&#125;, &#123;<span class="number">1153</span>, <span class="number">1536</span>&#125;, &#123;<span class="number">1155</span>, <span class="number">1534</span>&#125;, &#123;<span class="number">1158</span>, <span class="number">1569</span>&#125;, &#123;<span class="number">1159</span>, <span class="number">1529</span>&#125;, &#123;<span class="number">1161</span>, <span class="number">1525</span>&#125;, &#123;<span class="number">1163</span>, <span class="number">1592</span>&#125;, &#123;<span class="number">1169</span>, <span class="number">1561</span>&#125;, &#123;<span class="number">1171</span>, <span class="number">1612</span>&#125;, &#123;<span class="number">1173</span>, <span class="number">1619</span>&#125;, &#123;<span class="number">1174</span>, <span class="number">1491</span>&#125;, &#123;<span class="number">1177</span>, <span class="number">2077</span>&#125;, &#123;<span class="number">1178</span>, <span class="number">1577</span>&#125;, &#123;<span class="number">1182</span>, <span class="number">2623</span>&#125;, &#123;<span class="number">1183</span>, <span class="number">1560</span>&#125;, &#123;<span class="number">1185</span>, <span class="number">1665</span>&#125;, &#123;<span class="number">1188</span>, <span class="number">1611</span>&#125;, &#123;<span class="number">1196</span>, <span class="number">1906</span>&#125;, &#123;<span class="number">1197</span>, <span class="number">1590</span>&#125;, &#123;<span class="number">1199</span>, <span class="number">1653</span>&#125;, &#123;<span class="number">1200</span>, <span class="number">1636</span>&#125;, &#123;<span class="number">1204</span>, <span class="number">1679</span>&#125;, &#123;<span class="number">1210</span>, <span class="number">2455</span>&#125;, &#123;<span class="number">1216</span>, <span class="number">1736</span>&#125;, &#123;<span class="number">1217</span>, <span class="number">1625</span>&#125;, &#123;<span class="number">1221</span>, <span class="number">1640</span>&#125;, &#123;<span class="number">1223</span>, <span class="number">1929</span>&#125;, &#123;<span class="number">1224</span>, <span class="number">1717</span>&#125;, &#123;<span class="number">1229</span>, <span class="number">1617</span>&#125;, &#123;<span class="number">1233</span>, <span class="number">1730</span>&#125;, &#123;<span class="number">1235</span>, <span class="number">1678</span>&#125;, &#123;<span class="number">1236</span>, <span class="number">1651</span>&#125;, &#123;<span class="number">1237</span>, <span class="number">1643</span>&#125;, &#123;<span class="number">1238</span>, <span class="number">1622</span>&#125;, &#123;<span class="number">1239</span>, <span class="number">1580</span>&#125;, &#123;<span class="number">1247</span>, <span class="number">1605</span>&#125;, &#123;<span class="number">1250</span>, <span class="number">1820</span>&#125;, &#123;<span class="number">1251</span>, <span class="number">1746</span>&#125;, &#123;<span class="number">1253</span>, <span class="number">1721</span>&#125;, &#123;<span class="number">1256</span>, <span class="number">2215</span>&#125;, &#123;<span class="number">1257</span>, <span class="number">1799</span>&#125;, &#123;<span class="number">1258</span>, <span class="number">1661</span>&#125;, &#123;<span class="number">1260</span>, <span class="number">1708</span>&#125;, &#123;<span class="number">1263</span>, <span class="number">1769</span>&#125;, &#123;<span class="number">1264</span>, <span class="number">1713</span>&#125;, &#123;<span class="number">1267</span>, <span class="number">1795</span>&#125;, &#123;<span class="number">1271</span>, <span class="number">2004</span>&#125;, &#123;<span class="number">1272</span>, <span class="number">1707</span>&#125;, &#123;<span class="number">1276</span>, <span class="number">1694</span>&#125;, &#123;<span class="number">1278</span>, <span class="number">1692</span>&#125;, &#123;<span class="number">1281</span>, <span class="number">1682</span>&#125;, &#123;<span class="number">1283</span>, <span class="number">1664</span>&#125;, &#123;<span class="number">1287</span>, <span class="number">1882</span>&#125;, &#123;<span class="number">1289</span>, <span class="number">1702</span>&#125;, &#123;<span class="number">1290</span>, <span class="number">1684</span>&#125;, &#123;<span class="number">1294</span>, <span class="number">1866</span>&#125;, &#123;<span class="number">1299</span>, <span class="number">1845</span>&#125;, &#123;<span class="number">1300</span>, <span class="number">1756</span>&#125;, &#123;<span class="number">1301</span>, <span class="number">1710</span>&#125;, &#123;<span class="number">1304</span>, <span class="number">1825</span>&#125;, &#123;<span class="number">1305</span>, <span class="number">1765</span>&#125;, &#123;<span class="number">1309</span>, <span class="number">1832</span>&#125;, &#123;<span class="number">1310</span>, <span class="number">1774</span>&#125;, &#123;<span class="number">1313</span>, <span class="number">2810</span>&#125;, &#123;<span class="number">1316</span>, <span class="number">1767</span>&#125;, &#123;<span class="number">1319</span>, <span class="number">1811</span>&#125;, &#123;<span class="number">1320</span>, <span class="number">1754</span>&#125;, &#123;<span class="number">1324</span>, <span class="number">2388</span>&#125;, &#123;<span class="number">1325</span>, <span class="number">1787</span>&#125;, &#123;<span class="number">1327</span>, <span class="number">1729</span>&#125;, &#123;<span class="number">1333</span>, <span class="number">2140</span>&#125;, &#123;<span class="number">1339</span>, <span class="number">1822</span>&#125;, &#123;<span class="number">1340</span>, <span class="number">1785</span>&#125;, &#123;<span class="number">1342</span>, <span class="number">1850</span>&#125;, &#123;<span class="number">1343</span>, <span class="number">1802</span>&#125;, &#123;<span class="number">1344</span>, <span class="number">1782</span>&#125;, &#123;<span class="number">1350</span>, <span class="number">2840</span>&#125;, &#123;<span class="number">1351</span>, <span class="number">2288</span>&#125;, &#123;<span class="number">1352</span>, <span class="number">1842</span>&#125;, &#123;<span class="number">1354</span>, <span class="number">1831</span>&#125;, &#123;<span class="number">1356</span>, <span class="number">1888</span>&#125;, &#123;<span class="number">1357</span>, <span class="number">1762</span>&#125;, &#123;<span class="number">1360</span>, <span class="number">1838</span>&#125;, &#123;<span class="number">1365</span>, <span class="number">1879</span>&#125;, &#123;<span class="number">1368</span>, <span class="number">1884</span>&#125;, &#123;<span class="number">1369</span>, <span class="number">1878</span>&#125;, &#123;<span class="number">1370</span>, <span class="number">1859</span>&#125;, &#123;<span class="number">1374</span>, <span class="number">2836</span>&#125;, &#123;<span class="number">1375</span>, <span class="number">2036</span>&#125;, &#123;<span class="number">1380</span>, <span class="number">1824</span>&#125;, &#123;<span class="number">1383</span>, <span class="number">1919</span>&#125;, &#123;<span class="number">1386</span>, <span class="number">1904</span>&#125;, &#123;<span class="number">1392</span>, <span class="number">1863</span>&#125;, &#123;<span class="number">1396</span>, <span class="number">1901</span>&#125;, &#123;<span class="number">1399</span>, <span class="number">1978</span>&#125;, &#123;<span class="number">1402</span>, <span class="number">1966</span>&#125;, &#123;<span class="number">1407</span>, <span class="number">1914</span>&#125;, &#123;<span class="number">1410</span>, <span class="number">1877</span>&#125;, &#123;<span class="number">1412</span>, <span class="number">2042</span>&#125;, &#123;<span class="number">1416</span>, <span class="number">1847</span>&#125;, &#123;<span class="number">1418</span>, <span class="number">1772</span>&#125;, &#123;<span class="number">1422</span>, <span class="number">1935</span>&#125;, &#123;<span class="number">1424</span>, <span class="number">2040</span>&#125;, &#123;<span class="number">1427</span>, <span class="number">2981</span>&#125;, &#123;<span class="number">1430</span>, <span class="number">1837</span>&#125;, &#123;<span class="number">1434</span>, <span class="number">1975</span>&#125;, &#123;<span class="number">1436</span>, <span class="number">1953</span>&#125;, &#123;<span class="number">1437</span>, <span class="number">1923</span>&#125;, &#123;<span class="number">1440</span>, <span class="number">2051</span>&#125;, &#123;<span class="number">1441</span>, <span class="number">1994</span>&#125;, &#123;<span class="number">1442</span>, <span class="number">1869</span>&#125;, &#123;<span class="number">1445</span>, <span class="number">2209</span>&#125;, &#123;<span class="number">1448</span>, <span class="number">1949</span>&#125;, &#123;<span class="number">1453</span>, <span class="number">2007</span>&#125;, &#123;<span class="number">1460</span>, <span class="number">1947</span>&#125;, &#123;<span class="number">1463</span>, <span class="number">2011</span>&#125;, &#123;<span class="number">1467</span>, <span class="number">2230</span>&#125;, &#123;<span class="number">1472</span>, <span class="number">1942</span>&#125;, &#123;<span class="number">1474</span>, <span class="number">2205</span>&#125;, &#123;<span class="number">1475</span>, <span class="number">1922</span>&#125;, &#123;<span class="number">1479</span>, <span class="number">2031</span>&#125;, &#123;<span class="number">1480</span>, <span class="number">1941</span>&#125;, &#123;<span class="number">1483</span>, <span class="number">2134</span>&#125;, &#123;<span class="number">1486</span>, <span class="number">2657</span>&#125;, &#123;<span class="number">1487</span>, <span class="number">2026</span>&#125;, &#123;<span class="number">1489</span>, <span class="number">2107</span>&#125;, &#123;<span class="number">1490</span>, <span class="number">2030</span>&#125;, &#123;<span class="number">1494</span>, <span class="number">1992</span>&#125;, &#123;<span class="number">1495</span>, <span class="number">1964</span>&#125;, &#123;<span class="number">1497</span>, <span class="number">1997</span>&#125;, &#123;<span class="number">1501</span>, <span class="number">2098</span>&#125;, &#123;<span class="number">1504</span>, <span class="number">1986</span>&#125;, &#123;<span class="number">1505</span>, <span class="number">1970</span>&#125;, &#123;<span class="number">1507</span>, <span class="number">2003</span>&#125;, &#123;<span class="number">1508</span>, <span class="number">1981</span>&#125;, &#123;<span class="number">1512</span>, <span class="number">2191</span>&#125;, &#123;<span class="number">1513</span>, <span class="number">2088</span>&#125;, &#123;<span class="number">1518</span>, <span class="number">2096</span>&#125;, &#123;<span class="number">1520</span>, <span class="number">1972</span>&#125;, &#123;<span class="number">1523</span>, <span class="number">3303</span>&#125;, &#123;<span class="number">1524</span>, <span class="number">2059</span>&#125;, &#123;<span class="number">1531</span>, <span class="number">2076</span>&#125;, &#123;<span class="number">1545</span>, <span class="number">2390</span>&#125;, &#123;<span class="number">1546</span>, <span class="number">2056</span>&#125;, &#123;<span class="number">1549</span>, <span class="number">2421</span>&#125;, &#123;<span class="number">1550</span>, <span class="number">2094</span>&#125;, &#123;<span class="number">1551</span>, <span class="number">2070</span>&#125;, &#123;<span class="number">1553</span>, <span class="number">2129</span>&#125;, &#123;<span class="number">1554</span>, <span class="number">2033</span>&#125;, &#123;<span class="number">1555</span>, <span class="number">2029</span>&#125;, &#123;<span class="number">1557</span>, <span class="number">2116</span>&#125;, &#123;<span class="number">1559</span>, <span class="number">3159</span>&#125;, &#123;<span class="number">1565</span>, <span class="number">2067</span>&#125;, &#123;<span class="number">1566</span>, <span class="number">2050</span>&#125;, &#123;<span class="number">1568</span>, <span class="number">2105</span>&#125;, &#123;<span class="number">1571</span>, <span class="number">2001</span>&#125;, &#123;<span class="number">1573</span>, <span class="number">2256</span>&#125;, &#123;<span class="number">1574</span>, <span class="number">2161</span>&#125;, &#123;<span class="number">1579</span>, <span class="number">2103</span>&#125;, &#123;<span class="number">1583</span>, <span class="number">2338</span>&#125;, &#123;<span class="number">1584</span>, <span class="number">2180</span>&#125;, &#123;<span class="number">1586</span>, <span class="number">2148</span>&#125;, &#123;<span class="number">1587</span>, <span class="number">2137</span>&#125;, &#123;<span class="number">1588</span>, <span class="number">2100</span>&#125;, &#123;<span class="number">1589</span>, <span class="number">2080</span>&#125;, &#123;<span class="number">1594</span>, <span class="number">2168</span>&#125;, &#123;<span class="number">1596</span>, <span class="number">3385</span>&#125;, &#123;<span class="number">1597</span>, <span class="number">2085</span>&#125;, &#123;<span class="number">1601</span>, <span class="number">2195</span>&#125;, &#123;<span class="number">1603</span>, <span class="number">2152</span>&#125;, &#123;<span class="number">1604</span>, <span class="number">2142</span>&#125;, &#123;<span class="number">1608</span>, <span class="number">2329</span>&#125;, &#123;<span class="number">1609</span>, <span class="number">2281</span>&#125;, &#123;<span class="number">1610</span>, <span class="number">2203</span>&#125;, &#123;<span class="number">1614</span>, <span class="number">2198</span>&#125;, &#123;<span class="number">1616</span>, <span class="number">2176</span>&#125;, &#123;<span class="number">1621</span>, <span class="number">2184</span>&#125;, &#123;<span class="number">1624</span>, <span class="number">2669</span>&#125;, &#123;<span class="number">1628</span>, <span class="number">2194</span>&#125;, &#123;<span class="number">1630</span>, <span class="number">2145</span>&#125;, &#123;<span class="number">1632</span>, <span class="number">3560</span>&#125;, &#123;<span class="number">1635</span>, <span class="number">2302</span>&#125;, &#123;<span class="number">1638</span>, <span class="number">2229</span>&#125;, &#123;<span class="number">1642</span>, <span class="number">2224</span>&#125;, &#123;<span class="number">1645</span>, <span class="number">2954</span>&#125;, &#123;<span class="number">1646</span>, <span class="number">2298</span>&#125;, &#123;<span class="number">1647</span>, <span class="number">2276</span>&#125;, &#123;<span class="number">1648</span>, <span class="number">2255</span>&#125;, &#123;<span class="number">1650</span>, <span class="number">2239</span>&#125;, &#123;<span class="number">1655</span>, <span class="number">2310</span>&#125;, &#123;<span class="number">1657</span>, <span class="number">2182</span>&#125;, &#123;<span class="number">1659</span>, <span class="number">2217</span>&#125;, &#123;<span class="number">1663</span>, <span class="number">2193</span>&#125;, &#123;<span class="number">1667</span>, <span class="number">2640</span>&#125;, &#123;<span class="number">1668</span>, <span class="number">2366</span>&#125;, &#123;<span class="number">1669</span>, <span class="number">2356</span>&#125;, &#123;<span class="number">1670</span>, <span class="number">2174</span>&#125;, &#123;<span class="number">1672</span>, <span class="number">2293</span>&#125;, &#123;<span class="number">1673</span>, <span class="number">2202</span>&#125;, &#123;<span class="number">1676</span>, <span class="number">2347</span>&#125;, &#123;<span class="number">1681</span>, <span class="number">2271</span>&#125;, &#123;<span class="number">1686</span>, <span class="number">3335</span>&#125;, &#123;<span class="number">1689</span>, <span class="number">2437</span>&#125;, &#123;<span class="number">1690</span>, <span class="number">2237</span>&#125;, &#123;<span class="number">1691</span>, <span class="number">2222</span>&#125;, &#123;<span class="number">1697</span>, <span class="number">4572</span>&#125;, &#123;<span class="number">1698</span>, <span class="number">2297</span>&#125;, &#123;<span class="number">1699</span>, <span class="number">2268</span>&#125;, &#123;<span class="number">1700</span>, <span class="number">2261</span>&#125;, &#123;<span class="number">1701</span>, <span class="number">2234</span>&#125;, &#123;<span class="number">1704</span>, <span class="number">2132</span>&#125;, &#123;<span class="number">1706</span>, <span class="number">2287</span>&#125;, &#123;<span class="number">1712</span>, <span class="number">2246</span>&#125;, &#123;<span class="number">1715</span>, <span class="number">2607</span>&#125;, &#123;<span class="number">1716</span>, <span class="number">2439</span>&#125;, &#123;<span class="number">1719</span>, <span class="number">2341</span>&#125;, &#123;<span class="number">1723</span>, <span class="number">2368</span>&#125;, &#123;<span class="number">1724</span>, <span class="number">2322</span>&#125;, &#123;<span class="number">1726</span>, <span class="number">2335</span>&#125;, &#123;<span class="number">1728</span>, <span class="number">2283</span>&#125;, &#123;<span class="number">1732</span>, <span class="number">2376</span>&#125;, &#123;<span class="number">1734</span>, <span class="number">3235</span>&#125;, &#123;<span class="number">1735</span>, <span class="number">2495</span>&#125;, &#123;<span class="number">1738</span>, <span class="number">2427</span>&#125;, &#123;<span class="number">1740</span>, <span class="number">2490</span>&#125;, &#123;<span class="number">1741</span>, <span class="number">2163</span>&#125;, &#123;<span class="number">1743</span>, <span class="number">2362</span>&#125;, &#123;<span class="number">1744</span>, <span class="number">2350</span>&#125;, &#123;<span class="number">1745</span>, <span class="number">2318</span>&#125;, &#123;<span class="number">1748</span>, <span class="number">3156</span>&#125;, &#123;<span class="number">1749</span>, <span class="number">2453</span>&#125;, &#123;<span class="number">1751</span>, <span class="number">2254</span>&#125;, &#123;<span class="number">1753</span>, <span class="number">2345</span>&#125;, &#123;<span class="number">1760</span>, <span class="number">2426</span>&#125;, &#123;<span class="number">1761</span>, <span class="number">2317</span>&#125;, &#123;<span class="number">1764</span>, <span class="number">2406</span>&#125;, &#123;<span class="number">1771</span>, <span class="number">2538</span>&#125;, &#123;<span class="number">1776</span>, <span class="number">2381</span>&#125;, &#123;<span class="number">1779</span>, <span class="number">2557</span>&#125;, &#123;<span class="number">1780</span>, <span class="number">2411</span>&#125;, &#123;<span class="number">1781</span>, <span class="number">2385</span>&#125;, &#123;<span class="number">1784</span>, <span class="number">2449</span>&#125;, &#123;<span class="number">1789</span>, <span class="number">2402</span>&#125;, &#123;<span class="number">1790</span>, <span class="number">2358</span>&#125;, &#123;<span class="number">1792</span>, <span class="number">2393</span>&#125;, &#123;<span class="number">1794</span>, <span class="number">2404</span>&#125;, &#123;<span class="number">1797</span>, <span class="number">2910</span>&#125;, &#123;<span class="number">1798</span>, <span class="number">2375</span>&#125;, &#123;<span class="number">1801</span>, <span class="number">3252</span>&#125;, &#123;<span class="number">1804</span>, <span class="number">2516</span>&#125;, &#123;<span class="number">1805</span>, <span class="number">2332</span>&#125;, &#123;<span class="number">1807</span>, <span class="number">2435</span>&#125;, &#123;<span class="number">1808</span>, <span class="number">2420</span>&#125;, &#123;<span class="number">1810</span>, <span class="number">2473</span>&#125;, &#123;<span class="number">1814</span>, <span class="number">2365</span>&#125;, &#123;<span class="number">1816</span>, <span class="number">3712</span>&#125;, &#123;<span class="number">1817</span>, <span class="number">2400</span>&#125;, &#123;<span class="number">1818</span>, <span class="number">2398</span>&#125;, &#123;<span class="number">1827</span>, <span class="number">2957</span>&#125;, &#123;<span class="number">1828</span>, <span class="number">2469</span>&#125;, &#123;<span class="number">1830</span>, <span class="number">2415</span>&#125;, &#123;<span class="number">1834</span>, <span class="number">2634</span>&#125;, &#123;<span class="number">1835</span>, <span class="number">2459</span>&#125;, &#123;<span class="number">1840</span>, <span class="number">2751</span>&#125;, &#123;<span class="number">1841</span>, <span class="number">2523</span>&#125;, &#123;<span class="number">1844</span>, <span class="number">2493</span>&#125;, &#123;<span class="number">1849</span>, <span class="number">2485</span>&#125;, &#123;<span class="number">1852</span>, <span class="number">2879</span>&#125;, &#123;<span class="number">1856</span>, <span class="number">2720</span>&#125;, &#123;<span class="number">1857</span>, <span class="number">2551</span>&#125;, &#123;<span class="number">1858</span>, <span class="number">2444</span>&#125;, &#123;<span class="number">1861</span>, <span class="number">3273</span>&#125;, &#123;<span class="number">1862</span>, <span class="number">2613</span>&#125;, &#123;<span class="number">1865</span>, <span class="number">2513</span>&#125;, &#123;<span class="number">1868</span>, <span class="number">3991</span>&#125;, &#123;<span class="number">1871</span>, <span class="number">2505</span>&#125;, &#123;<span class="number">1873</span>, <span class="number">2395</span>&#125;, &#123;<span class="number">1875</span>, <span class="number">2830</span>&#125;, &#123;<span class="number">1876</span>, <span class="number">2502</span>&#125;, &#123;<span class="number">1881</span>, <span class="number">2576</span>&#125;, &#123;<span class="number">1886</span>, <span class="number">2773</span>&#125;, &#123;<span class="number">1890</span>, <span class="number">2525</span>&#125;, &#123;<span class="number">1891</span>, <span class="number">2462</span>&#125;, &#123;<span class="number">1893</span>, <span class="number">2743</span>&#125;, &#123;<span class="number">1894</span>, <span class="number">2572</span>&#125;, &#123;<span class="number">1896</span>, <span class="number">2709</span>&#125;, &#123;<span class="number">1897</span>, <span class="number">2511</span>&#125;, &#123;<span class="number">1899</span>, <span class="number">2600</span>&#125;, &#123;<span class="number">1900</span>, <span class="number">2515</span>&#125;, &#123;<span class="number">1903</span>, <span class="number">2567</span>&#125;, &#123;<span class="number">1908</span>, <span class="number">4079</span>&#125;, &#123;<span class="number">1909</span>, <span class="number">2509</span>&#125;, &#123;<span class="number">1911</span>, <span class="number">2564</span>&#125;, &#123;<span class="number">1913</span>, <span class="number">2530</span>&#125;, &#123;<span class="number">1916</span>, <span class="number">2592</span>&#125;, &#123;<span class="number">1917</span>, <span class="number">2575</span>&#125;, &#123;<span class="number">1921</span>, <span class="number">2708</span>&#125;, &#123;<span class="number">1925</span>, <span class="number">2550</span>&#125;, &#123;<span class="number">1926</span>, <span class="number">2549</span>&#125;, &#123;<span class="number">1927</span>, <span class="number">2492</span>&#125;, &#123;<span class="number">1931</span>, <span class="number">4030</span>&#125;, &#123;<span class="number">1932</span>, <span class="number">2700</span>&#125;, &#123;<span class="number">1933</span>, <span class="number">2665</span>&#125;, &#123;<span class="number">1934</span>, <span class="number">2642</span>&#125;, &#123;<span class="number">1937</span>, <span class="number">2597</span>&#125;, &#123;<span class="number">1938</span>, <span class="number">2570</span>&#125;, &#123;<span class="number">1940</span>, <span class="number">2548</span>&#125;, &#123;<span class="number">1944</span>, <span class="number">2661</span>&#125;, &#123;<span class="number">1951</span>, <span class="number">2789</span>&#125;, &#123;<span class="number">1952</span>, <span class="number">2689</span>&#125;, &#123;<span class="number">1955</span>, <span class="number">2675</span>&#125;, &#123;<span class="number">1956</span>, <span class="number">2647</span>&#125;, &#123;<span class="number">1958</span>, <span class="number">2632</span>&#125;, &#123;<span class="number">1959</span>, <span class="number">2616</span>&#125;, &#123;<span class="number">1961</span>, <span class="number">2931</span>&#125;, &#123;<span class="number">1963</span>, <span class="number">2761</span>&#125;, &#123;<span class="number">1968</span>, <span class="number">2953</span>&#125;, &#123;<span class="number">1969</span>, <span class="number">2691</span>&#125;, &#123;<span class="number">1974</span>, <span class="number">2611</span>&#125;, &#123;<span class="number">1977</span>, <span class="number">2673</span>&#125;, &#123;<span class="number">1980</span>, <span class="number">2986</span>&#125;, &#123;<span class="number">1983</span>, <span class="number">2645</span>&#125;, &#123;<span class="number">1985</span>, <span class="number">2738</span>&#125;, &#123;<span class="number">1988</span>, <span class="number">2687</span>&#125;, &#123;<span class="number">1989</span>, <span class="number">2546</span>&#125;, &#123;<span class="number">1991</span>, <span class="number">2707</span>&#125;, &#123;<span class="number">1996</span>, <span class="number">2780</span>&#125;, &#123;<span class="number">1999</span>, <span class="number">2704</span>&#125;, &#123;<span class="number">2006</span>, <span class="number">3078</span>&#125;, &#123;<span class="number">2009</span>, <span class="number">2682</span>&#125;, &#123;<span class="number">2013</span>, <span class="number">2556</span>&#125;, &#123;<span class="number">2015</span>, <span class="number">2729</span>&#125;, &#123;<span class="number">2016</span>, <span class="number">2684</span>&#125;, &#123;<span class="number">2020</span>, <span class="number">2938</span>&#125;, &#123;<span class="number">2021</span>, <span class="number">2702</span>&#125;, &#123;<span class="number">2023</span>, <span class="number">2779</span>&#125;, &#123;<span class="number">2025</span>, <span class="number">2671</span>&#125;, &#123;<span class="number">2028</span>, <span class="number">3048</span>&#125;, &#123;<span class="number">2035</span>, <span class="number">4593</span>&#125;, &#123;<span class="number">2038</span>, <span class="number">2832</span>&#125;, &#123;<span class="number">2039</span>, <span class="number">2627</span>&#125;, &#123;<span class="number">2044</span>, <span class="number">3121</span>&#125;, &#123;<span class="number">2045</span>, <span class="number">2785</span>&#125;, &#123;<span class="number">2047</span>, <span class="number">2749</span>&#125;, &#123;<span class="number">2048</span>, <span class="number">2668</span>&#125;, &#123;<span class="number">2053</span>, <span class="number">4805</span>&#125;, &#123;<span class="number">2055</span>, <span class="number">2747</span>&#125;, &#123;<span class="number">2058</span>, <span class="number">2733</span>&#125;, &#123;<span class="number">2061</span>, <span class="number">3037</span>&#125;, &#123;<span class="number">2062</span>, <span class="number">2759</span>&#125;, &#123;<span class="number">2064</span>, <span class="number">2806</span>&#125;, &#123;<span class="number">2066</span>, <span class="number">2754</span>&#125;, &#123;<span class="number">2069</span>, <span class="number">2902</span>&#125;, &#123;<span class="number">2072</span>, <span class="number">2816</span>&#125;, &#123;<span class="number">2074</span>, <span class="number">2809</span>&#125;, &#123;<span class="number">2079</span>, <span class="number">2850</span>&#125;, &#123;<span class="number">2082</span>, <span class="number">3254</span>&#125;, &#123;<span class="number">2083</span>, <span class="number">3207</span>&#125;, &#123;<span class="number">2084</span>, <span class="number">2856</span>&#125;, &#123;<span class="number">2087</span>, <span class="number">2798</span>&#125;, &#123;<span class="number">2090</span>, <span class="number">2956</span>&#125;, &#123;<span class="number">2091</span>, <span class="number">2768</span>&#125;, &#123;<span class="number">2092</span>, <span class="number">2746</span>&#125;, &#123;<span class="number">2102</span>, <span class="number">2891</span>&#125;, &#123;<span class="number">2109</span>, <span class="number">3138</span>&#125;, &#123;<span class="number">2110</span>, <span class="number">2864</span>&#125;, &#123;<span class="number">2111</span>, <span class="number">2758</span>&#125;, &#123;<span class="number">2113</span>, <span class="number">2883</span>&#125;, &#123;<span class="number">2114</span>, <span class="number">2804</span>&#125;, &#123;<span class="number">2118</span>, <span class="number">4706</span>&#125;, &#123;<span class="number">2119</span>, <span class="number">2788</span>&#125;, &#123;<span class="number">2121</span>, <span class="number">2925</span>&#125;, &#123;<span class="number">2122</span>, <span class="number">2921</span>&#125;, &#123;<span class="number">2124</span>, <span class="number">2899</span>&#125;, &#123;<span class="number">2125</span>, <span class="number">2834</span>&#125;, &#123;<span class="number">2126</span>, <span class="number">2826</span>&#125;, &#123;<span class="number">2128</span>, <span class="number">2778</span>&#125;, &#123;<span class="number">2131</span>, <span class="number">3334</span>&#125;, &#123;<span class="number">2139</span>, <span class="number">2882</span>&#125;, &#123;<span class="number">2144</span>, <span class="number">3811</span>&#125;, &#123;<span class="number">2147</span>, <span class="number">2881</span>&#125;, &#123;<span class="number">2150</span>, <span class="number">3039</span>&#125;, &#123;<span class="number">2151</span>, <span class="number">2869</span>&#125;, &#123;<span class="number">2154</span>, <span class="number">2970</span>&#125;, &#123;<span class="number">2155</span>, <span class="number">2862</span>&#125;, &#123;<span class="number">2157</span>, <span class="number">4055</span>&#125;, &#123;<span class="number">2158</span>, <span class="number">2814</span>&#125;, &#123;<span class="number">2160</span>, <span class="number">2919</span>&#125;, &#123;<span class="number">2165</span>, <span class="number">2792</span>&#125;, &#123;<span class="number">2167</span>, <span class="number">2943</span>&#125;, &#123;<span class="number">2170</span>, <span class="number">2873</span>&#125;, &#123;<span class="number">2172</span>, <span class="number">3020</span>&#125;, &#123;<span class="number">2173</span>, <span class="number">2843</span>&#125;, &#123;<span class="number">2178</span>, <span class="number">2927</span>&#125;, &#123;<span class="number">2179</span>, <span class="number">2917</span>&#125;, &#123;<span class="number">2186</span>, <span class="number">3478</span>&#125;, &#123;<span class="number">2187</span>, <span class="number">2846</span>&#125;, &#123;<span class="number">2189</span>, <span class="number">2985</span>&#125;, &#123;<span class="number">2197</span>, <span class="number">3244</span>&#125;, &#123;<span class="number">2200</span>, <span class="number">2915</span>&#125;, &#123;<span class="number">2207</span>, <span class="number">3067</span>&#125;, &#123;<span class="number">2208</span>, <span class="number">3036</span>&#125;, &#123;<span class="number">2211</span>, <span class="number">3908</span>&#125;, &#123;<span class="number">2212</span>, <span class="number">2905</span>&#125;, &#123;<span class="number">2214</span>, <span class="number">3024</span>&#125;, &#123;<span class="number">2219</span>, <span class="number">2946</span>&#125;, &#123;<span class="number">2221</span>, <span class="number">3261</span>&#125;, &#123;<span class="number">2226</span>, <span class="number">3229</span>&#125;, &#123;<span class="number">2227</span>, <span class="number">3015</span>&#125;, &#123;<span class="number">2228</span>, <span class="number">2997</span>&#125;, &#123;<span class="number">2232</span>, <span class="number">3064</span>&#125;, &#123;<span class="number">2233</span>, <span class="number">2972</span>&#125;, &#123;<span class="number">2236</span>, <span class="number">2960</span>&#125;, &#123;<span class="number">2241</span>, <span class="number">3061</span>&#125;, &#123;<span class="number">2242</span>, <span class="number">3007</span>&#125;, &#123;<span class="number">2244</span>, <span class="number">2974</span>&#125;, &#123;<span class="number">2248</span>, <span class="number">3119</span>&#125;, &#123;<span class="number">2249</span>, <span class="number">3001</span>&#125;, &#123;<span class="number">2251</span>, <span class="number">3148</span>&#125;, &#123;<span class="number">2252</span>, <span class="number">3089</span>&#125;, &#123;<span class="number">2253</span>, <span class="number">3026</span>&#125;, &#123;<span class="number">2258</span>, <span class="number">3110</span>&#125;, &#123;<span class="number">2259</span>, <span class="number">3099</span>&#125;, &#123;<span class="number">2260</span>, <span class="number">2979</span>&#125;, &#123;<span class="number">2263</span>, <span class="number">3433</span>&#125;, &#123;<span class="number">2265</span>, <span class="number">2993</span>&#125;, &#123;<span class="number">2267</span>, <span class="number">3046</span>&#125;, &#123;<span class="number">2270</span>, <span class="number">3006</span>&#125;, &#123;<span class="number">2273</span>, <span class="number">3338</span>&#125;, &#123;<span class="number">2274</span>, <span class="number">3032</span>&#125;, &#123;<span class="number">2275</span>, <span class="number">3004</span>&#125;, &#123;<span class="number">2279</span>, <span class="number">3589</span>&#125;, &#123;<span class="number">2280</span>, <span class="number">3097</span>&#125;, &#123;<span class="number">2285</span>, <span class="number">3031</span>&#125;, &#123;<span class="number">2290</span>, <span class="number">3172</span>&#125;, &#123;<span class="number">2292</span>, <span class="number">3333</span>&#125;, &#123;<span class="number">2295</span>, <span class="number">3057</span>&#125;, &#123;<span class="number">2300</span>, <span class="number">3193</span>&#125;, &#123;<span class="number">2301</span>, <span class="number">3084</span>&#125;, &#123;<span class="number">2304</span>, <span class="number">3460</span>&#125;, &#123;<span class="number">2305</span>, <span class="number">3163</span>&#125;, &#123;<span class="number">2306</span>, <span class="number">3125</span>&#125;, &#123;<span class="number">2308</span>, <span class="number">3130</span>&#125;, &#123;<span class="number">2312</span>, <span class="number">3118</span>&#125;, &#123;<span class="number">2314</span>, <span class="number">3425</span>&#125;, &#123;<span class="number">2316</span>, <span class="number">3128</span>&#125;, &#123;<span class="number">2320</span>, <span class="number">3218</span>&#125;, &#123;<span class="number">2321</span>, <span class="number">3082</span>&#125;, &#123;<span class="number">2324</span>, <span class="number">3117</span>&#125;, &#123;<span class="number">2326</span>, <span class="number">3250</span>&#125;, &#123;<span class="number">2328</span>, <span class="number">3012</span>&#125;, &#123;<span class="number">2331</span>, <span class="number">3113</span>&#125;, &#123;<span class="number">2334</span>, <span class="number">3202</span>&#125;, &#123;<span class="number">2340</span>, <span class="number">3570</span>&#125;, &#123;<span class="number">2343</span>, <span class="number">3396</span>&#125;, &#123;<span class="number">2344</span>, <span class="number">3145</span>&#125;, &#123;<span class="number">2349</span>, <span class="number">3763</span>&#125;, &#123;<span class="number">2352</span>, <span class="number">3519</span>&#125;, &#123;<span class="number">2353</span>, <span class="number">3197</span>&#125;, &#123;<span class="number">2354</span>, <span class="number">3101</span>&#125;, &#123;<span class="number">2360</span>, <span class="number">3423</span>&#125;, &#123;<span class="number">2361</span>, <span class="number">3217</span>&#125;, &#123;<span class="number">2364</span>, <span class="number">4038</span>&#125;, &#123;<span class="number">2371</span>, <span class="number">3585</span>&#125;, &#123;<span class="number">2372</span>, <span class="number">3289</span>&#125;, &#123;<span class="number">2373</span>, <span class="number">3247</span>&#125;, &#123;<span class="number">2374</span>, <span class="number">3177</span>&#125;, &#123;<span class="number">2378</span>, <span class="number">3731</span>&#125;, &#123;<span class="number">2379</span>, <span class="number">3213</span>&#125;, &#123;<span class="number">2380</span>, <span class="number">3106</span>&#125;, &#123;<span class="number">2383</span>, <span class="number">3201</span>&#125;, &#123;<span class="number">2384</span>, <span class="number">3169</span>&#125;, &#123;<span class="number">2387</span>, <span class="number">3314</span>&#125;, &#123;<span class="number">2392</span>, <span class="number">3182</span>&#125;, &#123;<span class="number">2397</span>, <span class="number">3810</span>&#125;, &#123;<span class="number">2408</span>, <span class="number">3359</span>&#125;, &#123;<span class="number">2409</span>, <span class="number">3190</span>&#125;, &#123;<span class="number">2413</span>, <span class="number">3179</span>&#125;, &#123;<span class="number">2417</span>, <span class="number">3103</span>&#125;, &#123;<span class="number">2419</span>, <span class="number">3512</span>&#125;, &#123;<span class="number">2423</span>, <span class="number">3258</span>&#125;, &#123;<span class="number">2425</span>, <span class="number">4507</span>&#125;, &#123;<span class="number">2429</span>, <span class="number">3393</span>&#125;, &#123;<span class="number">2431</span>, <span class="number">3116</span>&#125;, &#123;<span class="number">2433</span>, <span class="number">3341</span>&#125;, &#123;<span class="number">2434</span>, <span class="number">3225</span>&#125;, &#123;<span class="number">2441</span>, <span class="number">3327</span>&#125;, &#123;<span class="number">2442</span>, <span class="number">3317</span>&#125;, &#123;<span class="number">2443</span>, <span class="number">3302</span>&#125;, &#123;<span class="number">2446</span>, <span class="number">3269</span>&#125;, &#123;<span class="number">2448</span>, <span class="number">4240</span>&#125;, &#123;<span class="number">2451</span>, <span class="number">3281</span>&#125;, &#123;<span class="number">2452</span>, <span class="number">3232</span>&#125;, &#123;<span class="number">2457</span>, <span class="number">3351</span>&#125;, &#123;<span class="number">2461</span>, <span class="number">3552</span>&#125;, &#123;<span class="number">2465</span>, <span class="number">3206</span>&#125;, &#123;<span class="number">2467</span>, <span class="number">3413</span>&#125;, &#123;<span class="number">2472</span>, <span class="number">3246</span>&#125;, &#123;<span class="number">2475</span>, <span class="number">3299</span>&#125;, &#123;<span class="number">2477</span>, <span class="number">3864</span>&#125;, &#123;<span class="number">2478</span>, <span class="number">3598</span>&#125;, &#123;<span class="number">2479</span>, <span class="number">3287</span>&#125;, &#123;<span class="number">2481</span>, <span class="number">3500</span>&#125;, &#123;<span class="number">2482</span>, <span class="number">3345</span>&#125;, &#123;<span class="number">2484</span>, <span class="number">3286</span>&#125;, &#123;<span class="number">2487</span>, <span class="number">3498</span>&#125;, &#123;<span class="number">2488</span>, <span class="number">3297</span>&#125;, &#123;<span class="number">2489</span>, <span class="number">3294</span>&#125;, &#123;<span class="number">2497</span>, <span class="number">4154</span>&#125;, &#123;<span class="number">2498</span>, <span class="number">3495</span>&#125;, &#123;<span class="number">2499</span>, <span class="number">3325</span>&#125;, &#123;<span class="number">2501</span>, <span class="number">3384</span>&#125;, &#123;<span class="number">2504</span>, <span class="number">3941</span>&#125;, &#123;<span class="number">2507</span>, <span class="number">3358</span>&#125;, &#123;<span class="number">2508</span>, <span class="number">3355</span>&#125;, &#123;<span class="number">2518</span>, <span class="number">3441</span>&#125;, &#123;<span class="number">2519</span>, <span class="number">3381</span>&#125;, &#123;<span class="number">2520</span>, <span class="number">3374</span>&#125;, &#123;<span class="number">2521</span>, <span class="number">3350</span>&#125;, &#123;<span class="number">2527</span>, <span class="number">3471</span>&#125;, &#123;<span class="number">2529</span>, <span class="number">3368</span>&#125;, &#123;<span class="number">2532</span>, <span class="number">3412</span>&#125;, &#123;<span class="number">2533</span>, <span class="number">3379</span>&#125;, &#123;<span class="number">2535</span>, <span class="number">3534</span>&#125;, &#123;<span class="number">2537</span>, <span class="number">3323</span>&#125;, &#123;<span class="number">2540</span>, <span class="number">3838</span>&#125;, &#123;<span class="number">2541</span>, <span class="number">3693</span>&#125;, &#123;<span class="number">2542</span>, <span class="number">3544</span>&#125;, &#123;<span class="number">2543</span>, <span class="number">3488</span>&#125;, &#123;<span class="number">2544</span>, <span class="number">3405</span>&#125;, &#123;<span class="number">2553</span>, <span class="number">3924</span>&#125;, &#123;<span class="number">2554</span>, <span class="number">3395</span>&#125;, &#123;<span class="number">2555</span>, <span class="number">3391</span>&#125;, &#123;<span class="number">2559</span>, <span class="number">3592</span>&#125;, &#123;<span class="number">2560</span>, <span class="number">3538</span>&#125;, &#123;<span class="number">2561</span>, <span class="number">3241</span>&#125;, &#123;<span class="number">2563</span>, <span class="number">3510</span>&#125;, &#123;<span class="number">2566</span>, <span class="number">3502</span>&#125;, &#123;<span class="number">2569</span>, <span class="number">3422</span>&#125;, &#123;<span class="number">2574</span>, <span class="number">3699</span>&#125;, &#123;<span class="number">2578</span>, <span class="number">3536</span>&#125;, &#123;<span class="number">2579</span>, <span class="number">3467</span>&#125;, &#123;<span class="number">2580</span>, <span class="number">3459</span>&#125;, &#123;<span class="number">2581</span>, <span class="number">3454</span>&#125;, &#123;<span class="number">2582</span>, <span class="number">3377</span>&#125;, &#123;<span class="number">2584</span>, <span class="number">3684</span>&#125;, &#123;<span class="number">2585</span>, <span class="number">3475</span>&#125;, &#123;<span class="number">2586</span>, <span class="number">3343</span>&#125;, &#123;<span class="number">2587</span>, <span class="number">3312</span>&#125;, &#123;<span class="number">2590</span>, <span class="number">3722</span>&#125;, &#123;<span class="number">2594</span>, <span class="number">3409</span>&#125;, &#123;<span class="number">2595</span>, <span class="number">3372</span>&#125;, &#123;<span class="number">2599</span>, <span class="number">3466</span>&#125;, &#123;<span class="number">2602</span>, <span class="number">3558</span>&#125;, &#123;<span class="number">2606</span>, <span class="number">3518</span>&#125;, &#123;<span class="number">2609</span>, <span class="number">3464</span>&#125;, &#123;<span class="number">2615</span>, <span class="number">4125</span>&#125;, &#123;<span class="number">2618</span>, <span class="number">3628</span>&#125;, &#123;<span class="number">2619</span>, <span class="number">3605</span>&#125;, &#123;<span class="number">2620</span>, <span class="number">3601</span>&#125;, &#123;<span class="number">2621</span>, <span class="number">3525</span>&#125;, &#123;<span class="number">2625</span>, <span class="number">3739</span>&#125;, &#123;<span class="number">2626</span>, <span class="number">3418</span>&#125;, &#123;<span class="number">2629</span>, <span class="number">3578</span>&#125;, &#123;<span class="number">2630</span>, <span class="number">3508</span>&#125;, &#123;<span class="number">2636</span>, <span class="number">3667</span>&#125;, &#123;<span class="number">2637</span>, <span class="number">3480</span>&#125;, &#123;<span class="number">2638</span>, <span class="number">3463</span>&#125;, &#123;<span class="number">2644</span>, <span class="number">3621</span>&#125;, &#123;<span class="number">2649</span>, <span class="number">4089</span>&#125;, &#123;<span class="number">2650</span>, <span class="number">3671</span>&#125;, &#123;<span class="number">2651</span>, <span class="number">3547</span>&#125;, &#123;<span class="number">2652</span>, <span class="number">3449</span>&#125;, &#123;<span class="number">2654</span>, <span class="number">3367</span>&#125;, &#123;<span class="number">2656</span>, <span class="number">3584</span>&#125;, &#123;<span class="number">2659</span>, <span class="number">3569</span>&#125;, &#123;<span class="number">2663</span>, <span class="number">4619</span>&#125;, &#123;<span class="number">2664</span>, <span class="number">3506</span>&#125;, &#123;<span class="number">2667</span>, <span class="number">3772</span>&#125;, &#123;<span class="number">2677</span>, <span class="number">3748</span>&#125;, &#123;<span class="number">2678</span>, <span class="number">3720</span>&#125;, &#123;<span class="number">2679</span>, <span class="number">3658</span>&#125;, &#123;<span class="number">2680</span>, <span class="number">3529</span>&#125;, &#123;<span class="number">2693</span>, <span class="number">4018</span>&#125;, &#123;<span class="number">2694</span>, <span class="number">3614</span>&#125;, &#123;<span class="number">2696</span>, <span class="number">3565</span>&#125;, &#123;<span class="number">2698</span>, <span class="number">3844</span>&#125;, &#123;<span class="number">2699</span>, <span class="number">3638</span>&#125;, &#123;<span class="number">2706</span>, <span class="number">3640</span>&#125;, &#123;<span class="number">2711</span>, <span class="number">3977</span>&#125;, &#123;<span class="number">2712</span>, <span class="number">3619</span>&#125;, &#123;<span class="number">2714</span>, <span class="number">4162</span>&#125;, &#123;<span class="number">2715</span>, <span class="number">3665</span>&#125;, &#123;<span class="number">2717</span>, <span class="number">3643</span>&#125;, &#123;<span class="number">2718</span>, <span class="number">3549</span>&#125;, &#123;<span class="number">2722</span>, <span class="number">4815</span>&#125;, &#123;<span class="number">2723</span>, <span class="number">3600</span>&#125;, &#123;<span class="number">2725</span>, <span class="number">4479</span>&#125;, &#123;<span class="number">2726</span>, <span class="number">3635</span>&#125;, &#123;<span class="number">2728</span>, <span class="number">3814</span>&#125;, &#123;<span class="number">2731</span>, <span class="number">3852</span>&#125;, &#123;<span class="number">2732</span>, <span class="number">3727</span>&#125;, &#123;<span class="number">2735</span>, <span class="number">3759</span>&#125;, &#123;<span class="number">2736</span>, <span class="number">3689</span>&#125;, &#123;<span class="number">2737</span>, <span class="number">3651</span>&#125;, &#123;<span class="number">2740</span>, <span class="number">3832</span>&#125;, &#123;<span class="number">2741</span>, <span class="number">3676</span>&#125;, &#123;<span class="number">2742</span>, <span class="number">3647</span>&#125;, &#123;<span class="number">2745</span>, <span class="number">3898</span>&#125;, &#123;<span class="number">2753</span>, <span class="number">3917</span>&#125;, &#123;<span class="number">2756</span>, <span class="number">3719</span>&#125;, &#123;<span class="number">2757</span>, <span class="number">3673</span>&#125;, &#123;<span class="number">2763</span>, <span class="number">4052</span>&#125;, &#123;<span class="number">2765</span>, <span class="number">3698</span>&#125;, &#123;<span class="number">2767</span>, <span class="number">3825</span>&#125;, &#123;<span class="number">2770</span>, <span class="number">3974</span>&#125;, &#123;<span class="number">2771</span>, <span class="number">3709</span>&#125;, &#123;<span class="number">2775</span>, <span class="number">3705</span>&#125;, &#123;<span class="number">2777</span>, <span class="number">4012</span>&#125;, &#123;<span class="number">2782</span>, <span class="number">3681</span>&#125;, &#123;<span class="number">2784</span>, <span class="number">3890</span>&#125;, &#123;<span class="number">2787</span>, <span class="number">4608</span>&#125;, &#123;<span class="number">2791</span>, <span class="number">3656</span>&#125;, &#123;<span class="number">2794</span>, <span class="number">3862</span>&#125;, &#123;<span class="number">2795</span>, <span class="number">3714</span>&#125;, &#123;<span class="number">2797</span>, <span class="number">3957</span>&#125;, &#123;<span class="number">2800</span>, <span class="number">3762</span>&#125;, &#123;<span class="number">2801</span>, <span class="number">3733</span>&#125;, &#123;<span class="number">2802</span>, <span class="number">3704</span>&#125;, &#123;<span class="number">2808</span>, <span class="number">3769</span>&#125;, &#123;<span class="number">2812</span>, <span class="number">3848</span>&#125;, &#123;<span class="number">2813</span>, <span class="number">3787</span>&#125;, &#123;<span class="number">2818</span>, <span class="number">3743</span>&#125;, &#123;<span class="number">2820</span>, <span class="number">3854</span>&#125;, &#123;<span class="number">2823</span>, <span class="number">3771</span>&#125;, &#123;<span class="number">2825</span>, <span class="number">3756</span>&#125;, &#123;<span class="number">2828</span>, <span class="number">4075</span>&#125;, &#123;<span class="number">2829</span>, <span class="number">3724</span>&#125;, &#123;<span class="number">2838</span>, <span class="number">3999</span>&#125;, &#123;<span class="number">2839</span>, <span class="number">3793</span>&#125;, &#123;<span class="number">2842</span>, <span class="number">4745</span>&#125;, &#123;<span class="number">2845</span>, <span class="number">3888</span>&#125;, &#123;<span class="number">2848</span>, <span class="number">3932</span>&#125;, &#123;<span class="number">2849</span>, <span class="number">3886</span>&#125;, &#123;<span class="number">2852</span>, <span class="number">4550</span>&#125;, &#123;<span class="number">2853</span>, <span class="number">3824</span>&#125;, &#123;<span class="number">2855</span>, <span class="number">3777</span>&#125;, &#123;<span class="number">2858</span>, <span class="number">3955</span>&#125;, &#123;<span class="number">2859</span>, <span class="number">3882</span>&#125;, &#123;<span class="number">2860</span>, <span class="number">3781</span>&#125;, &#123;<span class="number">2861</span>, <span class="number">3776</span>&#125;, &#123;<span class="number">2866</span>, <span class="number">3809</span>&#125;, &#123;<span class="number">2867</span>, <span class="number">3737</span>&#125;, &#123;<span class="number">2871</span>, <span class="number">4390</span>&#125;, &#123;<span class="number">2872</span>, <span class="number">4186</span>&#125;, &#123;<span class="number">2875</span>, <span class="number">3907</span>&#125;, &#123;<span class="number">2876</span>, <span class="number">3767</span>&#125;, &#123;<span class="number">2878</span>, <span class="number">4044</span>&#125;, &#123;<span class="number">2886</span>, <span class="number">3900</span>&#125;, &#123;<span class="number">2889</span>, <span class="number">3880</span>&#125;, &#123;<span class="number">2893</span>, <span class="number">4011</span>&#125;, &#123;<span class="number">2895</span>, <span class="number">3835</span>&#125;, &#123;<span class="number">2897</span>, <span class="number">4782</span>&#125;, &#123;<span class="number">2898</span>, <span class="number">3801</span>&#125;, &#123;<span class="number">2901</span>, <span class="number">3995</span>&#125;, &#123;<span class="number">2904</span>, <span class="number">4336</span>&#125;, &#123;<span class="number">2907</span>, <span class="number">3935</span>&#125;, &#123;<span class="number">2909</span>, <span class="number">3822</span>&#125;, &#123;<span class="number">2912</span>, <span class="number">3916</span>&#125;, &#123;<span class="number">2914</span>, <span class="number">3971</span>&#125;, &#123;<span class="number">2923</span>, <span class="number">4197</span>&#125;, &#123;<span class="number">2924</span>, <span class="number">4109</span>&#125;, &#123;<span class="number">2929</span>, <span class="number">3927</span>&#125;, &#123;<span class="number">2930</span>, <span class="number">3872</span>&#125;, &#123;<span class="number">2933</span>, <span class="number">4192</span>&#125;, &#123;<span class="number">2934</span>, <span class="number">4135</span>&#125;, &#123;<span class="number">2936</span>, <span class="number">3923</span>&#125;, &#123;<span class="number">2940</span>, <span class="number">3841</span>&#125;, &#123;<span class="number">2941</span>, <span class="number">3798</span>&#125;, &#123;<span class="number">2945</span>, <span class="number">4152</span>&#125;, &#123;<span class="number">2948</span>, <span class="number">3948</span>&#125;, &#123;<span class="number">2950</span>, <span class="number">3944</span>&#125;, &#123;<span class="number">2952</span>, <span class="number">4027</span>&#125;, &#123;<span class="number">2959</span>, <span class="number">4138</span>&#125;, &#123;<span class="number">2962</span>, <span class="number">4199</span>&#125;, &#123;<span class="number">2963</span>, <span class="number">4160</span>&#125;, &#123;<span class="number">2964</span>, <span class="number">3921</span>&#125;, &#123;<span class="number">2966</span>, <span class="number">4082</span>&#125;, &#123;<span class="number">2967</span>, <span class="number">3896</span>&#125;, &#123;<span class="number">2968</span>, <span class="number">3795</span>&#125;, &#123;<span class="number">2976</span>, <span class="number">4151</span>&#125;, &#123;<span class="number">2977</span>, <span class="number">3982</span>&#125;, &#123;<span class="number">2978</span>, <span class="number">3966</span>&#125;, &#123;<span class="number">2983</span>, <span class="number">3998</span>&#125;, &#123;<span class="number">2988</span>, <span class="number">4779</span>&#125;, &#123;<span class="number">2989</span>, <span class="number">4231</span>&#125;, &#123;<span class="number">2990</span>, <span class="number">4121</span>&#125;, &#123;<span class="number">2991</span>, <span class="number">4081</span>&#125;, &#123;<span class="number">2995</span>, <span class="number">4074</span>&#125;, &#123;<span class="number">2996</span>, <span class="number">3965</span>&#125;, &#123;<span class="number">2999</span>, <span class="number">4363</span>&#125;, &#123;<span class="number">3000</span>, <span class="number">4060</span>&#125;, &#123;<span class="number">3003</span>, <span class="number">4302</span>&#125;, &#123;<span class="number">3009</span>, <span class="number">4237</span>&#125;, &#123;<span class="number">3010</span>, <span class="number">4017</span>&#125;, &#123;<span class="number">3011</span>, <span class="number">3952</span>&#125;, &#123;<span class="number">3014</span>, <span class="number">4443</span>&#125;, &#123;<span class="number">3017</span>, <span class="number">4010</span>&#125;, &#123;<span class="number">3019</span>, <span class="number">4037</span>&#125;, &#123;<span class="number">3023</span>, <span class="number">4103</span>&#125;, &#123;<span class="number">3028</span>, <span class="number">4176</span>&#125;, &#123;<span class="number">3029</span>, <span class="number">4141</span>&#125;, &#123;<span class="number">3030</span>, <span class="number">3914</span>&#125;, &#123;<span class="number">3034</span>, <span class="number">4107</span>&#125;, &#123;<span class="number">3035</span>, <span class="number">4070</span>&#125;, &#123;<span class="number">3041</span>, <span class="number">4111</span>&#125;, &#123;<span class="number">3043</span>, <span class="number">4051</span>&#125;, &#123;<span class="number">3045</span>, <span class="number">4128</span>&#125;, &#123;<span class="number">3050</span>, <span class="number">4249</span>&#125;, &#123;<span class="number">3051</span>, <span class="number">4016</span>&#125;, &#123;<span class="number">3053</span>, <span class="number">4097</span>&#125;, &#123;<span class="number">3055</span>, <span class="number">3961</span>&#125;, &#123;<span class="number">3059</span>, <span class="number">4700</span>&#125;, &#123;<span class="number">3060</span>, <span class="number">4049</span>&#125;, &#123;<span class="number">3063</span>, <span class="number">4330</span>&#125;, &#123;<span class="number">3066</span>, <span class="number">3877</span>&#125;, &#123;<span class="number">3069</span>, <span class="number">4278</span>&#125;, &#123;<span class="number">3072</span>, <span class="number">4150</span>&#125;, &#123;<span class="number">3074</span>, <span class="number">4057</span>&#125;, &#123;<span class="number">3076</span>, <span class="number">3821</span>&#125;, &#123;<span class="number">3080</span>, <span class="number">4263</span>&#125;, &#123;<span class="number">3081</span>, <span class="number">4033</span>&#125;, &#123;<span class="number">3086</span>, <span class="number">4140</span>&#125;, &#123;<span class="number">3087</span>, <span class="number">4100</span>&#125;, &#123;<span class="number">3091</span>, <span class="number">4447</span>&#125;, &#123;<span class="number">3092</span>, <span class="number">4234</span>&#125;, &#123;<span class="number">3093</span>, <span class="number">4219</span>&#125;, &#123;<span class="number">3094</span>, <span class="number">4120</span>&#125;, &#123;<span class="number">3096</span>, <span class="number">4223</span>&#125;, &#123;<span class="number">3105</span>, <span class="number">4324</span>&#125;, &#123;<span class="number">3108</span>, <span class="number">4449</span>&#125;, &#123;<span class="number">3112</span>, <span class="number">4503</span>&#125;, &#123;<span class="number">3115</span>, <span class="number">4222</span>&#125;, &#123;<span class="number">3123</span>, <span class="number">4119</span>&#125;, &#123;<span class="number">3127</span>, <span class="number">4173</span>&#125;, &#123;<span class="number">3132</span>, <span class="number">4429</span>&#125;, &#123;<span class="number">3133</span>, <span class="number">4184</span>&#125;, &#123;<span class="number">3136</span>, <span class="number">4195</span>&#125;, &#123;<span class="number">3137</span>, <span class="number">4146</span>&#125;, &#123;<span class="number">3140</span>, <span class="number">4262</span>&#125;, &#123;<span class="number">3143</span>, <span class="number">4210</span>&#125;, &#123;<span class="number">3147</span>, <span class="number">4209</span>&#125;, &#123;<span class="number">3150</span>, <span class="number">4026</span>&#125;, &#123;<span class="number">3152</span>, <span class="number">4253</span>&#125;, &#123;<span class="number">3153</span>, <span class="number">4169</span>&#125;, &#123;<span class="number">3158</span>, <span class="number">4243</span>&#125;, &#123;<span class="number">3162</span>, <span class="number">4272</span>&#125;, &#123;<span class="number">3165</span>, <span class="number">4182</span>&#125;, &#123;<span class="number">3167</span>, <span class="number">4563</span>&#125;, &#123;<span class="number">3168</span>, <span class="number">4361</span>&#125;, &#123;<span class="number">3171</span>, <span class="number">4543</span>&#125;, &#123;<span class="number">3174</span>, <span class="number">4683</span>&#125;, &#123;<span class="number">3175</span>, <span class="number">4271</span>&#125;, &#123;<span class="number">3181</span>, <span class="number">4300</span>&#125;, &#123;<span class="number">3184</span>, <span class="number">4395</span>&#125;, &#123;<span class="number">3187</span>, <span class="number">4068</span>&#125;, &#123;<span class="number">3189</span>, <span class="number">4291</span>&#125;, &#123;<span class="number">3192</span>, <span class="number">4296</span>&#125;, &#123;<span class="number">3195</span>, <span class="number">4247</span>&#125;, &#123;<span class="number">3199</span>, <span class="number">4348</span>&#125;, &#123;<span class="number">3204</span>, <span class="number">4307</span>&#125;, &#123;<span class="number">3209</span>, <span class="number">4338</span>&#125;, &#123;<span class="number">3211</span>, <span class="number">4261</span>&#125;, &#123;<span class="number">3212</span>, <span class="number">4172</span>&#125;, &#123;<span class="number">3215</span>, <span class="number">4314</span>&#125;, &#123;<span class="number">3216</span>, <span class="number">4277</span>&#125;, &#123;<span class="number">3220</span>, <span class="number">4343</span>&#125;, &#123;<span class="number">3221</span>, <span class="number">4319</span>&#125;, &#123;<span class="number">3223</span>, <span class="number">4992</span>&#125;, &#123;<span class="number">3224</span>, <span class="number">4506</span>&#125;, &#123;<span class="number">3227</span>, <span class="number">4495</span>&#125;, &#123;<span class="number">3228</span>, <span class="number">4446</span>&#125;, &#123;<span class="number">3231</span>, <span class="number">4425</span>&#125;, &#123;<span class="number">3234</span>, <span class="number">4373</span>&#125;, &#123;<span class="number">3237</span>, <span class="number">4375</span>&#125;, &#123;<span class="number">3239</span>, <span class="number">4305</span>&#125;, &#123;<span class="number">3243</span>, <span class="number">4528</span>&#125;, &#123;<span class="number">3249</span>, <span class="number">4454</span>&#125;, &#123;<span class="number">3256</span>, <span class="number">4471</span>&#125;, &#123;<span class="number">3257</span>, <span class="number">4345</span>&#125;, &#123;<span class="number">3260</span>, <span class="number">4610</span>&#125;, &#123;<span class="number">3264</span>, <span class="number">4581</span>&#125;, &#123;<span class="number">3265</span>, <span class="number">4290</span>&#125;, &#123;<span class="number">3268</span>, <span class="number">4547</span>&#125;, &#123;<span class="number">3271</span>, <span class="number">4549</span>&#125;, &#123;<span class="number">3272</span>, <span class="number">4310</span>&#125;, &#123;<span class="number">3275</span>, <span class="number">4356</span>&#125;, &#123;<span class="number">3277</span>, <span class="number">4539</span>&#125;, &#123;<span class="number">3278</span>, <span class="number">4270</span>&#125;, &#123;<span class="number">3280</span>, <span class="number">4165</span>&#125;, &#123;<span class="number">3283</span>, <span class="number">4526</span>&#125;, &#123;<span class="number">3285</span>, <span class="number">4341</span>&#125;, &#123;<span class="number">3291</span>, <span class="number">4493</span>&#125;, &#123;<span class="number">3293</span>, <span class="number">4473</span>&#125;, &#123;<span class="number">3296</span>, <span class="number">4546</span>&#125;, &#123;<span class="number">3301</span>, <span class="number">4678</span>&#125;, &#123;<span class="number">3306</span>, <span class="number">4453</span>&#125;, &#123;<span class="number">3308</span>, <span class="number">4452</span>&#125;, &#123;<span class="number">3309</span>, <span class="number">4442</span>&#125;, &#123;<span class="number">3310</span>, <span class="number">4384</span>&#125;, &#123;<span class="number">3316</span>, <span class="number">4466</span>&#125;, &#123;<span class="number">3320</span>, <span class="number">4288</span>&#125;, &#123;<span class="number">3322</span>, <span class="number">4511</span>&#125;, &#123;<span class="number">3329</span>, <span class="number">4416</span>&#125;, &#123;<span class="number">3331</span>, <span class="number">4298</span>&#125;, &#123;<span class="number">3337</span>, <span class="number">4317</span>&#125;, &#123;<span class="number">3347</span>, <span class="number">4663</span>&#125;, &#123;<span class="number">3348</span>, <span class="number">4635</span>&#125;, &#123;<span class="number">3349</span>, <span class="number">4523</span>&#125;, &#123;<span class="number">3354</span>, <span class="number">4744</span>&#125;, &#123;<span class="number">3357</span>, <span class="number">4519</span>&#125;, &#123;<span class="number">3361</span>, <span class="number">4383</span>&#125;, &#123;<span class="number">3364</span>, <span class="number">4522</span>&#125;, &#123;<span class="number">3366</span>, <span class="number">4525</span>&#125;, &#123;<span class="number">3370</span>, <span class="number">4650</span>&#125;, &#123;<span class="number">3371</span>, <span class="number">4552</span>&#125;, &#123;<span class="number">3383</span>, <span class="number">4438</span>&#125;, &#123;<span class="number">3387</span>, <span class="number">4399</span>&#125;, &#123;<span class="number">3389</span>, <span class="number">4914</span>&#125;, &#123;<span class="number">3390</span>, <span class="number">4622</span>&#125;, &#123;<span class="number">3398</span>, <span class="number">4532</span>&#125;, &#123;<span class="number">3399</span>, <span class="number">4468</span>&#125;, &#123;<span class="number">3400</span>, <span class="number">4372</span>&#125;, &#123;<span class="number">3402</span>, <span class="number">4559</span>&#125;, &#123;<span class="number">3404</span>, <span class="number">4434</span>&#125;, &#123;<span class="number">3407</span>, <span class="number">4489</span>&#125;, &#123;<span class="number">3411</span>, <span class="number">4579</span>&#125;, &#123;<span class="number">3415</span>, <span class="number">4810</span>&#125;, &#123;<span class="number">3417</span>, <span class="number">4725</span>&#125;, &#123;<span class="number">3421</span>, <span class="number">4631</span>&#125;, &#123;<span class="number">3427</span>, <span class="number">4897</span>&#125;, &#123;<span class="number">3428</span>, <span class="number">4691</span>&#125;, &#123;<span class="number">3429</span>, <span class="number">4605</span>&#125;, &#123;<span class="number">3430</span>, <span class="number">4478</span>&#125;, &#123;<span class="number">3432</span>, <span class="number">4398</span>&#125;, &#123;<span class="number">3435</span>, <span class="number">4690</span>&#125;, &#123;<span class="number">3436</span>, <span class="number">4601</span>&#125;, &#123;<span class="number">3438</span>, <span class="number">4487</span>&#125;, &#123;<span class="number">3440</span>, <span class="number">4712</span>&#125;, &#123;<span class="number">3443</span>, <span class="number">4571</span>&#125;, &#123;<span class="number">3446</span>, <span class="number">4675</span>&#125;, &#123;<span class="number">3447</span>, <span class="number">4670</span>&#125;, &#123;<span class="number">3448</span>, <span class="number">4599</span>&#125;, &#123;<span class="number">3451</span>, <span class="number">5029</span>&#125;, &#123;<span class="number">3452</span>, <span class="number">4567</span>&#125;, &#123;<span class="number">3453</span>, <span class="number">4437</span>&#125;, &#123;<span class="number">3457</span>, <span class="number">4803</span>&#125;, &#123;<span class="number">3458</span>, <span class="number">4595</span>&#125;, &#123;<span class="number">3462</span>, <span class="number">4945</span>&#125;, &#123;<span class="number">3469</span>, <span class="number">4578</span>&#125;, &#123;<span class="number">3473</span>, <span class="number">4892</span>&#125;, &#123;<span class="number">3474</span>, <span class="number">4856</span>&#125;, &#123;<span class="number">3477</span>, <span class="number">4708</span>&#125;, &#123;<span class="number">3482</span>, <span class="number">4660</span>&#125;, &#123;<span class="number">3483</span>, <span class="number">4628</span>&#125;, &#123;<span class="number">3485</span>, <span class="number">4733</span>&#125;, &#123;<span class="number">3486</span>, <span class="number">4621</span>&#125;, &#123;<span class="number">3490</span>, <span class="number">4882</span>&#125;, &#123;<span class="number">3491</span>, <span class="number">4717</span>&#125;, &#123;<span class="number">3492</span>, <span class="number">4674</span>&#125;, &#123;<span class="number">3494</span>, <span class="number">4809</span>&#125;, &#123;<span class="number">3497</span>, <span class="number">4681</span>&#125;, &#123;<span class="number">3505</span>, <span class="number">4847</span>&#125;, &#123;<span class="number">3514</span>, <span class="number">4836</span>&#125;, &#123;<span class="number">3515</span>, <span class="number">4742</span>&#125;, &#123;<span class="number">3517</span>, <span class="number">4751</span>&#125;, &#123;<span class="number">3521</span>, <span class="number">4657</span>&#125;, &#123;<span class="number">3524</span>, <span class="number">4763</span>&#125;, &#123;<span class="number">3527</span>, <span class="number">4876</span>&#125;, &#123;<span class="number">3528</span>, <span class="number">4761</span>&#125;, &#123;<span class="number">3531</span>, <span class="number">4969</span>&#125;, &#123;<span class="number">3532</span>, <span class="number">4722</span>&#125;, &#123;<span class="number">3540</span>, <span class="number">4789</span>&#125;, &#123;<span class="number">3542</span>, <span class="number">4181</span>&#125;, &#123;<span class="number">3551</span>, <span class="number">4773</span>&#125;, &#123;<span class="number">3554</span>, <span class="number">5006</span>&#125;, &#123;<span class="number">3555</span>, <span class="number">4850</span>&#125;, &#123;<span class="number">3557</span>, <span class="number">4832</span>&#125;, &#123;<span class="number">3562</span>, <span class="number">4705</span>&#125;, &#123;<span class="number">3567</span>, <span class="number">4941</span>&#125;, &#123;<span class="number">3568</span>, <span class="number">4644</span>&#125;, &#123;<span class="number">3574</span>, <span class="number">4786</span>&#125;, &#123;<span class="number">3576</span>, <span class="number">4921</span>&#125;, &#123;<span class="number">3577</span>, <span class="number">4740</span>&#125;, &#123;<span class="number">3580</span>, <span class="number">4768</span>&#125;, &#123;<span class="number">3582</span>, <span class="number">4979</span>&#125;, &#123;<span class="number">3583</span>, <span class="number">4778</span>&#125;, &#123;<span class="number">3588</span>, <span class="number">4967</span>&#125;, &#123;<span class="number">3591</span>, <span class="number">4928</span>&#125;, &#123;<span class="number">3594</span>, <span class="number">4818</span>&#125;, &#123;<span class="number">3595</span>, <span class="number">4772</span>&#125;, &#123;<span class="number">3596</span>, <span class="number">4586</span>&#125;, &#123;<span class="number">3603</span>, <span class="number">4839</span>&#125;, &#123;<span class="number">3607</span>, <span class="number">4428</span>&#125;, &#123;<span class="number">3609</span>, <span class="number">4801</span>&#125;, &#123;<span class="number">3611</span>, <span class="number">5014</span>&#125;, &#123;<span class="number">3612</span>, <span class="number">4889</span>&#125;, &#123;<span class="number">3613</span>, <span class="number">4652</span>&#125;, &#123;<span class="number">3616</span>, <span class="number">4939</span>&#125;, &#123;<span class="number">3617</span>, <span class="number">4871</span>&#125;, &#123;<span class="number">3623</span>, <span class="number">4821</span>&#125;, &#123;<span class="number">3625</span>, <span class="number">4765</span>&#125;, &#123;<span class="number">3630</span>, <span class="number">5039</span>&#125;, &#123;<span class="number">3631</span>, <span class="number">4935</span>&#125;, &#123;<span class="number">3633</span>, <span class="number">4926</span>&#125;, &#123;<span class="number">3634</span>, <span class="number">4807</span>&#125;, &#123;<span class="number">3637</span>, <span class="number">4845</span>&#125;, &#123;<span class="number">3642</span>, <span class="number">4977</span>&#125;, &#123;<span class="number">3645</span>, <span class="number">4814</span>&#125;, &#123;<span class="number">3650</span>, <span class="number">5002</span>&#125;, &#123;<span class="number">3654</span>, <span class="number">4959</span>&#125;, &#123;<span class="number">3655</span>, <span class="number">4907</span>&#125;, &#123;<span class="number">3661</span>, <span class="number">4972</span>&#125;, &#123;<span class="number">3662</span>, <span class="number">4878</span>&#125;, &#123;<span class="number">3663</span>, <span class="number">4771</span>&#125;, &#123;<span class="number">3669</span>, <span class="number">4865</span>&#125;, &#123;<span class="number">3675</span>, <span class="number">4888</span>&#125;, &#123;<span class="number">3679</span>, <span class="number">5047</span>&#125;, &#123;<span class="number">3680</span>, <span class="number">4956</span>&#125;, &#123;<span class="number">3686</span>, <span class="number">4775</span>&#125;, &#123;<span class="number">3692</span>, <span class="number">4948</span>&#125;, &#123;<span class="number">3695</span>, <span class="number">5024</span>&#125;, &#123;<span class="number">3703</span>, <span class="number">5027</span>&#125;, &#123;<span class="number">3717</span>, <span class="number">4903</span>&#125;, &#123;<span class="number">3726</span>, <span class="number">4932</span>&#125;, &#123;<span class="number">3742</span>, <span class="number">5000</span>&#125;, &#123;<span class="number">3747</span>, <span class="number">5008</span>&#125;, &#123;<span class="number">3750</span>, <span class="number">4732</span>&#125;, &#123;<span class="number">3753</span>, <span class="number">4953</span>&#125;, &#123;<span class="number">3758</span>, <span class="number">5042</span>&#125;, &#123;<span class="number">3765</span>, <span class="number">5022</span>&#125;, &#123;<span class="number">3817</span>, <span class="number">5004</span>&#125;&#125;;</span><br><span class="line">set&lt;pii&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">count</span>(<span class="built_in">mp</span>(x, y))) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;pii&gt; arr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> xx = arr[i].fr;</span><br><span class="line">        <span class="keyword">int</span> yy = arr[i].sc;</span><br><span class="line">        <span class="keyword">int</span> dx = x - xx, dy = y - yy;</span><br><span class="line">        <span class="keyword">if</span> (dx == <span class="number">0</span> || dy == <span class="number">0</span>) &#123;   <span class="comment">// 有一个数字与之前的数字相等</span></span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if (dx &lt; 0 || dy &lt; 0)     // 这个不能直接continue，虽然这个不用判断，但是意味着后面的条件也不用判断</span></span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0</span> &amp;&amp; dy &gt; <span class="number">0</span>) &#123;     <span class="comment">// 如果出现负数，当前的x、y必不可能转换到xx、yy（减不可能让小的数变大）</span></span><br><span class="line">            <span class="keyword">if</span> (dx % dy == <span class="number">0</span> || dy % dx == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dx = x - yy, dy = y - xx;</span><br><span class="line">        <span class="keyword">if</span> (dx == <span class="number">0</span> || dy == <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0</span> &amp;&amp; dy &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dx % dy == <span class="number">0</span> || dy % dx == <span class="number">0</span>) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    arr.<span class="built_in">push_back</span>(<span class="built_in">mp</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(i, j)) &#123;</span><br><span class="line">                arr.<span class="built_in">push_back</span>(<span class="built_in">mp</span>(i, j));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">100</span> == <span class="number">0</span>) cerr &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (pii it : arr) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&#123;%d, %d&#125;, &quot;</span>, it.fr, it.sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//    freopen(&quot;/Users/chant/out.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="comment">//    init();</span></span><br><span class="line"><span class="comment">//    return 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = <span class="built_in"><span class="keyword">sizeof</span></span>(a) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(<span class="built_in">mp</span>(a[i][<span class="number">0</span>], a[i][<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Dropping"><a href="#B-Dropping" class="headerlink" title="B.Dropping"></a>B.Dropping</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> r, a, b, h;</span><br><span class="line">    cin &gt;&gt; r &gt;&gt; a &gt;&gt; b &gt;&gt; h;</span><br><span class="line">    <span class="keyword">double</span> x = b * h / (a - b);</span><br><span class="line">    <span class="keyword">double</span> m = <span class="number">2</span> * r * (h + x) / a;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="built_in">sqrt</span>(m * m + r * r) - x;</span><br><span class="line">    <span class="keyword">if</span> (ans &lt; <span class="number">0.0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Drop&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Stuck&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Determine-the-Photo-Position"><a href="#D-Determine-the-Photo-Position" class="headerlink" title="D.Determine the Photo Position"></a>D.Determine the Photo Position</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2050</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch != <span class="string">&#x27;1&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;0&#x27;</span>) ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">-1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = <span class="built_in">read</span>();</span><br><span class="line">            <span class="keyword">if</span> (t != c) c = t, cnt = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> cnt ++;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span> &amp;&amp; cnt &gt;= m) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Find-3-friendly-Integers"><a href="#F-Find-3-friendly-Integers" class="headerlink" title="F.Find 3-friendly Integers"></a>F.Find 3-friendly Integers</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">    <span class="keyword">if</span> (l &gt; <span class="number">999</span>) &#123;</span><br><span class="line">        cout &lt;&lt; r - l + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &lt;= <span class="number">999</span> &amp;&amp; r &gt; <span class="number">999</span>) &#123;</span><br><span class="line">        cout &lt;&lt; a[<span class="number">999</span>] - a[l - <span class="number">1</span>] + r - <span class="number">999</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; a[r] - a[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == <span class="number">0</span> || x == <span class="number">3</span> || x == <span class="number">6</span> || x == <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toDecimal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">100</span> + y * <span class="number">10</span> + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = i / <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> y = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> z = i % <span class="number">10</span>;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(z)) a[i]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(y) || <span class="built_in">check</span>(z)) a[i]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">toDecimal</span>(<span class="number">0</span>, y, z) % <span class="number">3</span> == <span class="number">0</span>) a[i]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(x) || <span class="built_in">check</span>(y) || <span class="built_in">check</span>(z)) a[i]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">toDecimal</span>(<span class="number">0</span>, x, y) % <span class="number">3</span> == <span class="number">0</span> || <span class="built_in">toDecimal</span>(<span class="number">0</span>, y, z) % <span class="number">3</span> == <span class="number">0</span>) a[i]++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">toDecimal</span>(x, y, z) % <span class="number">3</span> == <span class="number">0</span>) a[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    for (int i = 1; i &lt; 25; i++) &#123;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; i &lt;&lt; &#x27;:&#x27; &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Knowledge-Test-about-Match"><a href="#K-Knowledge-Test-about-Match" class="headerlink" title="K.Knowledge Test about Match"></a>K.Knowledge Test about Match</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N], ans[N], va[N], vb[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="built_in">memset</span>(va, <span class="number">0</span>, <span class="keyword">sizeof</span> va);</span><br><span class="line">    <span class="built_in">memset</span>(vb, <span class="number">0</span>, <span class="keyword">sizeof</span> vb);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; cnt &lt; n; d++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vb[i]) <span class="keyword">continue</span>;    <span class="comment">// b[i]用过了</span></span><br><span class="line">            <span class="keyword">int</span> x = a[i];</span><br><span class="line">            <span class="keyword">if</span> (x - d &gt;= <span class="number">0</span> &amp;&amp; !va[x - d]) &#123;</span><br><span class="line">                va[x - d] = <span class="number">1</span>;</span><br><span class="line">                vb[i] = <span class="number">1</span>;</span><br><span class="line">                ans[x - d] = x;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x + d &lt; n &amp;&amp; !va[x + d]) &#123;</span><br><span class="line">                va[x + d] = <span class="number">1</span>;</span><br><span class="line">                vb[i] = <span class="number">1</span>;</span><br><span class="line">                ans[x + d] = x;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA129-困难的串-Krypton Factor</title>
      <link href="/2021/07/03/UVA129-%E5%9B%B0%E9%9A%BE%E7%9A%84%E4%B8%B2-Krypton%20Factor/"/>
      <url>/2021/07/03/UVA129-%E5%9B%B0%E9%9A%BE%E7%9A%84%E4%B8%B2-Krypton%20Factor/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>让你用前<strong>L</strong>个字母来构造出字典序为<strong>n</strong>的字符串，要求这个字符串满足：字符串中不包含两个相邻的重复子串。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>思路非常简单，利用DFS来枚举串，如果枚举出来的串符合要求就继续向下递归，否则回溯。这里比较麻烦的是判断字符串中到底存不存在相邻的重复子串，这里lrj给出了比较好的思路，非常值得借鉴：因为在之前找到的字符串中一定不存在相邻的重复子串，因此新得到的字符串唯一可能存在相邻的重复子串的地方就是新添加的字符所在的子串中，因此只需要枚举字符串的后缀，看后缀中是否存在相邻的重复子串即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><em>代码未AC，仅供参考</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, l, tot, s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tot++ == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cur; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp;&amp; i % <span class="number">4</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s[i] + <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d\n&quot;</span>, cur);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        s[cur] = i;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j * <span class="number">2</span> &lt;= cur + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> equal = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[cur - k] != s[cur - j - k]) &#123; equal = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (equal) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(cur + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; l &amp;&amp; n &amp;&amp; l) &#123;</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形dp-没有上司的舞会</title>
      <link href="/2021/05/25/%E6%A0%91%E5%BD%A2dp-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/"/>
      <url>/2021/05/25/%E6%A0%91%E5%BD%A2dp-%E6%B2%A1%E6%9C%89%E4%B8%8A%E5%8F%B8%E7%9A%84%E8%88%9E%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>某大学有$n$个职员，编号为 $1,2…n$.</p><p>他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。</p><p>现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数$r_i$，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。</p><p>所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>从根节点开始<strong>dfs</strong>，<strong>dfs</strong>到叶节点设置叶节点的状态之后回溯转移。</p><p>状态$f(i,j)$表示以$i$点为根的子树，职员$i$来与不来能获得的最大快乐指数，其中$j=0$代表不来，$j=1$代表来。</p><p>叶节点的状态设置为$f(i,0)=0,f(i,1)=a[i]$，其中$a[i]$为员工$i$能增加的快乐指数。</p><p>对于所有子节点都<strong>dfs</strong>过的点，其转移方程为：</p><p>$f(i,1)=a[i] + \sum f(j,0)$，$f(i,0)=\sum max\{f(j,0),f(j,1)\}$</p><p>最终的答案就是根节点$p$参加与不参加的最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, ne;</span><br><span class="line">&#125; e[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> h[N], tot;</span><br><span class="line"><span class="keyword">int</span> a[N], in[N], dp[N][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[tot].v = v;</span><br><span class="line">    e[tot].ne = h[u];</span><br><span class="line">    h[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    dp[p][<span class="number">1</span>] = a[p];</span><br><span class="line">    <span class="keyword">if</span> (h[p] == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[p]; i != <span class="number">-1</span>; i = e[i].ne) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        dp[p][<span class="number">1</span>] += dp[v][<span class="number">0</span>];</span><br><span class="line">        dp[p][<span class="number">0</span>] += std::<span class="built_in">max</span>(dp[v][<span class="number">0</span>], dp[v][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, k;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; k;</span><br><span class="line">        <span class="built_in">add</span>(k, l);</span><br><span class="line">        in[l]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in[p] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(p);</span><br><span class="line">    <span class="keyword">int</span> ans = std::<span class="built_in">max</span>(dp[p][<span class="number">0</span>], dp[p][<span class="number">1</span>]);</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1529-B. Sifid and Strange Subsequences</title>
      <link href="/2021/05/25/CF1529-B.%20Sifid%20and%20Strange%20Subsequences/"/>
      <url>/2021/05/25/CF1529-B.%20Sifid%20and%20Strange%20Subsequences/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题目定义了奇怪数组：</p><p>​        对于数组中任意的两个元素$a_i$、$a_j$，如果$|a_i-a_j|\ge max\{a_1, a_2,…,a_k\}$，就称这个数组为奇怪数组。</p><p>现在给你一个长度为$n$的数组$a$，让你找出$a$的一个最长子序列，并且这个子序列为奇怪数组。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以得到的两个很明显的结论是：</p><ol><li><p>随着子序列中元素最大值的增大，可以得到的奇怪数组的长度先增大后减小。</p></li><li><p>我们将数组$a$进行排序，那么对于前$i$个元素中$|a_i-a_j|$的最小值为$min\{|a_2-a_1|,|a_3-a_2|,…,|a_n-a_{n-1}|\}$.</p></li></ol><p>我们这里设$x=min\{|a_2-a_1|,|a_3-a_2|,…,|a_n-a_{n-1}|\}$</p><p>从头到尾枚举数组$a$中的元素，设当前枚举的元素为$a_i$，如果$a_i$小于等于$x$，那么前$i$个元素就可以构成奇怪数组；</p><p>如果$a_i$小于$x$，在这种情况下如果强行选择$a_i$会出现什么情况呢？最理想的情况，我们选中了$a_i$然后丢失了$a_i$前面中的一个元素，例如$-5,-1,0,2$，当选中$2$的时候就必须丢失$0$或者$-1$来保持它是一个奇怪数组，这是最理想的情况；但大部分情况是选中了$a_i$丢失了不止一个$a_i$之前的元素，同理$i$及$i$以后的元素。</p><p>因此最优策略是遇到第一个$a_i&lt;x$的时候，将前$i$个元素作为答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="number">1</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> minn = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        minn = std::<span class="built_in">min</span>(minn, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; minn) &#123;</span><br><span class="line">            std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; n &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1529-A. Eshag Loves Big Arrays</title>
      <link href="/2021/05/25/CF1529-A.%20Eshag%20Loves%20Big%20Arrays/"/>
      <url>/2021/05/25/CF1529-A.%20Eshag%20Loves%20Big%20Arrays/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个长度为$n$的数组$a$，你可以对这个数组进行任意次数如下操作：</p><p>​        选中数组中的任意数量的元素，取这些元素的平均值，然后将取出的这些元素中大于平均数的数字删掉。</p><p>问最多可以删掉多少个元素。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>找出数组中的最小值，只要是非最小值的元素和最小值取平均值，那么非最小值的元素一定是大于平均值的。</p><p>因此答案就是数组中元素的总数量减去数组中最小值的数量。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> minn = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; minn) minn = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == minn) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; n - cnt &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2114-起床困难综合症</title>
      <link href="/2021/05/24/%E6%B4%9B%E8%B0%B7P2114-%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/"/>
      <url>/2021/05/24/%E6%B4%9B%E8%B0%B7P2114-%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>21 世纪，许多人得了一种奇怪的病：起床困难综合症，其临床表现为：起床难，起床后精神不佳。作为一名青春阳光好少年，atm 一直坚持与起床困难综合症作斗争。通过研究相关文献，他找到了该病的发病原因：在深邃的太平洋海底中，出现了一条名为 drd 的巨龙，它掌握着睡眠之精髓，能随意延长大家的睡眠时间。正是由于 drd 的活动，起床困难综合症愈演愈烈，以惊人的速度在世界上传播。为了彻底消灭这种病，atm 决定前往海底，消灭这条恶龙。历经千辛万苦，atm 终于来到了 drd 所在的地方，准备与其展开艰苦卓绝的战斗。drd 有着十分特殊的技能，他的防御战线能够使用一定的运算来改变他受到的伤害。具体说来，drd 的防御战线由 <em>n</em> 扇防御门组成。每扇防御门包括一个运算 <em>op</em> 和一个参数 <em>t</em>，其中运算一定是 $OR$,$XOR$,$AND$中的一种，参数则一定为非负整数。如果还未通过防御门时攻击力为 <em>x</em>，则其通过这扇防御门后攻击力将变为 $x\space op\space t$。最终 drd 受到的伤害为对方初始攻击力 <em>x</em> 依次经过所有 <em>n</em> 扇防御门后转变得到的攻击力。</p><p>由于 atm 水平有限，他的初始攻击力只能为 0 到 <em>m</em> 之间的一个整数（即他的初始攻击力只能在 $0,1,…,m$ 中任选，但在通过防御门之后的攻击力不受 <em>m</em> 的限制）。为了节省体力，他希望通过选择合适的初始攻击力使得他的攻击能让 drd 受到最大的伤害，请你帮他计算一下，他的一次攻击最多能使 drd 受到多少伤害。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最一开始设定两个数字$0xFFFFFFFF$（这个数字大于$1e9$并且二进制下全部为$1$即可）和$0$，对于这两个数字分别进行一次题目中描述的操作，这样就得到了真值表。</p><p>按照贪心的思想从最高位开始看：</p><p>如果当前位$n$可以把$0$变成$1$，那肯定是最好的，不占用$m$还能提高攻击力；否则如果把$0$变成$0$那么不必理他即可。</p><p>如果当前位$n$可以把$1$变成$0$，那这一位设置为$0$就行了，因为变成$1$不仅占用$m$还减小攻击力；但如果$1$变成$1$，那么当$1&lt;&lt;i$不超过当前剩余$m$的前提下可以选择。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">std::string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL n, m, t;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    LL zeros = <span class="number">0</span>, ones = <span class="number">1LL</span> * <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">&quot;AND&quot;</span>) &#123;</span><br><span class="line">            zeros &amp;= t;</span><br><span class="line">            ones &amp;= t;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">&quot;OR&quot;</span>) &#123;</span><br><span class="line">            zeros |= t;</span><br><span class="line">            ones |= t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            zeros ^= t;</span><br><span class="line">            ones ^= t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        t = <span class="number">1LL</span> &lt;&lt; i;</span><br><span class="line">        <span class="keyword">if</span> (zeros &amp; t) &#123;</span><br><span class="line">            ans += t;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &gt;= t &amp;&amp; (ones &amp; t)) &#123;</span><br><span class="line">            ans += t;</span><br><span class="line">            m -= t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1498-B.Box Fitting</title>
      <link href="/2021/05/23/CF1498-B.Box%20Fitting/"/>
      <url>/2021/05/23/CF1498-B.Box%20Fitting/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出$n$个长条，每个长条保证可以表示为$2^x$的形式，问你如果一个宽度为$w$的盒子最少要多高才能装下这些长条。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>贪心。将长条按照长度从大到小排序，对于每一层我们尽量将它装满再装下一层。</p><p>可以用$multiset$维护每一层剩余的空间。对于当前要放入盒子的长条，在集合中$lower_bound$得到一个合适的位置，如果没有那就新开一层，答案加一；如果有就将该层的空间减少，还有剩余就再次加入到集合中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, s, t) for (int i = (s); i &lt; (t); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wa std::cerr &lt;&lt; <span class="meta-string">&quot;----WARN----&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wl std::cerr &lt;&lt; <span class="meta-string">&quot;********&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wr std::cerr &lt;&lt; <span class="meta-string">&quot;~~~~~~~~&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF = <span class="number">1LL</span> * <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, w;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; w;</span><br><span class="line">    <span class="built_in">rep</span> (i, <span class="number">0</span>, n) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(a, a + n, std::greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    std::multiset&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span> (i, <span class="number">0</span>, n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] != w) s.<span class="built_in">insert</span>(w - a[i]);</span><br><span class="line">            ans++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(a[i]);</span><br><span class="line">            <span class="keyword">if</span> (it == s.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (w != a[i]) s.<span class="built_in">insert</span>(w - a[i]);</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> t = *it;</span><br><span class="line">                s.<span class="built_in">erase</span>(it);</span><br><span class="line">                <span class="keyword">if</span> (t != a[i]) s.<span class="built_in">insert</span>(t - a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line">    T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1513-B. AND Sequences</title>
      <link href="/2021/05/23/CF1513-B.%20AND%20Sequences/"/>
      <url>/2021/05/23/CF1513-B.%20AND%20Sequences/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>题目定义了“好的序列”的定义：</p><p>对于一个长度为$n$的数字序列$p$，如果对于每个$i(2\le i \le n-1)$，如果都有$p[1]\&amp;p[2]\&amp;…\&amp;p[i]=p[i+1]\&amp;p[i+2]\&amp;…\&amp;p[n]$，那么就称这个序列为好序列。</p><p>给出$n(n \ge 2)$个数字，问你能构造出多少个不同的“好的序列”。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于$p[1]=p[2]\&amp;p[3]\&amp;…\&amp;p[n]$，两边同时$\&amp;p[1]$可以得到$p[1]\&amp;p[1]=p[1]\&amp;p[2]\&amp;p[3]\&amp;…\&amp;p[n]$.</p><p>同样的可以得到$p[1]\&amp; p[2]\&amp;p[3]\&amp;…\&amp;p[n - 1] = p[n]$.</p><p>这里设$t=p[1]\&amp;p[2]\&amp;p[3]\&amp;…\&amp;p[n]$。</p><p>对于两边确定了之后的序列，无论如何都会对$t$取$\&amp;$，而$t$中又包含了序列中所有的数字，所以值是不会变的。</p><p>因此对于题目给出的序列，我们求出$t$，然后看序列中有多少个与$t$相等的序列，取一个排列组合就可以了。</p><p>$A_{n_t}^2*(n-n_t)!$.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wa std::cerr &lt;&lt; <span class="meta-string">&quot;----WARN----&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wl std::cerr &lt;&lt; <span class="meta-string">&quot;********&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> wr std::cerr &lt;&lt; <span class="meta-string">&quot;~~~~~~~~&quot;</span> &lt;&lt; std::endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF = <span class="number">1LL</span> * <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    a[<span class="number">0</span>] = k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        k &amp;= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == k) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = res * (res - <span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        ans = ans * i % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;in.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line">    T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1515-C. Phoenix and Towers</title>
      <link href="/2021/05/23/CF1515-C.%20Phoenix%20and%20Towers/"/>
      <url>/2021/05/23/CF1515-C.%20Phoenix%20and%20Towers/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出$n$块积木，对于每块积木都有一个高度$h_i(h_i\le x)$，现在让你将这$n$块积木分成$m$堆，使得任意两堆积木的高度差不超过$x$.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先将积木按照高度从大到小排序，将前$m$个积木加入到集合中，每次选出集合中高度最小的堆，将当前积木放进该队中，这样就能保证最终能构造出符合要求的答案。</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>题目中提到每块积木的高度都小于等于$x$，那么最一开始将$m$块积木放进优先队列中，就可以保证这$m$块积木的最大高度和最小高度的高度差不超过$x$。</p><p>现在设优先队列中高度最小的堆的高度为$h_0$，次小高的堆的高度为$h_1$，易得到$h_0 \le h_1$，那么当$h_0$加上任意一个高度$h(h\le x)$，有$(h_0+h)-h_1&lt;=x$。</p><p>$h_0+h$可能比优先队列中最大的元素要大，也可能小，也可能相等，但是这个并不是关键。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N], res[N];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p, h;</span><br><span class="line">    <span class="built_in">Node</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> p, <span class="keyword">int</span> h):<span class="built_in">p</span>(p), <span class="built_in">h</span>(h)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> h &gt; x.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, x;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    std::priority_queue&lt;Node&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">Node</span>(i, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Node f = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        res[i] = f.p;</span><br><span class="line">        f.h += a[i];</span><br><span class="line">        q.<span class="built_in">push</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        Node f = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">top</span>().h - f.h &gt; x) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; res[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    std::cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1517-C. Fillomino 2</title>
      <link href="/2021/05/23/CF1517-C.%20Fillomino%202/"/>
      <url>/2021/05/23/CF1517-C.%20Fillomino%202/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定长度为 $n\space (1 \le n \le 500)$的排列 <em>p</em>，要求构造一个三角形，满足以下条件：</p><ol><li>三角形共 $i$ 行，第 $i$ 行有$i$个数。第<em>i</em> 行最后一个数是 $p_i$。</li><li>接下来构造 $n$ 个连通块。对于第 $x \space (1 \le x \le n)$ 个连通块,每个元素、连通块大小都必须等于 $x$。</li><li>三角形每个格子必须恰好填一个数</li></ol><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>贪心。最上面的数字到最下面的数字，优先往左填写，其次上下，最后往右。</p><p>这个过程可以用DFS实现。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[N][N], n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= n &amp;&amp; x &gt;= y &amp;&amp; !a[x][y];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> xx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> yy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isValid</span>(xx, yy)) &#123;</span><br><span class="line">            a[xx][yy] = a[x][y];</span><br><span class="line">            <span class="built_in">dfs</span>(xx, yy, t - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">            a[xx][yy] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = i - <span class="number">1</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(i, i, a[i][i] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            std::cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1471-B. Strange List</title>
      <link href="/2021/04/28/CF1471-B.%20Strange%20List/"/>
      <url>/2021/04/28/CF1471-B.%20Strange%20List/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给定一个由-n-个数字组成的数组以及一个-x-。现在从前往后遍历数组，若当前遍历的数字-a-i-可以被-x-整除，那么就在数组的最后加上-x-个数字-frac-a-i-x-；若当前遍历的数字不能被-x-整除，那么就停止遍历。"><a href="#给定一个由-n-个数字组成的数组以及一个-x-。现在从前往后遍历数组，若当前遍历的数字-a-i-可以被-x-整除，那么就在数组的最后加上-x-个数字-frac-a-i-x-；若当前遍历的数字不能被-x-整除，那么就停止遍历。" class="headerlink" title="给定一个由$n$个数字组成的数组以及一个$x$。现在从前往后遍历数组，若当前遍历的数字$a[i]$可以被$x$整除，那么就在数组的最后加上$x$个数字$\frac {a[i]}x$；若当前遍历的数字不能被$x$整除，那么就停止遍历。"></a>给定一个由$n$个数字组成的数组以及一个$x$。现在从前往后遍历数组，若当前遍历的数字$a[i]$可以被$x$整除，那么就在数组的最后加上$x$个数字$\frac {a[i]}x$；若当前遍历的数字不能被$x$整除，那么就停止遍历。</h3><h3 id="问题是当遍历完这个数组之后，数组中所有数字的总和-sum-i-1-na-i-等于多少。"><a href="#问题是当遍历完这个数组之后，数组中所有数字的总和-sum-i-1-na-i-等于多少。" class="headerlink" title="问题是当遍历完这个数组之后，数组中所有数字的总和$\sum_{i=1}^na[i]$等于多少。"></a>问题是当遍历完这个数组之后，数组中所有数字的总和$\sum_{i=1}^na[i]$等于多少。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="本题一开始是想通过模拟整个过程来计算结果的，当时很不幸在测试test5的时候MLE了，所以这题出题人本意肯定是让找出规律。"><a href="#本题一开始是想通过模拟整个过程来计算结果的，当时很不幸在测试test5的时候MLE了，所以这题出题人本意肯定是让找出规律。" class="headerlink" title="本题一开始是想通过模拟整个过程来计算结果的，当时很不幸在测试test5的时候MLE了，所以这题出题人本意肯定是让找出规律。"></a>本题一开始是想通过模拟整个过程来计算结果的，当时很不幸在测试<code>test5</code>的时候MLE了，所以这题出题人本意肯定是让找出规律。</h3><h3 id="首先要想明白的明白的是，假设数字-a-i-可以被-x-整除，那么整个数组所有数字的总和就会被加上-frac-a-i-x-x-也就是-a-i-这么多；对于被加到数组后面的-frac-a-i-x-如果有一个-frac-a-i-x-可以被再次遍历到，那么其他所有的-frac-a-i-x-也都可以遍历到（原因很明显，他们是并排放进去的），若-frac-a-i-x-还可以被-x-整除，那么对于每个-frac-a-i-x-都会在数组最后加上-x-个-frac-frac-a-i-x-x-，那么一个-x-个-frac-a-i-x-，所以数组所有数字总和一共加上了-xx-frac-frac-a-i-x-x-这么多，约分一下还是-a-i-这么多。若继续下去会发现，每次都是加上了-a-i-这么多。"><a href="#首先要想明白的明白的是，假设数字-a-i-可以被-x-整除，那么整个数组所有数字的总和就会被加上-frac-a-i-x-x-也就是-a-i-这么多；对于被加到数组后面的-frac-a-i-x-如果有一个-frac-a-i-x-可以被再次遍历到，那么其他所有的-frac-a-i-x-也都可以遍历到（原因很明显，他们是并排放进去的），若-frac-a-i-x-还可以被-x-整除，那么对于每个-frac-a-i-x-都会在数组最后加上-x-个-frac-frac-a-i-x-x-，那么一个-x-个-frac-a-i-x-，所以数组所有数字总和一共加上了-xx-frac-frac-a-i-x-x-这么多，约分一下还是-a-i-这么多。若继续下去会发现，每次都是加上了-a-i-这么多。" class="headerlink" title="首先要想明白的明白的是，假设数字$a[i]$可以被$x$整除，那么整个数组所有数字的总和就会被加上$\frac{a[i]}x  x$也就是$a[i]$这么多；对于被加到数组后面的$\frac{a[i]}x$,如果有一个$\frac{a[i]}x$可以被再次遍历到，那么其他所有的$\frac{a[i]}x$也都可以遍历到（原因很明显，他们是并排放进去的），若$\frac{a[i]}x$还可以被$x$整除，那么对于每个$\frac{a[i]}x$都会在数组最后加上$x$个$\frac{\frac{a[i]}x}x$，那么一个$x$个$\frac{a[i]}x$，所以数组所有数字总和一共加上了$xx*\frac{\frac{a[i]}x}x$这么多，约分一下还是$a[i]$这么多。若继续下去会发现，每次都是加上了$a[i]$这么多。"></a>首先要想明白的明白的是，假设数字$a[i]$可以被$x$整除，那么整个数组所有数字的总和就会被加上$\frac{a[i]}x <em> x$也就是$a[i]$这么多；对于被加到数组后面的$\frac{a[i]}x$,如果有一个$\frac{a[i]}x$可以被再次遍历到，那么其他所有的$\frac{a[i]}x$也都可以遍历到（原因很明显，他们是并排放进去的），若$\frac{a[i]}x$还可以被$x$整除，那么对于每个$\frac{a[i]}x$都会在数组最后加上$x$个$\frac{\frac{a[i]}x}x$，那么一个$x$个$\frac{a[i]}x$，所以数组所有数字总和一共加上了$x</em>x*\frac{\frac{a[i]}x}x$这么多，约分一下还是$a[i]$这么多。若继续下去会发现，每次都是加上了$a[i]$这么多。</h3><h3 id="现在假设这-n-个数字，每个数字能被-x-除的次数为-b-i-，那么在不考虑其他限制条件的情况下，每个数字能够对数组数字总和的额外贡献最多可以是-a-i-b-i-（根据上面的结论，一个数字被整除一次就可以多贡献-a-i-）。"><a href="#现在假设这-n-个数字，每个数字能被-x-除的次数为-b-i-，那么在不考虑其他限制条件的情况下，每个数字能够对数组数字总和的额外贡献最多可以是-a-i-b-i-（根据上面的结论，一个数字被整除一次就可以多贡献-a-i-）。" class="headerlink" title="现在假设这$n$个数字，每个数字能被$x$除的次数为$b[i]$，那么在不考虑其他限制条件的情况下，每个数字能够对数组数字总和的额外贡献最多可以是$a[i]*b[i]$（根据上面的结论，一个数字被整除一次就可以多贡献$a[i]$）。"></a>现在假设这$n$个数字，每个数字能被$x$除的次数为$b[i]$，那么在不考虑其他限制条件的情况下，每个数字能够对数组数字总和的额外贡献最多可以是$a[i]*b[i]$（根据上面的结论，一个数字被整除一次就可以多贡献$a[i]$）。</h3><h3 id="但是实际上每个数字并不是都能贡献-b-i-这么多次，原因在于：如果其中一个数字的-b-i-太小了，比如特别极端的，-b-i-1-的话，那么对于其他任何数字-a-j-他们最多只能贡献两次，第一次是-a-j-的时候，一次是-frac-a-j-x-的时候（这一次不一定能够遍历到，需要满足-j-lt-i-，这里的-i-是所有的最小的-b-i-中最小的-i-），因为当数组遍历到-frac-a-i-x-的时候，这个数字不能再被-x-整除，数组的遍历就会结束，那么对于后面的数字虽然-b-j-可能会很大，但是数组不能够遍历到那里了，也就不会再有贡献了。"><a href="#但是实际上每个数字并不是都能贡献-b-i-这么多次，原因在于：如果其中一个数字的-b-i-太小了，比如特别极端的，-b-i-1-的话，那么对于其他任何数字-a-j-他们最多只能贡献两次，第一次是-a-j-的时候，一次是-frac-a-j-x-的时候（这一次不一定能够遍历到，需要满足-j-lt-i-，这里的-i-是所有的最小的-b-i-中最小的-i-），因为当数组遍历到-frac-a-i-x-的时候，这个数字不能再被-x-整除，数组的遍历就会结束，那么对于后面的数字虽然-b-j-可能会很大，但是数组不能够遍历到那里了，也就不会再有贡献了。" class="headerlink" title="但是实际上每个数字并不是都能贡献$b[i]$这么多次，原因在于：如果其中一个数字的$b[i]$太小了，比如特别极端的，$b[i]=1$的话，那么对于其他任何数字$a[j]$他们最多只能贡献两次，第一次是$a[j]$的时候，一次是$\frac{a[j]}x$的时候（这一次不一定能够遍历到，需要满足$j&lt;i$，这里的$i$是所有的最小的$b[i]$中最小的$i$），因为当数组遍历到$\frac{a[i]}x$的时候，这个数字不能再被$x$整除，数组的遍历就会结束，那么对于后面的数字虽然$b[j]$可能会很大，但是数组不能够遍历到那里了，也就不会再有贡献了。"></a>但是实际上每个数字并不是都能贡献$b[i]$这么多次，原因在于：如果其中一个数字的$b[i]$太小了，比如特别极端的，$b[i]=1$的话，那么对于其他任何数字$a[j]$他们最多只能贡献两次，第一次是$a[j]$的时候，一次是$\frac{a[j]}x$的时候（这一次不一定能够遍历到，需要满足$j&lt;i$，这里的$i$是所有的最小的$b[i]$中最小的$i$），因为当数组遍历到$\frac{a[i]}x$的时候，这个数字不能再被$x$整除，数组的遍历就会结束，那么对于后面的数字虽然$b[j]$可能会很大，但是数组不能够遍历到那里了，也就不会再有贡献了。</h3><h3 id="所以要取得所有数字中-b-i-的最小值，这里设最小值为-b-min-，这里的-min-为出现最早的-min-，即若-b-i-的最小值为-1-，有-b-2-1-b-3-1-，那么就取-min-2-，原因就是上面说到的，要求满足-j-lt-i-，-i-是所有的最小的-b-i-中最小的-i-。"><a href="#所以要取得所有数字中-b-i-的最小值，这里设最小值为-b-min-，这里的-min-为出现最早的-min-，即若-b-i-的最小值为-1-，有-b-2-1-b-3-1-，那么就取-min-2-，原因就是上面说到的，要求满足-j-lt-i-，-i-是所有的最小的-b-i-中最小的-i-。" class="headerlink" title="所以要取得所有数字中$b[i]$的最小值，这里设最小值为$b_{min}$，这里的$min$为出现最早的$min$，即若$b[i]$的最小值为$1$，有$b[2]=1, b[3]=1$，那么就取$min=2$，原因就是上面说到的，要求满足$j&lt;i$，$i$是所有的最小的$b[i]$中最小的$i$。"></a>所以要取得所有数字中$b[i]$的最小值，这里设最小值为$b_{min}$，这里的$min$为出现最早的$min$，即若$b[i]$的最小值为$1$，有$b[2]=1, b[3]=1$，那么就取$min=2$，原因就是上面说到的，要求满足$j&lt;i$，$i$是所有的最小的$b[i]$中最小的$i$。</h3><h3 id="那么遍历完数组之后，整个数组数字之和-Sum-sum-i-1-min-1-a-i-b-min-1-sum-i-min-na-i-b-min-W-，其中-W-是在不遍历数组的时候，数组中所有数字的总和。"><a href="#那么遍历完数组之后，整个数组数字之和-Sum-sum-i-1-min-1-a-i-b-min-1-sum-i-min-na-i-b-min-W-，其中-W-是在不遍历数组的时候，数组中所有数字的总和。" class="headerlink" title="那么遍历完数组之后，整个数组数字之和$Sum=\sum_{i=1}^{min-1}a[i](b[min]+1)+\sum_{i=min}^na[i]b[min]+W$，其中$W$是在不遍历数组的时候，数组中所有数字的总和。"></a>那么遍历完数组之后，整个数组数字之和$Sum=\sum_{i=1}^{min-1}a[i]<em>(b[min]+1)+\sum_{i=min}^na[i]</em>b[min]+W$，其中$W$是在不遍历数组的时候，数组中所有数字的总和。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">ll a[Maxn];</span><br><span class="line"><span class="keyword">int</span> b[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="keyword">int</span> n, minn = INF;</span><br><span class="line">ll x, ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>, &amp;n, &amp;x);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line">ans += a[i];</span><br><span class="line">ll t = a[i];</span><br><span class="line"><span class="keyword">while</span> (t % x == <span class="number">0</span>) &#123;</span><br><span class="line">b[i]++;</span><br><span class="line">t /= x;</span><br><span class="line">&#125;</span><br><span class="line">minn = std::<span class="built_in">min</span>(minn, b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (b[i] == minn) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">ans += (minn + <span class="number">1</span>) * a[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += minn * a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1487-D. Pythagorean Triples</title>
      <link href="/2021/03/10/CF1487-D.%20Pythagorean%20Triples/"/>
      <url>/2021/03/10/CF1487-D.%20Pythagorean%20Triples/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个<strong>n</strong>让找出符合一下要求的勾股数$(a,b,c)$的数量：</p><ol><li>$0&lt;a\le b \le c \le n$</li><li>$c=a^2-b$.</li></ol><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>$\begin{cases}c^2=a^2+b^2\\c=a^2-b\end{cases}\Rightarrow\begin{cases}c^2=a^2+b^2\\c^2=a^4-2a^2b+b^2\end{cases}\Rightarrow a^2+b^2=a^4-2a^2b+b^2\Rightarrow a^2=1+2b\Rightarrow c=1+b$.</p><p>容易证明当$b\geq3$的时候$a^2\leq b^2$始终成立，且$c=b+1$，所以当$b\geq 3$的时候有$a&lt;=b&lt;=c$恒成立，因此$b=\frac{a^2-1}{2}\geq 3\Rightarrow a\geq \sqrt{7}&gt;2$.</p><p>每个$a$都能唯一确定一个$b$和$c$，那么只要计算出符合要求的$a$有多少个就是最终的答案。</p><p>这里$c=b+1=\frac{a^2+1}{2}$要小于等于$n$即$c=\frac{a^2+1}{2}&lt;=n\Rightarrow a\leq \sqrt{2n-1}$.</p><p>因为$a^2=1+2b$而$b&gt;0,b\subseteq Z$，所以$a^2$为奇数，所以$a$也是奇数。</p><p>综上所述可以取到的$a$的数量为$n_a=\frac{\sqrt{2n-1}-1}{2}$.</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ((ll)std::<span class="built_in">sqrt</span>(<span class="number">2</span> * n - <span class="number">1</span>) - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1487-C. Minimum Ties</title>
      <link href="/2021/03/09/CF1487-C.%20Minimum%20Ties/"/>
      <url>/2021/03/09/CF1487-C.%20Minimum%20Ties/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>一个足球比赛有<strong>n</strong>只队伍参加，这<strong>n</strong>只队伍会两两进行比赛，一共进行$\frac{n\times(n-1)}{2}$场比赛。</p><p>每一场比赛获胜的一方会得到<strong>3</strong>分，失败的一方不得分，若平局则两方各得一分。</p><p>现在让你找出一种方案，方案中你可以胜利、失败和平局，使得所有队伍的得分相同且平局的数量最少。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先先考虑什么情况下不会出现平局。一共有$\frac{n\times(n-1)}{2}$场比赛，如果每个人平均下来都能够赢得$\frac{\frac{n\times(n-1)}{2}}{n}=\frac{n-1}{2}$场比赛，那么就不会有平局。但是$\frac{n-1}{2}$不一定是整数，而实际上要求它是整数，所以第一个条件就是：$\frac{n-1}{2}$是个整数，换言之$n$需要是个奇数。</p><p>接着上面来，如果$n$是个偶数呢？那么在每个人平均赢得$\frac{n-1}{2}$（向下取整，即$\frac{n-2}{2}$）之后，还有$\frac{n\times(n-1)}{2}-\frac{n-2}{2}\times n=\frac{n}{2}$场比赛，那么这$\frac{n}{2}$场比赛安排平局就可以使得所有队伍的分数相同。</p><p>具体的分配方式，举一个例子，假设$n=5$，下面括号$(a,b)$表示$a$赢$b$：</p><p>$(1,2)(2,3)(3,4)(4,5)(5,1);(1,3)(2,4)(3,5)(4,1)(5,2);(1,4)(2,5)(3,1)(4,2)(5,3)$</p><p>就相当于形成环来赢得比赛，a赢b，b赢c，c赢a。</p><p>以上思路的严格证明暂时没有想出来，但是多个例子都验证了上述结论。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line">std::map&lt;std::pii, <span class="keyword">int</span>&gt;res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    res.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> t = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tt = (j + i) % n;</span><br><span class="line">            std::pii pr = std::<span class="built_in">mp</span>(j, tt);</span><br><span class="line">            <span class="keyword">if</span> (j &gt; tt) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(pr.fr, pr.sc);</span><br><span class="line">                res[pr] = <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res[pr] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!res.<span class="built_in">count</span>(std::<span class="built_in">mp</span>(i, j))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;0 &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, res[std::<span class="built_in">mp</span>(i, j)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1487-B. Cat Cycle</title>
      <link href="/2021/03/09/CF1487-B.%20Cat%20Cycle/"/>
      <url>/2021/03/09/CF1487-B.%20Cat%20Cycle/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>家中有两只猫，这两只猫有<strong>n</strong>个睡觉的地方分别标号为$1,2,…,n$。一开始第一只猫（后称为A）在标号为<strong>n</strong>的位置睡觉，第二只猫（后称为B）在标号为<strong>1</strong>的位置睡觉。</p><p>之后每过一个小时，<script type="math/tex">A</script>会挪到$i-1$这个位置睡觉（若$i=0$那么就挪动到$n$这个位置），而<script type="math/tex">B</script>则会挪到$i+1$这个位置睡觉（若$i=n+1$则挪动到$1$这个位置）。但是这两只猫不会睡在一起，当两只猫移动到同一个位置的时候，$B$会避开$A$到下一个位置去。</p><p>问第<strong>k</strong>个小时的时候B在什么位置睡觉。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>当$n$为偶数的时候，这两只猫总会错开不会同时到达同一个位置；当$n$为奇数的时候，这两只猫会每$n\over2$小时到达同一个位置一次。</p><p>当到达同一个位置的时候，本质上$B$在重合位置编号的基础上加上$1$，所以第$k$个小时的时候$B$就相当于在原本的位置（就是不考虑重合的时候$B$要到下一个位置）的基础上加上${k-1}\over{n\over2}$，减一是因为第一个位置是不在第一个$n\over2$范围内的。那么这只猫最终的位置就是$(k-1+\frac{k-1}{n\over2})\%n+1$。前半部分的$k-1$是想要将这<strong>n</strong>个位置的编号从$0$开始方便取模运算，若不从$0$开始也可以采取下面的写法：$t=(k+\frac{k-1}{n\over2})\%n,t==0?n:t$.</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (k - <span class="number">1</span> + (k - <span class="number">1</span>) / (n / <span class="number">2</span>)) % n + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (k - <span class="number">1</span>) % n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1364-C. Ehab and Prefix MEXs</title>
      <link href="/2021/02/23/CF1364-C.%20Ehab%20and%20Prefix%20MEXs/"/>
      <url>/2021/02/23/CF1364-C.%20Ehab%20and%20Prefix%20MEXs/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个长度为<strong>n</strong>的数组<strong>a</strong>，然你找出一个长度为<strong>n</strong>的数组<strong>b</strong>，使得：</p><p>对于每一个 $i(1&lt;=i&lt;=n)$ 有$MEX(b_1,b_2,…,b_i)=a_i$.</p><p>$MEX$的定义如下：$MEX(b_1,b_2,…,b_i)$为最小的不在$\{b_1,b_2,…,b_i\}$集合中的非负整数。</p><p>题目保证数组$a$是非降序的。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先考虑到，第一个数字，如果$a_1$为$1$那么$b_1$一定为$0$；如果$a_1$为$0$那么$b_1$理论上来说可以是任何数字，之所以说是理论上，是因为这个数字可能对后面会有影响；如果$a_1$大于$1$那么就不存在这样的数组$b$了。</p><p>其次考虑到，在$a_i=a_{i+1}$的情况下(这里假设$a_i=x$)，数组中不可能出现数字$x$，那出现什么情况数组$b$才可以出现数字$x$呢？只有当$a_{i-1}=x\not=a_{i}$的时候(这里假设$i=p$)，才能出现数字$x$，并且这个数字$x$必须在$b_{p}$这个位置出现。原因很明显，数字$x$之所以能在$p$之前得到，一定是因为$x$是$p$之前最小的，不再集合中的非负整数，如果$b_p\not=x$那么当$i=p$的时候一定还有$MEX(b_1,b_2,..,b_p)=x$，不符合要求，所以$b_p=x$.</p><p>现在对于数组$b$，对于每个满足$a_i\not=a_{i-1}$的位置都已经确定了数字，对于第一个位置可能能确定数字。之后从头到尾对数组$a$扫描一遍，用一个计数器记录不能确定数字的位置个数，当扫描到一个位置有$a_i\not=a_{i-1}$的时候，比较计数器的数量是否大于等于$a_i-a_{i-1}-1$。原因是要想在$i$这个位置有$MEX(b_1,b_2,…,b_i)=a_i$必须要把$a_{i-1}$到$a_i-1$的数字‘填’平，那么你要天平就至少需要$a_i-a_{i-1}-1$这么多“空闲”的位置去补充，之所以减去1是因为$a_{i-1}$已经在$b_i$这个位置补充好了。如果大于那么就把这之间空闲的数字填上去，如果还有空余可以留着给后面的数字补充。</p><p>如果最后全部补充完毕还有空闲的数字，那么在不改变$MEX$值的情况下可以把这些数字改改成任意值，个人的处理方法是把他们全部变为无穷大。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn], b[Maxn];</span><br><span class="line"><span class="keyword">int</span> p[Maxn], s = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[<span class="number">1</span>] != <span class="number">1</span>) &#123;</span><br><span class="line">        p[t++] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            b[i] = a[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (t - s &gt;= a[i] - a[i - <span class="number">1</span>] - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = a[i - <span class="number">1</span>] + <span class="number">1</span>; j &lt;= a[i] - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                    b[p[s++]] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p[t++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s != t) &#123;</span><br><span class="line">        b[p[s]] = INF;</span><br><span class="line">        s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, b[i], <span class="string">&quot; \n&quot;</span>[i == n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1364B-B. Most socially-distanced sub</title>
      <link href="/2021/02/23/CF1364B-B.%20Most%20socially-distanced%20sub/"/>
      <url>/2021/02/23/CF1364B-B.%20Most%20socially-distanced%20sub/</url>
      
        <content type="html"><![CDATA[<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个长度为<strong>n</strong>的数字序列，让你找出它的一个子序列，长度为<strong>k</strong>，使得这个子序列的$\vert s_1-s_2 \vert + \vert s_2-s_3 \vert +…+ \vert s_{k-1}-s_k\vert$的值最大且<strong>k</strong>最小。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先肯定是将全部的数字都算上去这个，这个值会是最大的。但是题目要求<strong>k</strong>的值最小，所以要将这些数字中对于这个值的增大没有贡献的数字去掉。</p><p>那么什么样的数字对于这个值的增大没有贡献呢？假如一个有三个数字<em>1、5、9</em>，那么这个<em>5</em>对于这个值的增大就没有贡献，因为$\vert 1-5 \vert + \vert 5 - 9\vert=\vert1-9\vert$；同样的，若三个数字是$9、5、1$，这里面的<em>5</em>对于数字的增大也没有贡献。</p><p>综上，我们就是要把所有的比左边大比右边小的数字和比左边小比右边大的数字去掉，最终得到的序列就是答案。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt;a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    a.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">        a.<span class="built_in">push_back</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &lt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>() + i);</span><br><span class="line">            i--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>] &amp;&amp; a[i] &gt; a[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>() + i);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)a.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, a[i], <span class="string">&quot; \n&quot;</span>[i == a.<span class="built_in">size</span>() - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷-P1194 买礼物</title>
      <link href="/2021/02/21/%E6%B4%9B%E8%B0%B7-P1194%20%E4%B9%B0%E7%A4%BC%E7%89%A9/"/>
      <url>/2021/02/21/%E6%B4%9B%E8%B0%B7-P1194%20%E4%B9%B0%E7%A4%BC%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>又到了一年一度的明明生日了，明明想要买<strong>B</strong>样东西，巧的是，这<strong>B</strong>样东西价格都是<strong>A</strong>元。</p><p>但是，商店老板说最近有促销活动，也就是：</p><p>如果你买了第<strong>I</strong>样东西，再买第<strong>J</strong>样，那么就可以只花$K_{I,J}$ 元，更巧的是，$K_{I,J}$竟然等于$K_{J,I}$。</p><p>现在明明想知道，他最少要花多少钱。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可以这样想，购买这些东西会构成一个树状关系，除了根之外其他点都按照优惠价格购买（当然优惠价格可能比原价还贵，这里只需要取<strong>min</strong>即可），那怎样得到除了根之外其他优惠价格的最优解呢？只需要跑一遍最小生成树即可，这样必然会得到一棵树，并且是最优解。</p><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">EDGE</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">EDGE</span>(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w):<span class="built_in">u</span>(u), <span class="built_in">v</span>(v), <span class="built_in">w</span>(w)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> EDGE &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[Maxn * Maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[Maxn];</span><br><span class="line"><span class="keyword">int</span> nv, ne, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">Find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ru = <span class="built_in">Find</span>(u);</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="built_in">Find</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (ru != rv) &#123;</span><br><span class="line">        father[ru] = rv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nv; i++) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">int</span> w = e[i].w;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">            <span class="built_in">Union</span>(u, v);</span><br><span class="line">            ans += w;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span> (t == nv - k) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t == nv - k ? ans : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;nv, &amp;ne, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        e[i] = <span class="built_in">EDGE</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(e, e + ne);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="keyword">if</span> (ans == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No Answer\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P1967-货车运输</title>
      <link href="/2021/02/18/%E6%B4%9B%E8%B0%B7%20P1967-%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/"/>
      <url>/2021/02/18/%E6%B4%9B%E8%B0%B7%20P1967-%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>A国有 <strong>n</strong> 座城市，编号从 <strong>1</strong> 到 <strong>n</strong>，城市之间有 <strong>m</strong> 条双向道路。每一条道路对车辆都有重量限制，简称限重。</p><p>现在有 <strong>q</strong> 辆货车在运输货物， 司机们想知道每辆车在不超过车辆限重的情况下，最多能运多重的货物。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>求出这个图的最大生成树，这样就把问题转化为：树上任意两个点的路径中，边权值的最小值是多少，想到可以搜索，单向搜索比较慢，可以双向搜索，而树上的双向搜索像极了<strong>LCA</strong>，所以这道题就是<em>最大生成树+最近公共祖先</em>。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><p>代码又臭又长，当我看到它将这道题AC的时候，我的内心是震惊的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE1</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="built_in">EDGE1</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">EDGE1</span>(<span class="keyword">int</span> u, <span class="keyword">int</span> v,<span class="keyword">int</span> w):<span class="built_in">u</span>(u), <span class="built_in">v</span>(v), <span class="built_in">w</span>(w)&#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> EDGE1 x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e1[Maxn &lt;&lt; <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE2</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125; e[Maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>, father[Maxn], dep[Maxn], fa[Maxn], val[Maxn], head[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">Find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ru = <span class="built_in">Find</span>(u);</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="built_in">Find</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (ru != rv) &#123;</span><br><span class="line">        father[ru] = rv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[tot].v = v;</span><br><span class="line">    e[tot].w = w;</span><br><span class="line">    e[tot].next = head[u];</span><br><span class="line">    head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> nv, <span class="keyword">int</span> ne)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nv; i++) &#123; </span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e1[i].u;</span><br><span class="line">        <span class="keyword">int</span> v = e1[i].v;</span><br><span class="line">        <span class="keyword">int</span> w = e1[i].w;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">            <span class="built_in">Union</span>(u, v);</span><br><span class="line">            <span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">            <span class="built_in">addedge</span>(v, u, w);</span><br><span class="line">            <span class="keyword">if</span> (++k == nv - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    std::queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    dep[s] = <span class="number">1</span>;</span><br><span class="line">    fa[s] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !q.<span class="built_in">empty</span>(); q.<span class="built_in">pop</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[f]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">            <span class="keyword">int</span> w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span> (!dep[v]) &#123;</span><br><span class="line">                dep[v] = dep[f] + <span class="number">1</span>;</span><br><span class="line">                val[v] = w;</span><br><span class="line">                fa[v] = f;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123;</span><br><span class="line">        std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &gt; dep[v]) &#123;</span><br><span class="line">        ans = std::<span class="built_in">min</span>(ans, val[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; dep[u] &gt; dep[v];) &#123;</span><br><span class="line">        u = fa[u];</span><br><span class="line">        <span class="keyword">if</span> (dep[u] &gt; dep[v]) &#123;</span><br><span class="line">            ans = std::<span class="built_in">min</span>(ans, val[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 两个if为了防止到了最近公共祖先的时候还与最近祖先的父节点的距离取依次min</span></span><br><span class="line">    <span class="keyword">while</span> (u != v) &#123;</span><br><span class="line">        ans = std::<span class="built_in">min</span>(ans, val[u]);</span><br><span class="line">        ans = std::<span class="built_in">min</span>(ans, val[v]);</span><br><span class="line">        u = fa[u];</span><br><span class="line">        v = fa[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nv, ne, nq;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;nv, &amp;ne);</span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        e1[i] = <span class="built_in">EDGE1</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(e1, e1 + ne);</span><br><span class="line">    <span class="built_in">Kruskal</span>(nv, ne);</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nq);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nq; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="built_in">Lca</span>(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷 P4047-部落划分</title>
      <link href="/2021/02/18/%E6%B4%9B%E8%B0%B7%20P4047-%E9%83%A8%E8%90%BD%E5%88%92%E5%88%86/"/>
      <url>/2021/02/18/%E6%B4%9B%E8%B0%B7%20P4047-%E9%83%A8%E8%90%BD%E5%88%92%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>聪聪研究发现，荒岛野人总是过着群居的生活，但是，并不是整个荒岛上的所有野人都属于同一个部落，野人们总是拉帮结派形成属于自己的部落，不同的部落之间则经常发生争斗。只是，这一切都成为谜团了——聪聪根本就不知道部落究竟是如何分布的。</p><p>不过好消息是，聪聪得到了一份荒岛的地图。地图上标注了 <strong>n</strong> 个野人居住的地点（可以看作是平面上的坐标）。我们知道，同一个部落的野人总是生活在附近。我们把两个部落的距离，定义为部落中距离最近的那两个居住点的距离。聪聪还获得了一个有意义的信息——这些野人总共被分为了 <strong>k</strong> 个部落！这真是个好消息。聪聪希望从这些信息里挖掘出所有部落的详细信息。他正在尝试这样一种算法：</p><p>对于任意一种部落划分的方法，都能够求出两个部落之间的距离，聪聪希望求出一种部落划分的方法，使靠得最近的两个部落尽可能远离。</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>依次把两个最近的人划分到一个部落中去（若其中一个或两个人还属于其他部落，那么这两个部落合并），当最后剩下单独的<strong>k</strong>个人和部落的时候，这时候这其中的，相距最近的两个部落/部落和人的距离就是最重要的答案。</p><p>仔细观察，其实这就是一个最小生成树，建<strong>n-k</strong>条边的最小生成树，第<strong>n-k+1</strong>条边就是要的结果。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">double</span> w;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EDGE</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EDGE</span>(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">double</span> w):<span class="built_in">u</span>(u), <span class="built_in">v</span>(v), <span class="built_in">w</span>(w)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> EDGE &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; e[Maxn * Maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[Maxn][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, father[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">Find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ru = <span class="built_in">Find</span>(u);</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="built_in">Find</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (ru != rv) &#123;</span><br><span class="line">        father[ru] = rv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(a[u][<span class="number">0</span>] - a[v][<span class="number">0</span>], <span class="number">2.0</span>) + <span class="built_in">pow</span>(a[u][<span class="number">1</span>] - a[v][<span class="number">1</span>], <span class="number">2.0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> nv, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nv; i++) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = e[i].u;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">            <span class="built_in">Union</span>(u, v);</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span> (t == nv - k + <span class="number">1</span>) &#123;</span><br><span class="line">                ans = e[i].w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;a[i][<span class="number">0</span>], &amp;a[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            e[tot++] = <span class="built_in">EDGE</span>(i, j, <span class="built_in">getDis</span>(i, j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(e, e + tot);</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="built_in">Kruskal</span>(n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1478-A. Nezzar and Colorful Balls</title>
      <link href="/2021/02/08/CF1478-A.%20Nezzar%20and%20Colorful%20Balls/"/>
      <url>/2021/02/08/CF1478-A.%20Nezzar%20and%20Colorful%20Balls/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>有$n$个球，每个球上面都有一个数字$a_i$，这些数字是组成的序列是非递减的。现在你要给每个球涂色，你必须保证相同颜色的球上面的数字组成一个<em>严格</em>递增序列。问你最少多少种颜色可以实现上述要求？</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>比赛的时候卡题意了，题意确实有点难懂，这里以题目中的第一个组数据进行解释，同时也将思路理顺：</p><p>你有6个球，每个球上的数字分别为<code>1 1 1 2 3 4</code>分别计为$a_1, a_2, a_3, a_4, a_ 5, a_6$，你可以给$a_1,a_2,a_3$涂上红色（这里只是举个例子），但这不符合题目要求，题目要求的是严格递增，$a_1,a_2,a_3$序列中有两个$1$它不是严格递增的。你可以给$a_1,a_4,a_5,a_6$涂上红色，这样是符合的严格递增的要求，而对于$a_2,a_3$可以分别涂上蓝色和绿色，这样就是三种颜色，答案为$3$。</p><p>通过上面的解释应该能察觉出意思规律，答案就是最多的那个数字的数量。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">ans = std::<span class="built_in">max</span>(ans, t);</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = std::<span class="built_in">max</span>(ans, t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020ICPC·小米 网络选拔赛第一场</title>
      <link href="/2021/02/08/2020ICPC%C2%B7%E5%B0%8F%E7%B1%B3%20%E7%BD%91%E7%BB%9C%E9%80%89%E6%8B%94%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA/"/>
      <url>/2021/02/08/2020ICPC%C2%B7%E5%B0%8F%E7%B1%B3%20%E7%BD%91%E7%BB%9C%E9%80%89%E6%8B%94%E8%B5%9B%E7%AC%AC%E4%B8%80%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="C-Smart-Browser"><a href="#C-Smart-Browser" class="headerlink" title="C-Smart Browser"></a>C-Smart Browser</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cin &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, t = s[<span class="number">0</span>] == <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">t++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">ans += <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">ans += <span class="number">2</span> * t - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span> ,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="I-Walking-Machine"><a href="#I-Walking-Machine" class="headerlink" title="I-Walking Machine"></a>I-Walking Machine</h2><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>一道模拟+DFS。对于每个点检查它的四个方向上的点能不能到达这个点，可以的话就DFS。</p><p>代码中处理了大量重复片段，一来减小了代码量，二来方便查错，具体细节在代码中体现。</p><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc sesond</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;; <span class="comment">// W S A D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn][Maxn], n, m, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[Maxn][Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch, tar[] = <span class="string">&quot;WSAD&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> ((ch = <span class="built_in">getchar</span>()) != EOF) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == tar[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::pii <span class="title">getDest</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = a[x][y];</span><br><span class="line"><span class="keyword">int</span> xx = x + dir[d][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> yy = y + dir[d][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">mp</span>(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> xx = x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> yy = y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (xx &gt;= <span class="number">1</span> &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &lt;= m) &#123;</span><br><span class="line"><span class="built_in">run</span>(x, y, xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> xx, <span class="keyword">int</span> yy)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (std::<span class="built_in">mp</span>(x, y) == <span class="built_in">getDest</span>(xx, yy) &amp;&amp; !vis[xx][yy]) &#123;</span><br><span class="line">vis[xx][yy] = <span class="literal">true</span>;</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">dfs</span>(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">a[i][j] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">run</span>(i, <span class="number">0</span>, i, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">run</span>(i, m + <span class="number">1</span>, i, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">run</span>(<span class="number">0</span>, i, <span class="number">1</span>, i);</span><br><span class="line"><span class="built_in">run</span>(n + <span class="number">1</span>, i, n, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="A-Intelligent-Warehouse"><a href="#A-Intelligent-Warehouse" class="headerlink" title="A-Intelligent Warehouse"></a>A-Intelligent Warehouse</h2><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>记忆化搜索。对于每个存在的数字进行一次搜索，而一些数字可能在搜索之前的数字时就被搜索过，那么直接返回之前搜索过的结果即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">10000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> in[Maxn], a[Maxn], cnt[Maxn], maxx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cnt[cur] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> cnt[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = a[cur]; <span class="comment">// 至少应该包括他自己</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * cur &lt;= maxx; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i * cur]) &#123;</span><br><span class="line">res = std::<span class="built_in">max</span>(res, a[cur] + <span class="built_in">dfs</span>(i * cur));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt[cur] = res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, in + i);</span><br><span class="line">maxx = std::<span class="built_in">max</span>(maxx, in[i]);</span><br><span class="line">a[in[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ans = std::<span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(in[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1522 [USACO2.4]牛的旅行 Cow Tours</title>
      <link href="/2021/02/07/%E6%B4%9B%E8%B0%B7P1522%20%5BUSACO2.4%5D%E7%89%9B%E7%9A%84%E6%97%85%E8%A1%8C%20Cow%20Tours/"/>
      <url>/2021/02/07/%E6%B4%9B%E8%B0%B7P1522%20%5BUSACO2.4%5D%E7%89%9B%E7%9A%84%E6%97%85%E8%A1%8C%20Cow%20Tours/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给出一些牧区的坐标，以及一个用邻接矩阵表示的牧区之间图。如果两个牧区之间有路存在那么这条路的长度就是两个牧区之间的欧几里得距离。</p><p>对于一个联通块，称之为一个牧场，也就是说一个牧场内任意一个牧区都可以到达该牧场内的任意的另外一个牧区。</p><p>对于一个牧场，它的直径是这个联通块内最短路的最大值。</p><p>现在让你在恰当地选择两个牧场，在这两个牧场中各自选一个牧区，在这两个牧区之间建路，要求建路之后所有牧场中最大的直径最小。这里其实如果产生了新的最大直径（也可能不产生新的最大直径），那么一定是在这个新的农场中产生的，所以这里不如说恰当选择两个牧场从中选择两个牧区建边，使得产生的新的牧场的直径最小。</p><p>输出建边之后所有农场中最大的直径。</p><hr><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>很好的一道最短路题。</p><p>先按照题目要求建立邻接矩阵，之后再这个邻接矩阵中跑一次$floyd$。</p><p>用一个数组$MaxDis$维护对于每个牧区，它所在的牧场中离它最远的牧区的距离是多少。</p><p>这样枚举每个不存在边的牧场对，当假设他们连接之后，构成的新牧场的可能的直径$d_{uv}=MaxDis[u]+MaxDis[v]+getDis(u,v)$，这里之所以说可能是因为可能原来$u$或$v$所在的农场直径比这个$d_{uv}$要大。</p><p>这里不需要考虑太细节，只需要用一个变量记录在不添加边的时候，所有牧场中直径的最大值，然后找到添加边之后最小的$d$，在这两个值之间取较大的既是答案。原因很简单，我们担心的是$d$可能比原来的$u$或$v$所在牧场的直径小，所以新牧场的直径实际上是$max\{d_{cur},d_u,d_v\}$，之后答案取$min\{max\{d_{u_1v_1},d_{u_1},d_{v_1}\},d_{u_2v_2},d_{u_2},d_{v_2}\},…,d_{u_xv_x},d_{u_x},d_{v_x}\}\}$，这个等价于$max\{d_{f_1},d_{f_2},…,d_{f_n},min\{d_{u_1v_1},d_{u_2v_2},…,d_{u_xv_x}\}\}=max\{max\{d_{f_i}\},min\{d_{u_jv_j}\}\}$，其中$d_{f_i}$表示第$i$个牧场的直径。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">double</span> dis[Maxn][Maxn], pos[Maxn][<span class="number">2</span>], MaxDis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getDis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(pos[x][<span class="number">0</span>] - pos[y][<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">pow</span>(pos[x][<span class="number">1</span>] - pos[y][<span class="number">1</span>], <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;pos[i][<span class="number">0</span>], &amp;pos[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">dis[i][j] = dis[j][i] = <span class="built_in">getDis</span>(i, j);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">dis[i][j] = dis[j][i] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">dis[i][j] = std::<span class="built_in">min</span>(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> max1 = <span class="number">0</span>, max2 = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis[i][j] != INF) &#123;</span><br><span class="line">MaxDis[i] = std::<span class="built_in">max</span>(MaxDis[i], dis[i][j]);</span><br><span class="line">max1 = std::<span class="built_in">max</span>(max1, dis[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis[i][j] == INF) &#123;</span><br><span class="line">max2 = std::<span class="built_in">min</span>(max2, MaxDis[i] + MaxDis[j] + <span class="built_in">getDis</span>(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6f\n&quot;</span>, std::<span class="built_in">max</span>(max1, max2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1462-通往奥格瑞玛的道路-二分+最短路</title>
      <link href="/2021/02/07/%E6%B4%9B%E8%B0%B7P1462-%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF-%E4%BA%8C%E5%88%86+%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2021/02/07/%E6%B4%9B%E8%B0%B7P1462-%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF-%E4%BA%8C%E5%88%86+%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在艾泽拉斯，有$n$个城市。编号为$1,2,3,…,n$。</p><p>城市之间有$m$条双向的公路，连接着两个城市，从某个城市到另一个城市，会遭到联盟的攻击，进而损失一定的血量。</p><p>每次经过一个城市，都会被收取一定的过路费（包括起点和终点）。路上并没有收费站。</p><p>假设$1$为暴风城，$n$为奥格瑞玛，而他的血量最多为$b$，出发时他的血量是满的。</p><p>歪嘴哦不希望花很多钱，他想知道，在可以到达奥格瑞玛的情况下，他所经过的所有城市中最多的一次收取的费用的最小值是多少。</p><hr><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>设$cost[i]$为第$i$个城市的过路费。则在$[min\{cost\},max\{cost\}]$之间二分一个$cost$，之后跑$Dijkstra$，$cost$大于$mid$的城市不能通行，小于等于$mid$的城市可以通行，最后如果$dis[n]$小于等于歪嘴哦的总血量$b$则这个$mid$可行。</p><p>如果最后能找到一个可行的$mid$，那么最小的$mid$就是答案，否则就输出$AFK$。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, next;</span><br><span class="line">ll w;</span><br><span class="line">&#125; e[Maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">ll dis;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> pos, ll dis):<span class="built_in">pos</span>(pos), <span class="built_in">dis</span>(dis)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis &gt; x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[Maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> nv, ne, b;</span><br><span class="line">ll dis[Maxn], cost[Maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span> </span>&#123;</span><br><span class="line">e[tot].v = v; </span><br><span class="line">e[tot].w = w;</span><br><span class="line">e[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dij</span><span class="params">(<span class="keyword">int</span> top)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cost[<span class="number">1</span>] &gt; top) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">std::priority_queue&lt;Node&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">top</span>().pos;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">int</span> w = e[i].w;</span><br><span class="line"><span class="keyword">if</span> (cost[v] &lt;= top &amp;&amp; dis[v] &gt; dis[u] + w) &#123;</span><br><span class="line">dis[v] = dis[u] + w;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(v, dis[v]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[nv] &lt;= b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;nv, &amp;ne, &amp;b);</span><br><span class="line">ll l = INF, r = -INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nv; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, cost + i);</span><br><span class="line">l = std::<span class="built_in">min</span>(l, cost[i]);</span><br><span class="line">r = std::<span class="built_in">max</span>(r, cost[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">ll w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %lld&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line"><span class="built_in">add</span>(u, v, w);</span><br><span class="line"><span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">dij</span>(mid)) &#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AFK\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1119-灾后重建-floyd算法</title>
      <link href="/2021/02/07/%E6%B4%9B%E8%B0%B7P1119-%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA-floyd%E7%AE%97%E6%B3%95/"/>
      <url>/2021/02/07/%E6%B4%9B%E8%B0%B7P1119-%E7%81%BE%E5%90%8E%E9%87%8D%E5%BB%BA-floyd%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出$B$地区的村庄数N<em>N</em>，村庄编号从$0$到$N-1$，和所有$M$条公路的长度，公路是双向的。</p><p>给出第$i$个村庄重建完成的时间$t_i$，你可以认为是同时开始重建并在第$t_i$天重建完成，并且在当天即可通车。若$t_i=0$则说明地震未对此地区造成损坏，一开始就可以通车。</p><p>之后有$Q$个询问$(x,y,t)$，对于每个询问你要回答在第$t$天，从村庄$x$到村庄$y$的最短路径长度为多少。如果无法找到从$x$村庄到$y$村庄的路径，经过若干个已重建完成的村庄，或者村庄$x$或村庄$y$在第$t$天仍未重建完成 ，则需要返回$-1$。</p><hr><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>非常有意思的一道$floyd$题目。</p><p>题目保证村庄$0$到村庄$N$的修复时间满足$t_0&lt;t_1&lt;…&lt;t_{n-1}$，而且给出来询问中的$t$也是递增的。</p><p>那么我们回忆一下$floyd$算法的核心代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; i &lt;= N; k++) </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">      f[i][j] = std::<span class="built_in">min</span>(f[i][j], f[i][k] + f[k][j]);</span><br></pre></td></tr></table></figure><p>这段代码的第一层枚举的$k$就是说允许$k$点进行中转。</p><p>现在题目给出了修建完毕需要的时间并且时间是递增的，给出的询问时间也是递增的，那么每次询问就用$floyd$将$k$枚举到最后一个村庄这个村庄有$t_i &lt;= t$，之后检查$x,y$点的$t_x,t_y$是否大于$t$以及$f[x][y]$是否为无穷大即可。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[Maxn][Maxn];</span><br><span class="line"><span class="keyword">int</span> Time[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">const</span> <span class="keyword">int</span> &amp;nv)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nv; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nv; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis[i][j] &gt; dis[i][k] + dis[k][j]) &#123;</span><br><span class="line">dis[i][j] = dis[i][k] + dis[k][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> nv, ne;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;nv, &amp;ne);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nv; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, Time + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">dis[u][v] = dis[v][u] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> nq, x, y, t, cur = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;nq);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nq; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (Time[cur] &lt;= t &amp;&amp; cur &lt; nv) &#123;</span><br><span class="line"><span class="built_in">update</span>(cur++, nv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Time[x] &gt; t || Time[y] &gt; t || dis[x][y] == INF) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dis[x][y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1144-最短路计数</title>
      <link href="/2021/02/06/%E6%B4%9B%E8%B0%B7P1144-%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
      <url>/2021/02/06/%E6%B4%9B%E8%B0%B7P1144-%E6%9C%80%E7%9F%AD%E8%B7%AF%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给出一个$N$个顶点$M$条边的无向无权图，顶点编号为$1-N$。问从顶点$1$开始，到其他每个点的最短路有几条。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>$Dijkstra$的一个变形题目。</p><p>在跑$Dijkstra$松弛的时候，若<code>dis[v] &gt; dis[u] + 1</code>那么<code>res[v]=res[u]</code>，若<code>dis[v] == dis[u] + 1</code>那么<code>res[v] += res[u]</code>，其中<code>res[v]</code>存储的是点$1$到点$v$的最短路的数量。这里用到了$dp$的思想。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">2000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">100003</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, next;</span><br><span class="line">&#125; e[Maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> pos, dis;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> pos, <span class="keyword">int</span> dis):<span class="built_in">pos</span>(pos), <span class="built_in">dis</span>(dis)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis &gt; x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[Maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res[Maxn], dis[Maxn], vis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">e[tot].v = v;</span><br><span class="line">e[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span> res);</span><br><span class="line">res[s] = <span class="number">1</span>;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">std::priority_queue&lt;Node&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(s, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line"><span class="keyword">int</span> u = q.<span class="built_in">top</span>().pos;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[u]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = e[i].next) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + <span class="number">1</span>) &#123;</span><br><span class="line">dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">res[v] = res[u];</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(v, dis[v]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dis[v] == dis[u] + <span class="number">1</span>) &#123;</span><br><span class="line">res[v] += res[u];</span><br><span class="line">res[v] %= MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> nv, ne;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;nv, &amp;ne);</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ne; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">add</span>(u, v);</span><br><span class="line"><span class="built_in">add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nv; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res[i] % MOD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1629-邮递员送信-反向建边</title>
      <link href="/2021/02/06/%E6%B4%9B%E8%B0%B7P1629-%E9%82%AE%E9%80%92%E5%91%98%E9%80%81%E4%BF%A1-%E5%8F%8D%E5%90%91%E5%BB%BA%E8%BE%B9/"/>
      <url>/2021/02/06/%E6%B4%9B%E8%B0%B7P1629-%E9%82%AE%E9%80%92%E5%91%98%E9%80%81%E4%BF%A1-%E5%8F%8D%E5%90%91%E5%BB%BA%E8%BE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>有一个邮递员要送东西，邮局在节点 11。他总共要送 n-1<em>n</em>−1 样东西，其目的地分别是节点 22 到节点 n<em>n</em>。由于这个城市的交通比较繁忙，因此所有的道路都是单行的，共有 m<em>m</em> 条道路。这个邮递员每次只能带一样东西，并且<strong>运送每件物品过后必须返回邮局</strong>。求送完这 n-1<em>n</em>−1 样东西并且<strong>最终回到邮局</strong>最少需要的时间。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>正常跑一遍$Dijkstra$，之后再反向建边再跑一遍$Dijkstra$，将两遍的最短路径长度加起来就是答案。</p><p>对于反向建边，我的处理方法是用一个类封装链式前向星，每条边正着添加到$g_1$中，反着添加到$g_2$中。</p><p>也有dl用一个链式前向星存正反两个图，在存反向边的时候将每个点都加上$n$（点的数量）。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> pos, dis;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> pos, <span class="keyword">int</span> dis):<span class="built_in">pos</span>(pos), <span class="built_in">dis</span>(dis)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis &gt; x.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">G</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, w, next;</span><br><span class="line">&#125; e[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[Maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="built_in">G</span>()&#123;tot = <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">e[tot].v = v;</span><br><span class="line">e[tot].w = w;</span><br><span class="line">e[tot].next = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; g1, g2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dis[Maxn], vis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s, G g)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">std::priority_queue&lt;Node&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(s, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (; !q.<span class="built_in">empty</span>();) &#123;</span><br><span class="line">Node f = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (vis[f.pos]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[f.pos] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = g.head[f.pos]; i; i = g.e[i].next) &#123;</span><br><span class="line"><span class="keyword">int</span> v = g.e[i].v;</span><br><span class="line"><span class="keyword">int</span> w = g.e[i].w;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[f.pos] + w) &#123;</span><br><span class="line">dis[v] = dis[f.pos] + w;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">Node</span>(v, dis[v]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">g1.<span class="built_in">add</span>(u, v, w);</span><br><span class="line">g2.<span class="built_in">add</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>, g1);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans += dis[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dijkstra</span>(<span class="number">1</span>, g2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans += dis[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P2241-统计方形</title>
      <link href="/2021/02/06/%E6%B4%9B%E8%B0%B7P2241-%E7%BB%9F%E8%AE%A1%E6%96%B9%E5%BD%A2/"/>
      <url>/2021/02/06/%E6%B4%9B%E8%B0%B7P2241-%E7%BB%9F%E8%AE%A1%E6%96%B9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>有一个 $n \times m$ 方格的棋盘，求其方格包含多少正方形、长方形（不包含正方形）。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>所有方形的个数=正方形的个数+长方形的个数。对于任意一个$x\times y$的矩形，以这个方形右下角的那个块作为要在矩形内选择正方形\长方形的右下角，则正方形的个数为$min(x,y)$，长方形的个数为$x*y$。</p><p>解释如下：对于一个$x\times y$的矩形，右下角的块必选，则能和这个块组成的正方形的右上角块全在这个主对角线上，而对角线上块的数量就是$min(x,y)$。对于矩形来说，$x\times y$的矩形内所有点都能和右下角的这个点构成长方形，所以长方形的数量就是$x*y$。</p><p>这题主要是要避免同一个正方形/长方形被计算多次，这样计算可以很好的避免。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">ll sqr = <span class="number">0</span>, all = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (ll j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">all += i * j;</span><br><span class="line">sqr += i &lt; j ? i : j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, sqr, all - sqr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ-2528-Mayor&#39;s posters</title>
      <link href="/2021/02/05/POJ-2528-Mayor&#39;s%20posters/"/>
      <url>/2021/02/05/POJ-2528-Mayor&#39;s%20posters/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>比特城竞选市长。在一个长度为$10000000$的墙上，每个候选人可以贴一个任意长度的海报，所有候选人的海报都是等高的并且海报都是连续的。后来贴的海报可以覆盖原来贴在这个位置的海报的部分，比如第一个人在$[1,3]$这个区间贴了海报，第二个人在$[2,5]$这个区间贴了海报，那么第一个人$[2,3]$这部分的海报就会被第二个人的海报覆盖。</p><p>现在给出每个候选人海报在墙上占据的范围以及先后顺序，问你最后所有人贴完海报之后能看到多少不同候选人贴的海报。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>用线段树维护每个人贴的海报。当所有人的海报都张贴完毕后$DFS$遍历整个线段树找有多少个不同的海报。</p><p>这里需要注意三点：</p><ul><li>这个墙的长度长达$1e7$，而线段树一般需要开$4$倍的区间范围，这样在内存上是不能接受的，因此需要对原来的点进行离散化。</li><li>离散化之后需要注意将两个非连续的点之间再添加一个点。原因是：比如分别在以下位置贴海报$[1,10],[1,4],[7,10]$，如果不添加点最后统计的数量就是$2$，但这显然不对，因为离散化之后的点为$1，3，7，10$，当你重新给$[1,4],[7,10]$分配海报的时候$[4,7]$之间的海报就会“凭空消失”，所以必须要插点。</li><li>再上面离散化之后，整个线段树可能会出现一个“洞”，这些洞就是离散化的时候插入的点。因为这些点所代表的位置/区间原来可能并没有颜色，所以最后DFS线段树的时候如果不加上一些条件限制可能会导致无限的递归下去。</li></ul><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans, in[Maxn][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tree[Maxn &lt;&lt; <span class="number">2</span>], lisan[Maxn &lt;&lt; <span class="number">1</span>], tot_lisan;</span><br><span class="line"><span class="keyword">bool</span> vis[Maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree[p] != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> k = tree[p];</span><br><span class="line">tree[p] = <span class="number">-1</span>;</span><br><span class="line">tree[p &lt;&lt; <span class="number">1</span>] = tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (r &lt; ql || l &gt; qr) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">tree[p] = col;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, col);</span><br><span class="line"><span class="built_in">update</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, col);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &gt; (Maxn &lt;&lt; <span class="number">2</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tree[p] != <span class="number">-1</span>) &#123;</span><br><span class="line">ans += !vis[tree[p]];</span><br><span class="line">vis[tree[p]] = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">dfs</span>(p &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">tot_lisan = <span class="number">0</span>;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tree, <span class="number">-1</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;in[i][<span class="number">0</span>], &amp;in[i][<span class="number">1</span>]);</span><br><span class="line">lisan[tot_lisan++] = in[i][<span class="number">0</span>];</span><br><span class="line">lisan[tot_lisan++] = in[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(lisan, lisan + tot_lisan);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = tot_lisan; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (lisan[i + <span class="number">1</span>] - lisan[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">lisan[tot_lisan++] = lisan[i] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(lisan, lisan + tot_lisan);</span><br><span class="line">tot_lisan = (<span class="keyword">int</span>)(std::<span class="built_in">unique</span>(lisan, lisan + tot_lisan) - lisan);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(lisan, lisan + tot_lisan, in[i][<span class="number">0</span>]) - lisan);</span><br><span class="line"><span class="keyword">int</span> r = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(lisan, lisan + tot_lisan, in[i][<span class="number">1</span>]) - lisan);</span><br><span class="line"><span class="built_in">update</span>(<span class="number">1</span>, <span class="number">0</span>, tot_lisan, l, r, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA-514 Rails</title>
      <link href="/2021/02/05/UVA-514%20Rails/"/>
      <url>/2021/02/05/UVA-514%20Rails/</url>
      
        <content type="html"><![CDATA[<p><img src="/Users/chant/Library/Application Support/typora-user-images/image-20210205111836371.png" alt="image-20210205111836371" style="zoom: 67%;" /></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>如图有一个铁路中转站，在A侧有$n$个车厢，从左到右编号分别为$1,2,3..,n$，现在你可以通过中间的中转站($station$)对这些车厢进行重新排序。给出你重新排序之后的车厢编号问你是否合法。</p><p>需要注意的是，假如一个车厢从$A$进入了中转站，那么它只能从中转站进入到$B$而不能返回$A$。进入到$B$之后的车厢只能留在$B$，不能返回中转站或者$A$。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>铁路中转站相当于一个栈。</p><p>从前到后在$A$中找$B$的数字。具体方法为如果$A$当前的数字与$B$当前的数字相等那么直接$A++,B++$，如果不相等就检查一下栈顶是否与$B$当前数字相等，如果还是不相等，那么如果$A$还可以进栈（即$A&lt;n$），那么就让$A$进栈。如果上述操作都不能进行了那么这个序列$B$就是非法的。</p><hr><h2 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h2><p>代码目前仅通过样例，正确性有待商榷，OJ最近进不去没法评测。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line">std::stack&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">int</span> A = <span class="number">1</span>, B = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (B &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span> (A == a[B]) &#123;</span><br><span class="line">A++;</span><br><span class="line">B++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() == a[B]) &#123;</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">B++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (A &lt; n) &#123;</span><br><span class="line">s.<span class="built_in">push</span>(A++);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line"><span class="built_in">solve</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA-210 Concurrency Simulator</title>
      <link href="/2021/02/04/UVA-210%20Concurrency%20Simulator/"/>
      <url>/2021/02/04/UVA-210%20Concurrency%20Simulator/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>让你模拟并行程序。程序可以执行以下五种操作：</p><div class="table-container"><table><thead><tr><th>操作</th><th>耗时</th><th>作用</th></tr></thead><tbody><tr><td>$variable = constant$</td><td>$c_1$</td><td>将单字母变量（$variable$）赋值为$constant$</td></tr><tr><td>$print\ constant$</td><td>$c_2$</td><td>将变量$varable$的值打印出来</td></tr><tr><td>$lock$</td><td>$c_3$</td><td>将所有变量上锁，在$unlock$之前任何程序都不能对变量进行修改。</td></tr><tr><td>$unlock$</td><td>$c_4$</td><td>解锁变量</td></tr><tr><td>$end$</td><td>$c_5$</td><td>程序结束</td></tr></tbody></table></div><p>每个程序按照输入的先后依次放入主程序队列执行。运行程序时，每个程序每次只会被分配$Q$这么长时间，也就是说当这个程序单次运行的总时间超过$Q$这么久之后，它在执行完当前命令之后就会被放到主程序队列的队尾等待下一次的执行。</p><p>注意到上面的$lock$和$unlock$，在$lock$状态下任何想要再次执行$lock$的程序都会被放入$blocked\ queue$的尾部。当$unluck$执行之后，他首先会解锁，之后如果$block\ queue$不为空，那么就会把$block\ queue$队首程序放入主程序队列的队首。</p><p>让你输入每个$print$的程序编号以及$print$的结果。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>思路参考了lrj大佬的代码。</p><p>将命令存储在单独的数组中，将每个程序的第一条命令的位置存储在$ip$数组中，之后每执行完一次命令之后就将程序对应的$ip+1$，也就是移动到下一条命令的位置。当移动到$end$的时候就不再移动了。</p><p>不得不佩服lrj大佬的代码美如画，代码逻辑清晰，变量名称得当 tql。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">std::deque&lt;<span class="keyword">int</span>&gt;readyQ;</span><br><span class="line">std::queue&lt;<span class="keyword">int</span>&gt;blockQ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, c[<span class="number">5</span>], ip[Maxn], var[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> program[Maxn][Maxn];</span><br><span class="line"><span class="keyword">bool</span> locked;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">locked = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">memset</span>(program, <span class="number">0</span>, <span class="keyword">sizeof</span> program);</span><br><span class="line"><span class="built_in">memset</span>(var, <span class="number">0</span>, <span class="keyword">sizeof</span> var);</span><br><span class="line"><span class="keyword">for</span> (; !readyQ.<span class="built_in">empty</span>(); readyQ.<span class="built_in">pop_front</span>());</span><br><span class="line"><span class="keyword">for</span> (; !blockQ.<span class="built_in">empty</span>(); blockQ.<span class="built_in">pop</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> pid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> rq = q;</span><br><span class="line"><span class="keyword">while</span> (rq &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> *p = program[ip[pid]];</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (p[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: <span class="comment">// assignment</span></span><br><span class="line">var[p[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>] = <span class="built_in">isdigit</span>(p[<span class="number">5</span>]) ? (p[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + p[<span class="number">5</span>] - <span class="string">&#x27;0&#x27;</span> : p[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">rq -= c[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>: <span class="comment">// print</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d: %d\n&quot;</span>, pid + <span class="number">1</span>, var[p[<span class="number">6</span>] - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">rq -= c[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>: <span class="comment">// lock</span></span><br><span class="line"><span class="keyword">if</span> (locked) &#123;</span><br><span class="line">blockQ.<span class="built_in">push</span>(pid);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">locked = <span class="literal">true</span>;</span><br><span class="line">rq -= c[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>: <span class="comment">// unlick</span></span><br><span class="line">locked = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!blockQ.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> fp = blockQ.<span class="built_in">front</span>();</span><br><span class="line">blockQ.<span class="built_in">pop</span>();</span><br><span class="line">readyQ.<span class="built_in">push_front</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">rq -= c[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: <span class="comment">// end</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ip[pid]++;</span><br><span class="line"><span class="comment">/* 这里在未遇到end之前，也就是程序结束之前正常+1；遇到end直接return这里会一直保持在end的状态 */</span></span><br><span class="line">    <span class="comment">/* 同理在lock状态下再次lock */</span></span><br><span class="line">&#125;</span><br><span class="line">readyQ.<span class="built_in">push_back</span>(pid);</span><br><span class="line"><span class="comment">/* return之后程序就不会再次入队了 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, c + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">fgets</span>(program[t++], Maxn, stdin);</span><br><span class="line">ip[i] = t - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (program[t - <span class="number">1</span>][<span class="number">2</span>] != <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">fgets</span>(program[t++], Maxn, stdin);</span><br><span class="line">&#125;</span><br><span class="line">readyQ.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; !readyQ.<span class="built_in">empty</span>(); ) &#123;</span><br><span class="line"><span class="keyword">int</span> pid = readyQ.<span class="built_in">front</span>();</span><br><span class="line">readyQ.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="built_in">run</span>(pid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021牛客寒假算法基础集训营1</title>
      <link href="/2021/02/04/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/"/>
      <url>/2021/02/04/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51/</url>
      
        <content type="html"><![CDATA[<h2 id="F-对答案一时爽"><a href="#F-对答案一时爽" class="headerlink" title="F.对答案一时爽"></a>F.对答案一时爽</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>   考试结束了，牛牛和牛妹开始对答案。   </p><p>   每道题有 ABCD 四个选项，一共有$n$道题，全部是单选题，每道题正确得 1 分，错误不得分。   </p><p>   牛牛和牛妹互相知道了他们每道题选择的选项。他们想知道，两个人得分之和有可能达到的最大值和最小值是多少？</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>简单贪心</p><p>最大值为：相同的选项的他们两个人都算对，不同的选项其中有一个人算对。</p><p>最小值为$0$，以为他们两个人最多涵盖两个选项，那么正确答案从另外两个选项中选择即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[Maxn], b[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;A&#x27;</span> || ch &gt; <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">a[i] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">b[i] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != b[i]) &#123;</span><br><span class="line">ans += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1397-C. Multiples of Length</title>
      <link href="/2021/02/02/CF1397-C.%20Multiples%20of%20Length/"/>
      <url>/2021/02/02/CF1397-C.%20Multiples%20of%20Length/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>给出一个长度为$n$的序列，让你进行下面操作三次使得整个序列全部变为$0$：</p><p>​    在序列中选中一段序列$(l, r)$，之后对这个序列中每个数字都加上一个$(l - r + 1)$的倍数，这个倍数可以是负数，可以是零。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>对于前$n-1$个数字中的每个数字$a_i$都加上它自身的$(n-1)$倍，这样每个数字都变为自己原来的$n$倍。在对第$n$个数字加上它自身的$(-1)$倍就变为了$0$，在对$1$到$n$的所有数字，每个数字加上它自身的$-1$倍即可将序列中所有数字变为零。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">ll a[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">special_solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 1\n0\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 1\n0\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 1\n%lld&quot;</span>, -a[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">special_solve</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, (n - <span class="number">1</span>) * a[i], <span class="string">&quot; \n&quot;</span>[i == n - <span class="number">2</span>]);</span><br><span class="line">a[i] = n * a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, n, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, -a[n - <span class="number">1</span>]);</span><br><span class="line">a[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, -a[i], <span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1478-B. Nezzar and Lucky Number</title>
      <link href="/2021/01/29/CF1478-B.%20Nezzar%20and%20Lucky%20Number/"/>
      <url>/2021/01/29/CF1478-B.%20Nezzar%20and%20Lucky%20Number/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>题目给出一个数字$d(1\leq d \leq 9)$代表某个人最喜欢的数字。</p><p>题目定义了幸运数字，它的含义为：若一个数字的每个数位上至少出现一次这个人最喜欢的数字那么就称这个数字为幸运数字。例如这个人非常喜欢$7$，那么$711$就是一个幸运数字，因为$711$的百位上有一个数字$7$，而$113$就不是一个幸运数字，因为它的各个数位上都没有数字$7$。</p><p>题目任意给出一个数字$a$，问你可不可以通过两个幸运数字的相加来得到它。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>首先先假设$d=7$，对于大于$a=70$的数字，比如$71,75$这些本身就是幸运数字，$81，83，103$这些数字虽然本身不是幸运数字，但是他们必然可以拆分成两个幸运数字相加的形式，举几个例子就能很好的说明：</p><p>若现在有个$3$个数字$81，93，102$，那么$81=(74-0)+(7+0)=74+7$，$93=(86-10)+(7+10)=76+17$，$102=(95-20)+(7+20)=75+27$，不止这些比较小的数字，再比如我随便打出来一个数字$465387643875$，那么$(465387643875=465387643868-90)+(7+90)=465387643778+97$.</p><p>观察上面的式子,应该能看出规律了吧。对于任何大于$80$的数字，一开始设为$7+X$，然后通过在$X$中减去一些数字（只减非个位上的数字）加到$7$上使得$X$的十位上也变成$7$。</p><p>解决了大于等于$70$的情况，现在就来看看小于70的情况。</p><p>在小于70的数字中，幸运数字只有$7,17,27,37,47,57,67$，也就是说只有个位可能是$7$，那么任意一个数字怎么判断能否由这些数字构成呢？由于这个$a$可能非常大，不可能通过暴力搜索的方法找到答案。</p><p>考虑这样一件事：在小于$70$的数字中，你要得到一个结尾为$1$的数字，需要几个$7$ ？通过计算会发现需要$3$个$7$才能得到一个结尾为$1$的数字$21$；那要得到一个结尾为$6$的数字呢？需要$8$个$7$。</p><p>有没有一些启发？如果现在有个数字是$46$，那能否由上述的$7$个数字构成呢？不能，因为这些数字的个位都是$7$，要得到个位为$3$的数字至少要$8$个$7$相加（这里说至少是因为你可以8个17相加，你可以3个27和5个47相加随你，但这里只说最终相加结果中最小的）也就是$56$，而$46&lt;56$无论如何都不可能由上述$7$个数字相加得到$46$。</p><p>那么大于等于$56$的、个位是$6$的数字可以有上述$7$个数字构成吗？可以的，比如$66$，那$66=7+7+7+7+7+7+17$得到，只要灵活的在十位上加减数字就可以。</p><p>但这里有一些特殊情况，比如$d=2$的时候，$2$乘以任何数字都不可能得到一个奇数，也就是说如果给定的数字$a$的个位如果是奇数并且还小于$20$（对于大于$20$的情况，上述结论依然成立），那么他无论如何也不可能通过幸运数字相加得到$a$。</p><p>通过上面论述可以得到这样的结论：如果给定的数字$a$的个位数等于$d<em>k\%10(k&gt;0)$，$k$是可能的数字中最小的一个，并且$a&gt;=d</em>k$，那么$a$就可以由幸运数字相加得到。</p><p>以上仅仅作为演示，相关结论在其他的$d$以及$a$上依然适用。</p><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">int</span> q, d, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;q, &amp;d);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">t = (d * i % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (a[t] == <span class="number">-1</span>) &#123;</span><br><span class="line">a[t] = d * i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (t &gt;= <span class="number">10</span> * d) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[t % <span class="number">10</span>] != <span class="number">-1</span> &amp;&amp; t &gt;= a[t % <span class="number">10</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1475-D. Cleaning the Phone</title>
      <link href="/2021/01/29/CF1475-D.%20Cleaning%20the%20Phone/"/>
      <url>/2021/01/29/CF1475-D.%20Cleaning%20the%20Phone/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><p>手机上有很多应用非常占用内存，你要清理内存。对于每个应用$i$有以下描述：应用$i$占用了$a_i$的空间，它的方便度为$b_i$。</p><p>现在让你删除其中部分应用使得删除的应用占用的空间总大小大于等于$m$且损失的方便度最小。</p><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>按照方便度将应用分类，每一类按照应用占用的空间大小从大到小排序，之后将每一类应用占用空间的前缀和求出来。</p><p>依次枚举删除前$j$个方便度为$1$的应用，这时已经删除了的应用的总内存空间就是$pre1[j_1]$，那么还要从方便度为$2$的应用中移除$m-pre1[j_2]$的空间，这时只需要用$lower_bound$在$pre2$中找到这个值就可以了，这里设这个位置为$j_2$。每次枚举，它损失的总方便度为$1<em>i+2</em>j$，在所用的情况中取最小的即可。</p><hr><h2 id="一些疑问："><a href="#一些疑问：" class="headerlink" title="一些疑问："></a>一些疑问：</h2><h3 id="1-为什么不都删除方便度为1的应用？"><a href="#1-为什么不都删除方便度为1的应用？" class="headerlink" title="1.为什么不都删除方便度为1的应用？"></a>1.为什么不都删除方便度为1的应用？</h3><p>假如有四个应用，占用的空间分别为<code>1,1,1,5</code>，方便度分别为<code>1，1，1，2</code>，现在要<code>m=3</code>，观察一下就可以发现选那个方便度为$2$的应用损失的方便度反而更小。</p><h3 id="2-为什么要按照方便度划分成两组？"><a href="#2-为什么要按照方便度划分成两组？" class="headerlink" title="2.为什么要按照方便度划分成两组？"></a>2.为什么要按照方便度划分成两组？</h3><p>分类之后数据更好处理。如果不划分可以通过<code>内存/方便度</code>的比值进行排序，从前往后加。但这样会出现一个棘手的问题：你从前往后加，加到第$j$个数字的时候总空间已经超过$m$了，但是第$j$个应用的方便度为$2$，有没有发现问题？可能后面有一个应用，它的方便度为$1$，虽让它的<code>内存/方便度</code>比第$j$个应用小，但是它已经完全可以让前$j-1$个应用的空间加上他的空间大小使得总大小大于等于$m$，但是找这个数字很麻烦，而且会徒增复杂度。</p><p>上面复杂的描述已经可以说明问题，我们不想把简单的问题复杂化。</p><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">ll a[Maxn];</span><br><span class="line">std::vector&lt;ll&gt;b1, b2;</span><br><span class="line">std::vector&lt;ll&gt;pre1, pre2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll m, t, sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line">b1.<span class="built_in">clear</span>();</span><br><span class="line">b2.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">b1.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b2.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum &lt; m) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(b1.<span class="built_in">begin</span>(), b1.<span class="built_in">end</span>(), std::greater&lt;ll&gt;());</span><br><span class="line">std::<span class="built_in">sort</span>(b2.<span class="built_in">begin</span>(), b2.<span class="built_in">end</span>(), std::greater&lt;ll&gt;());</span><br><span class="line"></span><br><span class="line">pre1.<span class="built_in">clear</span>(); pre1.<span class="built_in">push_back</span>(<span class="number">0</span>); <span class="comment">// 这里是因为有可能方便度为1的一个也不选</span></span><br><span class="line">pre2.<span class="built_in">clear</span>(); pre2.<span class="built_in">push_back</span>(<span class="number">0</span>); <span class="comment">// 与上同理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b1.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">t = pre1[i - <span class="number">1</span>] + b1[i - <span class="number">1</span>];</span><br><span class="line">pre1.<span class="built_in">push_back</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b2.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">t = pre2[i - <span class="number">1</span>] + b2[i - <span class="number">1</span>]; </span><br><span class="line">pre2.<span class="built_in">push_back</span>(t); </span><br><span class="line">&#125; </span><br><span class="line">ll ans = INF; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre1.<span class="built_in">size</span>(); i++) &#123; </span><br><span class="line">ll tar = m - pre1[i];</span><br><span class="line"><span class="keyword">int</span> p = std::<span class="built_in">lower_bound</span>(pre2.<span class="built_in">begin</span>(), pre2.<span class="built_in">end</span>(), tar) - pre2.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">if</span> (p == pre2.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = std::<span class="built_in">min</span>(ans, (ll)(i + p * <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1400-C. Binary String Reconstruction</title>
      <link href="/2021/01/27/CF1400-C.%20Binary%20String%20Reconstruction/"/>
      <url>/2021/01/27/CF1400-C.%20Binary%20String%20Reconstruction/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="对于一个二进制字符串-s-，以及一个给定的-x-，你可以通过一下操作来得到字符串-w-："><a href="#对于一个二进制字符串-s-，以及一个给定的-x-，你可以通过一下操作来得到字符串-w-：" class="headerlink" title="对于一个二进制字符串$s$，以及一个给定的$x$，你可以通过一下操作来得到字符串$w$："></a>对于一个二进制字符串$s$，以及一个给定的$x$，你可以通过一下操作来得到字符串$w$：</h3><h3 id="对于字符串-s-的第-i-位，"><a href="#对于字符串-s-的第-i-位，" class="headerlink" title="对于字符串$s$的第$i$位，"></a>对于字符串$s$的第$i$位，</h3><h3 id="1-如果-i-x-有意义并且-s-i-x-1-那么-w-i-1"><a href="#1-如果-i-x-有意义并且-s-i-x-1-那么-w-i-1" class="headerlink" title="1. 如果$i-x$有意义并且$s[i-x]==1$那么$w[i]=1$ ;"></a>1. 如果$i-x$有意义并且$s[i-x]==1$那么$w[i]=1$ ;</h3><h3 id="2-如果-i-x-有意义并且-s-i-x-1-，那么-w-i-1"><a href="#2-如果-i-x-有意义并且-s-i-x-1-，那么-w-i-1" class="headerlink" title="2.如果$i+x$有意义并且$s[i+x]==1$，那么$w[i]=1$;"></a>2.如果$i+x$有意义并且$s[i+x]==1$，那么$w[i]=1$;</h3><h3 id="如果上面两条都不符合，那么-w-i-0"><a href="#如果上面两条都不符合，那么-w-i-0" class="headerlink" title="如果上面两条都不符合，那么$w[i]=0$."></a>如果上面两条都不符合，那么$w[i]=0$.</h3><h3 id="现在题目给出你字符串-w-和-x-，让你找出符合要求的字符串-s-，如果不存在这样的字符串-s-那么输出-1-。"><a href="#现在题目给出你字符串-w-和-x-，让你找出符合要求的字符串-s-，如果不存在这样的字符串-s-那么输出-1-。" class="headerlink" title="现在题目给出你字符串$w$和$x$，让你找出符合要求的字符串$s$，如果不存在这样的字符串$s$那么输出$-1$。"></a>现在题目给出你字符串$w$和$x$，让你找出符合要求的字符串$s$，如果不存在这样的字符串$s$那么输出$-1$。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="对于给出的字符串-w-，如果-w-i-1-，那么必定有-s-i-x-0-s-i-1-0-。"><a href="#对于给出的字符串-w-，如果-w-i-1-，那么必定有-s-i-x-0-s-i-1-0-。" class="headerlink" title="对于给出的字符串$w$，如果$w[i]==1$，那么必定有$s[i-x]=0,s[i+1]=0$。"></a>对于给出的字符串$w$，如果$w[i]==1$，那么必定有$s[i-x]=0,s[i+1]=0$。</h3><h3 id="将其他非-0-的位置补为-1-。然后按照上面给出的操作再由-s-得到-w-1-，如果-w-w-1-那么-s-就是答案，否则没有答案输出-1-。"><a href="#将其他非-0-的位置补为-1-。然后按照上面给出的操作再由-s-得到-w-1-，如果-w-w-1-那么-s-就是答案，否则没有答案输出-1-。" class="headerlink" title="将其他非$0$的位置补为$1$。然后按照上面给出的操作再由$s$得到$w_1$，如果$w=w_1$那么$s$就是答案，否则没有答案输出$-1$。"></a>将其他非$0$的位置补为$1$。然后按照上面给出的操作再由$s$得到$w_1$，如果$w=w_1$那么$s$就是答案，否则没有答案输出$-1$。</h3><h3 id="之所以需要由-s-再得到一遍-w-1-然后用-w-和-w-1-进行比较，原因在于：我们设-w-的一个位置-p-x-，若-w-2x-0-，那么在-w-2x-处就会有-s-x-0-s-3x-0-，而如果-w-0-1-，那么就要求-s-x-1-，一个位置不可能有两个值，而在上面由-w-得到-s-的过程中无法检查出这个问题。"><a href="#之所以需要由-s-再得到一遍-w-1-然后用-w-和-w-1-进行比较，原因在于：我们设-w-的一个位置-p-x-，若-w-2x-0-，那么在-w-2x-处就会有-s-x-0-s-3x-0-，而如果-w-0-1-，那么就要求-s-x-1-，一个位置不可能有两个值，而在上面由-w-得到-s-的过程中无法检查出这个问题。" class="headerlink" title="之所以需要由$s$再得到一遍$w_1$然后用$w$和$w_1$进行比较，原因在于：我们设$w$的一个位置$p=x$，若$w[2x]=0$，那么在$w[2x]$处就会有$s[x]=0,s[3x]=0$，而如果$w[0]=1$，那么就要求$s[x]=1$，一个位置不可能有两个值，而在上面由$w$得到$s$的过程中无法检查出这个问题。"></a>之所以需要由$s$再得到一遍$w_1$然后用$w$和$w_1$进行比较，原因在于：我们设$w$的一个位置$p=x$，若$w[2x]=0$，那么在$w[2x]$处就会有$s[x]=0,s[3x]=0$，而如果$w[0]=1$，那么就要求$s[x]=1$，一个位置不可能有两个值，而在上面由$w$得到$s$的过程中无法检查出这个问题。</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[Maxn];</span><br><span class="line"><span class="keyword">int</span> s[Maxn], w[Maxn], x;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>, str, &amp;x);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">w[i] = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">fill</span>(s, s + len, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (w[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i - x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">s[i - x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i + x &lt; len) &#123;</span><br><span class="line">s[i + x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((i - x &gt;= <span class="number">0</span> &amp;&amp; s[i - x] == <span class="number">1</span>) || (i + x) &lt; len &amp;&amp; s[i + x] == <span class="number">1</span>) &#123;</span><br><span class="line">t = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (w[i] != t) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1401-C. Mere Array</title>
      <link href="/2021/01/27/CF1401-C.%20Mere%20Array/"/>
      <url>/2021/01/27/CF1401-C.%20Mere%20Array/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个长度为-n-的数组-a-，你可以对这个数组进行如下操作：对于数组-a-中任意的两个元素-a-i-、-a-j-，若-gcd-a-i-a-j-min-a-1-a-2-…-a-n-，那么就可以交换数组中的这两个数字。"><a href="#给出一个长度为-n-的数组-a-，你可以对这个数组进行如下操作：对于数组-a-中任意的两个元素-a-i-、-a-j-，若-gcd-a-i-a-j-min-a-1-a-2-…-a-n-，那么就可以交换数组中的这两个数字。" class="headerlink" title="给出一个长度为$n$的数组$a$，你可以对这个数组进行如下操作：对于数组$a$中任意的两个元素$a_i$、$a_j$，若$gcd(a_i,a_j)=min\{a_1,a_2,…,a_n\}$，那么就可以交换数组中的这两个数字。"></a>给出一个长度为$n$的数组$a$，你可以对这个数组进行如下操作：对于数组$a$中任意的两个元素$a_i$、$a_j$，若$gcd(a_i,a_j)=min\{a_1,a_2,…,a_n\}$，那么就可以交换数组中的这两个数字。</h3><h3 id="现在问你是否能够通过一定次的上述操作使得数组-a-变成非递减序列。"><a href="#现在问你是否能够通过一定次的上述操作使得数组-a-变成非递减序列。" class="headerlink" title="现在问你是否能够通过一定次的上述操作使得数组$a$变成非递减序列。"></a>现在问你是否能够通过一定次的上述操作使得数组$a$变成非递减序列。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="首先，由于-min-a-1-a-2-…-a-n-是定值，那么对于任何数字-a-i-，只要-a-i-是-a-min-的倍数，都可以构成-gcd-a-i-a-min-a-min-，换句话说只要-a-i-是-a-min-的倍数，-a-i-和-a-min-都是可以随意交换的。反之，如果-a-i-不是-a-min-的倍数，那么数字-a-i-无论如何都不可能被移动，原因在于：既然-a-i-不是-a-min-的倍数，那么对-a-i-进行分解必然不可能得到-a-min-，那么-a-i-与任何其他数字-a-j-的公因数都不可能分解出-a-min-，那么-gcd-a-i-a-j-也就不可能等于-a-min-了。"><a href="#首先，由于-min-a-1-a-2-…-a-n-是定值，那么对于任何数字-a-i-，只要-a-i-是-a-min-的倍数，都可以构成-gcd-a-i-a-min-a-min-，换句话说只要-a-i-是-a-min-的倍数，-a-i-和-a-min-都是可以随意交换的。反之，如果-a-i-不是-a-min-的倍数，那么数字-a-i-无论如何都不可能被移动，原因在于：既然-a-i-不是-a-min-的倍数，那么对-a-i-进行分解必然不可能得到-a-min-，那么-a-i-与任何其他数字-a-j-的公因数都不可能分解出-a-min-，那么-gcd-a-i-a-j-也就不可能等于-a-min-了。" class="headerlink" title="首先，由于$min\{a_1,a_2,…,a_n\}$是定值，那么对于任何数字$a_i$，只要$a_i$是$a_{min}$的倍数，都可以构成$gcd(a_i,a_{min})=a_{min}$，换句话说只要$a_i$是$a_{min}$的倍数，$a_i$和$a_{min}$都是可以随意交换的。反之，如果$a_i$不是$a_{min}$的倍数，那么数字$a_i$无论如何都不可能被移动，原因在于：既然$a_i$不是$a_{min}$的倍数，那么对$a_i$进行分解必然不可能得到$a_{min}$，那么$a_i$与任何其他数字$a_j$的公因数都不可能分解出$a_{min}$，那么$gcd(a_i,a_j)$也就不可能等于$a_{min}$了。"></a>首先，由于$min\{a_1,a_2,…,a_n\}$是定值，那么对于任何数字$a_i$，只要$a_i$是$a_{min}$的倍数，都可以构成$gcd(a_i,a_{min})=a_{min}$，换句话说只要$a_i$是$a_{min}$的倍数，$a_i$和$a_{min}$都是可以随意交换的。反之，如果$a_i$不是$a_{min}$的倍数，那么数字$a_i$无论如何都不可能被移动，原因在于：既然$a_i$不是$a_{min}$的倍数，那么对$a_i$进行分解必然不可能得到$a_{min}$，那么$a_i$与任何其他数字$a_j$的公因数都不可能分解出$a_{min}$，那么$gcd(a_i,a_j)$也就不可能等于$a_{min}$了。</h3><h3 id="其次，将数组-a-进行排序可以得到数组-b-，那么如果-b-i-not-a-i-那必然是通过交换数字得到的，而交换数字就可以通过上面说到的方式进行交换。对所有的-b-i-not-a-i-，若-a-i-a-min-都等于-0-，那么就可以通过题目给出的操作的到非递减序列-b-，否则不可以。"><a href="#其次，将数组-a-进行排序可以得到数组-b-，那么如果-b-i-not-a-i-那必然是通过交换数字得到的，而交换数字就可以通过上面说到的方式进行交换。对所有的-b-i-not-a-i-，若-a-i-a-min-都等于-0-，那么就可以通过题目给出的操作的到非递减序列-b-，否则不可以。" class="headerlink" title="其次，将数组$a$进行排序可以得到数组$b$，那么如果$b[i]\not=a[i]$那必然是通过交换数字得到的，而交换数字就可以通过上面说到的方式进行交换。对所有的$b[i]\not=a[i]$，若$a[i]\%a_{min}$都等于$0$，那么就可以通过题目给出的操作的到非递减序列$b$，否则不可以。"></a>其次，将数组$a$进行排序可以得到数组$b$，那么如果$b[i]\not=a[i]$那必然是通过交换数字得到的，而交换数字就可以通过上面说到的方式进行交换。对所有的$b[i]\not=a[i]$，若$a[i]\%a_{min}$都等于$0$，那么就可以通过题目给出的操作的到非递减序列$b$，否则不可以。</h3><h3 id="对于上面一条不理解的可以这样想，我们把序列中-a-i-not-b-i-的数字-a-i-以及-a-min-保留下来，然后用-a-min-作为临时变量对剩下的序列进行选择排序，必然可以使得这个序列变成非递减序列，让后再把删除的数字加进去就可以得到数组-b-。删与不删本质上都是一样的，只是为了更好地理解。"><a href="#对于上面一条不理解的可以这样想，我们把序列中-a-i-not-b-i-的数字-a-i-以及-a-min-保留下来，然后用-a-min-作为临时变量对剩下的序列进行选择排序，必然可以使得这个序列变成非递减序列，让后再把删除的数字加进去就可以得到数组-b-。删与不删本质上都是一样的，只是为了更好地理解。" class="headerlink" title="对于上面一条不理解的可以这样想，我们把序列中$a[i]\not=b[i]$的数字$a[i]$以及$a_{min}$保留下来，然后用$a_{min}$作为临时变量对剩下的序列进行选择排序，必然可以使得这个序列变成非递减序列，让后再把删除的数字加进去就可以得到数组$b$。删与不删本质上都是一样的，只是为了更好地理解。"></a>对于上面一条不理解的可以这样想，我们把序列中$a[i]\not=b[i]$的数字$a[i]$以及$a_{min}$保留下来，然后用$a_{min}$作为临时变量对剩下的序列进行选择排序，必然可以使得这个序列变成非递减序列，让后再把删除的数字加进去就可以得到数组$b$。删与不删本质上都是一样的，只是为了更好地理解。</h3><hr><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn], b[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, minn = INF;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">minn = std::<span class="built_in">min</span>(minn, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span> a);</span><br><span class="line">std::<span class="built_in">sort</span>(b, b + n);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] != b[i] &amp;&amp; a[i] % minn != <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1475-C. Ball in Berland</title>
      <link href="/2021/01/26/CF1475-C.%20Ball%20in%20Berland/"/>
      <url>/2021/01/26/CF1475-C.%20Ball%20in%20Berland/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="一个班级有-a-个男生和-b-个女生，现在这个班级有-k-对男女愿意一起出席毕业典礼，这里注意-k-对男女中可能会有某个男生或女生出现在多个-pair-中。"><a href="#一个班级有-a-个男生和-b-个女生，现在这个班级有-k-对男女愿意一起出席毕业典礼，这里注意-k-对男女中可能会有某个男生或女生出现在多个-pair-中。" class="headerlink" title="一个班级有$a$个男生和$b$个女生，现在这个班级有$k$对男女愿意一起出席毕业典礼，这里注意$k$对男女中可能会有某个男生或女生出现在多个$pair$中。"></a>一个班级有$a$个男生和$b$个女生，现在这个班级有$k$对男女愿意一起出席毕业典礼，这里注意$k$对男女中可能会有某个男生或女生出现在多个$pair$中。</h3><h3 id="你从这-k-对中找出两对，使得这两对中的男生不相同、女生不相同，即一个男生或女生不可能在一个典礼中出现在两对中。"><a href="#你从这-k-对中找出两对，使得这两对中的男生不相同、女生不相同，即一个男生或女生不可能在一个典礼中出现在两对中。" class="headerlink" title="你从这$k$对中找出两对，使得这两对中的男生不相同、女生不相同，即一个男生或女生不可能在一个典礼中出现在两对中。"></a>你从这$k$对中找出两对，使得这两对中的男生不相同、女生不相同，即一个男生或女生不可能在一个典礼中出现在两对中。</h3><h3 id="让你求出一共有多少种可能的组合方式。"><a href="#让你求出一共有多少种可能的组合方式。" class="headerlink" title="让你求出一共有多少种可能的组合方式。"></a>让你求出一共有多少种可能的组合方式。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="枚举这-k-对，假设每对描述为-b-i-g-i-，那么-k-减去与-b-i-g-i-配对的人的数量-N-b-i-g-i-，就是确定了-b-i-g-i-之后可能的情况数。"><a href="#枚举这-k-对，假设每对描述为-b-i-g-i-，那么-k-减去与-b-i-g-i-配对的人的数量-N-b-i-g-i-，就是确定了-b-i-g-i-之后可能的情况数。" class="headerlink" title="枚举这$k$对，假设每对描述为$(b_i, g_i)$，那么$k$减去与$b_i,g_i$配对的人的数量$N_{(b_i,g_i)}$，就是确定了$(b_i,g_i)$之后可能的情况数。"></a>枚举这$k$对，假设每对描述为$(b_i, g_i)$，那么$k$减去与$b_i,g_i$配对的人的数量$N_{(b_i,g_i)}$，就是确定了$(b_i,g_i)$之后可能的情况数。</h3><h3 id="那么答案-ans-frac-sum-i-1-kN-b-i-g-i-2-，之所以要除以2是因为每个情况都会被计算两遍，比如对于枚举-b-i-g-i-的时候会枚举到-b-j-g-j-，那么枚举到-b-j-g-j-的时候同样也会枚举到-b-i-g-i-。"><a href="#那么答案-ans-frac-sum-i-1-kN-b-i-g-i-2-，之所以要除以2是因为每个情况都会被计算两遍，比如对于枚举-b-i-g-i-的时候会枚举到-b-j-g-j-，那么枚举到-b-j-g-j-的时候同样也会枚举到-b-i-g-i-。" class="headerlink" title="那么答案$ans=\frac{\sum_{i=1}^kN_{b_i,g_i}}2$，之所以要除以2是因为每个情况都会被计算两遍，比如对于枚举$(b_i,g_i)$的时候会枚举到$(b_j,g_j)$，那么枚举到$(b_j,g_j)$的时候同样也会枚举到$(b_i,g_i)$。"></a>那么答案$ans=\frac{\sum_{i=1}^kN_{b_i,g_i}}2$，之所以要除以2是因为每个情况都会被计算两遍，比如对于枚举$(b_i,g_i)$的时候会枚举到$(b_j,g_j)$，那么枚举到$(b_j,g_j)$的时候同样也会枚举到$(b_i,g_i)$。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> in[Maxn][<span class="number">2</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * in[i][0]:第i组的男生的编号</span></span><br><span class="line"><span class="comment"> * in[i][1]:第i组的女生的编号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> degree[<span class="number">2</span>][Maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * degree[0][i]:与第i个男生配对的数量</span></span><br><span class="line"><span class="comment"> * degree[1][i]:与第i个女生配对的数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(degree, <span class="number">0</span>, <span class="keyword">sizeof</span> degree);</span><br><span class="line"><span class="keyword">int</span> a, b, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i][<span class="number">0</span>]);</span><br><span class="line">degree[<span class="number">0</span>][in[i][<span class="number">0</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;in[i][<span class="number">1</span>]);</span><br><span class="line">degree[<span class="number">1</span>][in[i][<span class="number">1</span>]]++;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = in[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> v = in[i][<span class="number">1</span>];</span><br><span class="line">ans += k - degree[<span class="number">0</span>][u] - degree[<span class="number">1</span>][v] + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// +1 是因为当前枚举的pair被减掉两次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// freopen(&quot;/Users/chant/in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1459-C. Row GCD</title>
      <link href="/2021/01/24/CF1459-C.%20Row%20GCD/"/>
      <url>/2021/01/24/CF1459-C.%20Row%20GCD/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出两个整数序列-a、b-，他们的长度分别为-n-m-。对于数组-b-中的每个数字，让你求出-gcd-a-1-b-j-a-2-b-j-…-a-n-b-j-。"><a href="#给出两个整数序列-a、b-，他们的长度分别为-n-m-。对于数组-b-中的每个数字，让你求出-gcd-a-1-b-j-a-2-b-j-…-a-n-b-j-。" class="headerlink" title="给出两个整数序列$a、b$，他们的长度分别为$n,m$。对于数组$b$中的每个数字，让你求出$gcd(a_1+b_j,a_2+b_j,…,a_n+b_j)$。"></a>给出两个整数序列$a、b$，他们的长度分别为$n,m$。对于数组$b$中的每个数字，让你求出$gcd(a_1+b_j,a_2+b_j,…,a_n+b_j)$。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="本题用到了-gcd-的两个性质："><a href="#本题用到了-gcd-的两个性质：" class="headerlink" title="本题用到了$gcd$的两个性质："></a>本题用到了$gcd$的两个性质：</h3><h3 id="1-gcd-a-1-a-2-…-a-n-gcd-a-1-gcd-a-2-a-n"><a href="#1-gcd-a-1-a-2-…-a-n-gcd-a-1-gcd-a-2-a-n" class="headerlink" title="1. $gcd(a_1,a_2,…,a_n) = gcd(a_1,gcd(a_2,..,a_n))$"></a>1. $gcd(a_1,a_2,…,a_n) = gcd(a_1,gcd(a_2,..,a_n))$</h3><h3 id="2-gcd-a-1-a-2-…-a-n-1-a-n-gcd-a-1-vert-a-2-a-1-vert-…-vert-a-n-a-n-1-vert-。"><a href="#2-gcd-a-1-a-2-…-a-n-1-a-n-gcd-a-1-vert-a-2-a-1-vert-…-vert-a-n-a-n-1-vert-。" class="headerlink" title="2. $gcd(a_1,a_2,…,a_{n-1},a_n)=gcd(a_1,\vert a_2-a_1\vert,…,\vert a_n-a_{n-1}\vert)$。"></a>2. $gcd(a_1,a_2,…,a_{n-1},a_n)=gcd(a_1,\vert a_2-a_1\vert,…,\vert a_n-a_{n-1}\vert)$。</h3><h3 id="所以题中的式子-gcd-a-1-b-j-a-2-b-j-…-a-n-b-j-gcd-a-1-b-j-a-2-a-1-a-3-a-2-…-a-n-a-n-1-。对于上面的式子，只需要先提前求-gd-gcd-a-2-a-1-a-3-a-2-…-a-n-a-n-1-，然后对于每个-b-j-求出-gcd-gd-a-1-b-j-就是答案。"><a href="#所以题中的式子-gcd-a-1-b-j-a-2-b-j-…-a-n-b-j-gcd-a-1-b-j-a-2-a-1-a-3-a-2-…-a-n-a-n-1-。对于上面的式子，只需要先提前求-gd-gcd-a-2-a-1-a-3-a-2-…-a-n-a-n-1-，然后对于每个-b-j-求出-gcd-gd-a-1-b-j-就是答案。" class="headerlink" title="所以题中的式子$gcd(a_1+b_j,a_2+b_j,…,a_n+b_j)=gcd(a_1+b_j,a_2-a_1,a_3-a_2,…,a_n-a_{n-1})$。对于上面的式子，只需要先提前求$gd=gcd(a_2-a_1,a_3-a_2,…,a_n-a_{n-1})$，然后对于每个$b_j$求出$gcd(gd,a_1+b_j)$就是答案。"></a>所以题中的式子$gcd(a_1+b_j,a_2+b_j,…,a_n+b_j)=gcd(a_1+b_j,a_2-a_1,a_3-a_2,…,a_n-a_{n-1})$。对于上面的式子，只需要先提前求$gd=gcd(a_2-a_1,a_3-a_2,…,a_n-a_{n-1})$，然后对于每个$b_j$求出$gcd(gd,a_1+b_j)$就是答案。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">ll a[Maxn], b[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll _a, ll _b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> !_b ? _a : <span class="built_in">gcd</span>(_b, _a % _b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, b + i);</span><br><span class="line">&#125;</span><br><span class="line">ll gd = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">gd = <span class="built_in">gcd</span>(gd, std::<span class="built_in">abs</span>(a[i] - a[i - <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld%c&quot;</span>, <span class="built_in">gcd</span>(gd, a[<span class="number">0</span>] + b[i]),<span class="string">&quot; \n&quot;</span>[i == m - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1415-C. Bouncing Ball</title>
      <link href="/2021/01/24/CF1415-C.%20Bouncing%20Ball/"/>
      <url>/2021/01/24/CF1415-C.%20Bouncing%20Ball/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="在-x-轴上有-n-个点（从-1-到-n-），每个点都有一个值-0-或-1-，-0-代表这个点不能走，-1-代表这个点可以走。你可以对这-n-个点执行一下两个操作："><a href="#在-x-轴上有-n-个点（从-1-到-n-），每个点都有一个值-0-或-1-，-0-代表这个点不能走，-1-代表这个点可以走。你可以对这-n-个点执行一下两个操作：" class="headerlink" title="在$x$轴上有$n$个点（从$1$到$n$），每个点都有一个值$0$或$1$，$0$代表这个点不能走，$1$代表这个点可以走。你可以对这$n$个点执行一下两个操作："></a>在$x$轴上有$n$个点（从$1$到$n$），每个点都有一个值$0$或$1$，$0$代表这个点不能走，$1$代表这个点可以走。你可以对这$n$个点执行一下两个操作：</h3><h3 id="1-花费-x-让一个值为-0-的点变为-1-。"><a href="#1-花费-x-让一个值为-0-的点变为-1-。" class="headerlink" title="1. 花费$x$让一个值为$0$的点变为$1$。"></a>1. 花费$x$让一个值为$0$的点变为$1$。</h3><h3 id="2-花费-y-删除第一个点，其余的点的-x-轴坐标整体减一。"><a href="#2-花费-y-删除第一个点，其余的点的-x-轴坐标整体减一。" class="headerlink" title="2. 花费$y$删除第一个点，其余的点的$x$轴坐标整体减一。"></a>2. 花费$y$删除第一个点，其余的点的$x$轴坐标整体减一。</h3><h3 id="完成上面操作之后，你从点-p-出发，每次向前跳-k-个单位，即你能跳的位置有-p-p-k-p-2k-…-直到跳出这-n-个点。若在跳出这-n-个点之前落在了一个值为-0-的点上，那么就失败了。"><a href="#完成上面操作之后，你从点-p-出发，每次向前跳-k-个单位，即你能跳的位置有-p-p-k-p-2k-…-直到跳出这-n-个点。若在跳出这-n-个点之前落在了一个值为-0-的点上，那么就失败了。" class="headerlink" title="完成上面操作之后，你从点$p$出发，每次向前跳$k$个单位，即你能跳的位置有$\{p,p+k,p+2k,…\}$ 直到跳出这$n$个点。若在跳出这$n$个点之前落在了一个值为$0$的点上，那么就失败了。"></a>完成上面操作之后，你从点$p$出发，每次向前跳$k$个单位，即你能跳的位置有$\{p,p+k,p+2k,…\}$ 直到跳出这$n$个点。若在跳出这$n$个点之前落在了一个值为$0$的点上，那么就失败了。</h3><h3 id="那么为了能成功的跳出这-n-个点，最小的花费是多少？"><a href="#那么为了能成功的跳出这-n-个点，最小的花费是多少？" class="headerlink" title="那么为了能成功的跳出这$n$个点，最小的花费是多少？"></a>那么为了能成功的跳出这$n$个点，最小的花费是多少？</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="一般的思路，枚举前面一共移除多少块，然后从-p-点开始，每次往前跳-k-个单位，遇到-0-就在总花费中加上-x-，最终取花费最小的作为答案，但是复杂度高达-O-n-2-k-这是不能接受的。"><a href="#一般的思路，枚举前面一共移除多少块，然后从-p-点开始，每次往前跳-k-个单位，遇到-0-就在总花费中加上-x-，最终取花费最小的作为答案，但是复杂度高达-O-n-2-k-这是不能接受的。" class="headerlink" title="一般的思路，枚举前面一共移除多少块，然后从$p$点开始，每次往前跳$k$个单位，遇到$0$就在总花费中加上$x$，最终取花费最小的作为答案，但是复杂度高达$O(n^2/k)$这是不能接受的。"></a>一般的思路，枚举前面一共移除多少块，然后从$p$点开始，每次往前跳$k$个单位，遇到$0$就在总花费中加上$x$，最终取花费最小的作为答案，但是复杂度高达$O(n^2/k)$这是不能接受的。</h3><h3 id="我们可以先对这些数据进行预处理，利用DP从后往前算出花费，-dp-i-表示的状态是：当-i-点作为-p-点，要跳出-n-个点的花费（这里不包括移除前面的点的花费），转移方程为-f-x-left-begin-aligned-amp-dp-i-a-i-1-0-x-amp-i-k-gt-n-amp-dp-i-dp-i-k-a-i-1-0-x-amp-i-k-lt-n-end-aligned-right"><a href="#我们可以先对这些数据进行预处理，利用DP从后往前算出花费，-dp-i-表示的状态是：当-i-点作为-p-点，要跳出-n-个点的花费（这里不包括移除前面的点的花费），转移方程为-f-x-left-begin-aligned-amp-dp-i-a-i-1-0-x-amp-i-k-gt-n-amp-dp-i-dp-i-k-a-i-1-0-x-amp-i-k-lt-n-end-aligned-right" class="headerlink" title="我们可以先对这些数据进行预处理，利用DP从后往前算出花费，$dp[i]$表示的状态是：当$i$点作为$p$点，要跳出$n$个点的花费（这里不包括移除前面的点的花费），转移方程为$f(x)=\left\{\begin{aligned}&amp;dp[i]=a[i]==1?0:x,&amp;i+k&gt;n\\&amp;dp[i]=dp[i+k]+a[i]==1?0:x,&amp;i+k&lt;=n\end{aligned}\right.$"></a>我们可以先对这些数据进行预处理，利用DP从后往前算出花费，$dp[i]$表示的状态是：当$i$点作为$p$点，要跳出$n$个点的花费（这里不包括移除前面的点的花费），转移方程为$f(x)=\left\{\begin{aligned}&amp;dp[i]=a[i]==1?0:x,&amp;i+k&gt;n\\&amp;dp[i]=dp[i+k]+a[i]==1?0:x,&amp;i+k&lt;=n\end{aligned}\right.$</h3><h3 id="处理完这些数据就可以从-p-点开始枚举每一个点，那么从这点出发的总花费就是-i-p-y-dp-i-，全部枚举完取最小的一个就是答案。"><a href="#处理完这些数据就可以从-p-点开始枚举每一个点，那么从这点出发的总花费就是-i-p-y-dp-i-，全部枚举完取最小的一个就是答案。" class="headerlink" title="处理完这些数据就可以从$p$点开始枚举每一个点，那么从这点出发的总花费就是$(i-p)*y+dp[i]$，全部枚举完取最小的一个就是答案。"></a>处理完这些数据就可以从$p$点开始枚举每一个点，那么从这点出发的总花费就是$(i-p)*y+dp[i]$，全部枚举完取最小的一个就是答案。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[Maxn], a[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, p, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;p, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= p; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i + k &gt; n) &#123;</span><br><span class="line">dp[i] = a[i] == <span class="number">1</span> ? <span class="number">0</span> : x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = dp[i + k] + (a[i] == <span class="number">1</span> ? <span class="number">0</span> : x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt;= n; i++) &#123;</span><br><span class="line">ans = std::<span class="built_in">min</span>(ans, (i - p) * y + dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1471-C. Strange Birthday Party</title>
      <link href="/2021/01/24/CF1471-C.%20Strange%20Birthday%20Party/"/>
      <url>/2021/01/24/CF1471-C.%20Strange%20Birthday%20Party/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="你要举办一场生日派对。派对有-n-个人，每个人都有一个数字-k-i-。超市有-m-件礼物，购买每件礼物需要花费-c-j-c-1-lt-c-2-lt-…-lt-c-m-，且每个礼物只有一件。你要给这-n-个人发东西，对于第-i-个人，你有两种选择："><a href="#你要举办一场生日派对。派对有-n-个人，每个人都有一个数字-k-i-。超市有-m-件礼物，购买每件礼物需要花费-c-j-c-1-lt-c-2-lt-…-lt-c-m-，且每个礼物只有一件。你要给这-n-个人发东西，对于第-i-个人，你有两种选择：" class="headerlink" title="你要举办一场生日派对。派对有$n$个人，每个人都有一个数字$k_i$。超市有$m$件礼物，购买每件礼物需要花费$$c_j(c_1&lt;c_2&lt;…&lt;c_m)$，且每个礼物只有一件。你要给这$n$个人发东西，对于第$i$个人，你有两种选择："></a>你要举办一场生日派对。派对有$n$个人，每个人都有一个数字$k_i$。超市有$m$件礼物，购买每件礼物需要花费$$c_j(c_1&lt;c_2&lt;…&lt;c_m)$，且每个礼物只有一件。你要给这$n$个人发东西，对于第$i$个人，你有两种选择：</h3><h3 id="1-给第-i-个人发礼物，那么给这个人的礼物要求-j-lt-k-i-，即礼物的编号不能超过这个人的数字-k-i"><a href="#1-给第-i-个人发礼物，那么给这个人的礼物要求-j-lt-k-i-，即礼物的编号不能超过这个人的数字-k-i" class="headerlink" title="1. 给第$i$个人发礼物，那么给这个人的礼物要求$j&lt;=k_i$，即礼物的编号不能超过这个人的数字$k_i$;"></a>1. 给第$i$个人发礼物，那么给这个人的礼物要求$j&lt;=k_i$，即礼物的编号不能超过这个人的数字$k_i$;</h3><h3 id="2-直接给这个人-c-k-i"><a href="#2-直接给这个人-c-k-i" class="headerlink" title="2. 直接给这个人$$c_{k_i}$."></a>2. 直接给这个人$$c_{k_i}$.</h3><h3 id="现在要你求出最小的花费。"><a href="#现在要你求出最小的花费。" class="headerlink" title="现在要你求出最小的花费。"></a>现在要你求出最小的花费。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="按花费从小到大依次分配礼物。假设现在要分配的礼物的编号是-cur-，利用贪心的思想，当-cur-lt-k-i-时，依次将花费最小的礼物分给-k-i-最大的人；当-cur-gt-k-i-时，直接给这位朋友-c-k-i-。"><a href="#按花费从小到大依次分配礼物。假设现在要分配的礼物的编号是-cur-，利用贪心的思想，当-cur-lt-k-i-时，依次将花费最小的礼物分给-k-i-最大的人；当-cur-gt-k-i-时，直接给这位朋友-c-k-i-。" class="headerlink" title="按花费从小到大依次分配礼物。假设现在要分配的礼物的编号是$cur$，利用贪心的思想，当$cur&lt;=k_i$时，依次将花费最小的礼物分给$k_i$最大的人；当$cur&gt;k_i$时，直接给这位朋友$$c_{k_i}$。"></a>按花费从小到大依次分配礼物。假设现在要分配的礼物的编号是$cur$，利用贪心的思想，当$cur&lt;=k_i$时，依次将花费最小的礼物分给$k_i$最大的人；当$cur&gt;k_i$时，直接给这位朋友$$c_{k_i}$。</h3><h3 id="原因如下：当-cur-lt-k-i-时，有-c-cur-lt-c-k-i-；当-cur-gt-k-i-时，有-c-k-i-lt-c-cur-，每次都取两者中较小的。"><a href="#原因如下：当-cur-lt-k-i-时，有-c-cur-lt-c-k-i-；当-cur-gt-k-i-时，有-c-k-i-lt-c-cur-，每次都取两者中较小的。" class="headerlink" title="原因如下：当$cur&lt;=k_i$时，有$c_{cur}&lt;=c_{k_i}$；当$cur&gt;k_i$时，有$c_{k_i}&lt;c_{cur}$，每次都取两者中较小的。"></a>原因如下：当$cur&lt;=k_i$时，有$c_{cur}&lt;=c_{k_i}$；当$cur&gt;k_i$时，有$c_{k_i}&lt;c_{cur}$，每次都取两者中较小的。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[Maxn], b[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, b + i);</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; cur) &#123;</span><br><span class="line">ans += b[cur++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += b[a[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1465-D. Grime Zoo</title>
      <link href="/2021/01/22/CF1465-D.%20Grime%20Zoo/"/>
      <url>/2021/01/22/CF1465-D.%20Grime%20Zoo/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="一个长度为n，由-0-1-这三个字符构成的字符串，字符串中-01-子串贡献-x-值，-10-的子串贡献-y-值，现在让你把-替换成-0-或-1-，问你整个字符串的总贡献最少可以是多少？"><a href="#一个长度为n，由-0-1-这三个字符构成的字符串，字符串中-01-子串贡献-x-值，-10-的子串贡献-y-值，现在让你把-替换成-0-或-1-，问你整个字符串的总贡献最少可以是多少？" class="headerlink" title="一个长度为n，由$0,1,?$这三个字符构成的字符串，字符串中$01$子串贡献$x$值，$10$的子串贡献$y$值，现在让你把$?$替换成$0$或$1$，问你整个字符串的总贡献最少可以是多少？"></a>一个长度为n，由$0,1,?$这三个字符构成的字符串，字符串中$01$子串贡献$x$值，$10$的子串贡献$y$值，现在让你把$?$替换成$0$或$1$，问你整个字符串的总贡献最少可以是多少？</h3><h3 id="子串是指可以通过删去字符串中的一些字符得到的字符串。不同的-01-或-10-子串只需要让他们其中的一个-0-或-1-来自字符串中不同的位置即可。"><a href="#子串是指可以通过删去字符串中的一些字符得到的字符串。不同的-01-或-10-子串只需要让他们其中的一个-0-或-1-来自字符串中不同的位置即可。" class="headerlink" title="子串是指可以通过删去字符串中的一些字符得到的字符串。不同的$01$或$10$子串只需要让他们其中的一个$0$或$1$来自字符串中不同的位置即可。"></a>子串是指可以通过删去字符串中的一些字符得到的字符串。不同的$01$或$10$子串只需要让他们其中的一个$0$或$1$来自字符串中不同的位置即可。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="先说一个结论：当-x"><a href="#先说一个结论：当-x" class="headerlink" title="先说一个结论：当$x"></a>先说一个结论：当$x<y$的时候，无论两个$?$（后面分别称这两个$?$为$c_l$和$c_r$）之间的的$0$和$1$的数量是多少、他们是如何排列的，$c_l$取$0$，$c_r$取$1$的时候，这个字符串的总贡献一定小于$c_l$取$1$，$c_r$取$0$的时候的总贡献，即$w_{c_l=0,c_r=1}<w_{c_l=1,c_r=0}$。反之$x>y$的时候也能得到类似的结论。</h3><h3 id="证明如下："><a href="#证明如下：" class="headerlink" title="证明如下："></a>证明如下：</h3><blockquote><h3 id="假设-c-l-和-c-r-之间有-n-0-个-0-，-n-1-个-1-，那么当-c-l-0-c-r-1-的时候，这段字符串的总贡献-w-c-l-0-c-r-1-1-n-1-x-n-0x-w-1-n-0-n-1-x-w-，其中-w-是-c-l-c-r-之间的字符产生的贡献；当-c-l-1-c-r-0-的时候，这段字符串的总贡献-w-c-l-1-c-r-0-1-n-0-y-n-1y-w-1-n-0-n-1-y-w-，那么-w-c-l-0-c-r-1-w-c-l-1-c-r-0-1-n-0-n-1-x-y-r-l-x-y-。"><a href="#假设-c-l-和-c-r-之间有-n-0-个-0-，-n-1-个-1-，那么当-c-l-0-c-r-1-的时候，这段字符串的总贡献-w-c-l-0-c-r-1-1-n-1-x-n-0x-w-1-n-0-n-1-x-w-，其中-w-是-c-l-c-r-之间的字符产生的贡献；当-c-l-1-c-r-0-的时候，这段字符串的总贡献-w-c-l-1-c-r-0-1-n-0-y-n-1y-w-1-n-0-n-1-y-w-，那么-w-c-l-0-c-r-1-w-c-l-1-c-r-0-1-n-0-n-1-x-y-r-l-x-y-。" class="headerlink" title="假设$c_l$和$c_r$之间有$n_0$个$0$，$n_1$个$1$，那么当$c_l=0,c_r=1$的时候，这段字符串的总贡献$w_{c_l=0,c_r=1}=(1+n_1)x+n_0x+w=(1+n_0+n_1)x+w$，其中$w$是$c_l,c_r$之间的字符产生的贡献；当$c_l=1,c_r=0$的时候，这段字符串的总贡献$w_{c_l=1,c_r=0}=(1+n_0)y+n_1y+w=(1+n_0+n_1)y+w$，那么$w_{c_l=0,c_r=1}-w_{c_l=1,c+r=0}=(1+n_0+n_1)(x-y)=(r-l)(x-y)$。"></a>假设$c_l$和$c_r$之间有$n_0$个$0$，$n_1$个$1$，那么当$c_l=0,c_r=1$的时候，这段字符串的总贡献$w_{c_l=0,c_r=1}=(1+n_1)<em>x+n_0</em>x+w=(1+n_0+n_1)<em>x+w$，其中$w$是$c_l,c_r$之间的字符产生的贡献；当$c_l=1,c_r=0$的时候，这段字符串的总贡献$w_{c_l=1,c_r=0}=(1+n_0)</em>y+n_1<em>y+w=(1+n_0+n_1)</em>y+w$，那么$w_{c_l=0,c_r=1}-w_{c_l=1,c+r=0}=(1+n_0+n_1)<em>(x-y)=(r-l)</em>(x-y)$。</h3><h3 id="从上面的式子可以得出结论：-x"><a href="#从上面的式子可以得出结论：-x" class="headerlink" title="从上面的式子可以得出结论：$x"></a>从上面的式子可以得出结论：$x<y$时，$w_{c_l=0,c_r=1}<w_{c_l=1,c_r=0}$；$x>y$时，$w_{c_l=0,c_r=1}&gt;w_{c_l=1,c+r=0}$。</h3></blockquote><h3 id="这样就可以枚举字符串中的每个位置，将当前枚举的位置之前的所有-替换为-1-或0-，之后所有的-替换为-0-或1-，计算整个字符串的贡献，取最小的一个即可。"><a href="#这样就可以枚举字符串中的每个位置，将当前枚举的位置之前的所有-替换为-1-或0-，之后所有的-替换为-0-或1-，计算整个字符串的贡献，取最小的一个即可。" class="headerlink" title="这样就可以枚举字符串中的每个位置，将当前枚举的位置之前的所有$?$替换为$1(或0)$，之后所有的$?$替换为$0(或1)$，计算整个字符串的贡献，取最小的一个即可。"></a>这样就可以枚举字符串中的每个位置，将当前枚举的位置之前的所有$?$替换为$1(或0)$，之后所有的$?$替换为$0(或1)$，计算整个字符串的贡献，取最小的一个即可。</h3><h3 id="但是这样枚举，暴力计算总贡献，时间复杂度为-O-n-3-，所以可以通过前缀和进行优化：用前缀和分别维护前-i-个字符和后-n-i-1-个字符中-0-和-1-的数量以及分别维护前-i-个字符和后-n-i-1-个字符构成的字符串的总贡献，这样就可以将复杂度从-O-n-3-降为-O-n-。具体的计算方法及实现细节见代码及代码注释。"><a href="#但是这样枚举，暴力计算总贡献，时间复杂度为-O-n-3-，所以可以通过前缀和进行优化：用前缀和分别维护前-i-个字符和后-n-i-1-个字符中-0-和-1-的数量以及分别维护前-i-个字符和后-n-i-1-个字符构成的字符串的总贡献，这样就可以将复杂度从-O-n-3-降为-O-n-。具体的计算方法及实现细节见代码及代码注释。" class="headerlink" title="但是这样枚举，暴力计算总贡献，时间复杂度为$O(n^3)$，所以可以通过前缀和进行优化：用前缀和分别维护前$i$个字符和后$(n-i+1)$个字符中$0$和$1$的数量以及分别维护前$i$个字符和后$(n-i+1)$个字符构成的字符串的总贡献，这样就可以将复杂度从$O(n^3)$降为$O(n)$。具体的计算方法及实现细节见代码及代码注释。"></a>但是这样枚举，暴力计算总贡献，时间复杂度为$O(n^3)$，所以可以通过前缀和进行优化：用前缀和分别维护前$i$个字符和后$(n-i+1)$个字符中$0$和$1$的数量以及分别维护前$i$个字符和后$(n-i+1)$个字符构成的字符串的总贡献，这样就可以将复杂度从$O(n^3)$降为$O(n)$。具体的计算方法及实现细节见代码及代码注释。</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><h3 id="这段代码使用了一些小技巧，比如将-xy-这两种情况归结为一种情况、前缀和的统计方式。具体的在代码以及代码注释中有所体现。"><a href="#这段代码使用了一些小技巧，比如将-xy-这两种情况归结为一种情况、前缀和的统计方式。具体的在代码以及代码注释中有所体现。" class="headerlink" title="这段代码使用了一些小技巧，比如将$xy$这两种情况归结为一种情况、前缀和的统计方式。具体的在代码以及代码注释中有所体现。"></a>这段代码使用了一些小技巧，比如将$x<y$和$x>y$这两种情况归结为一种情况、前缀和的统计方式。具体的在代码以及代码注释中有所体现。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[Maxn];</span><br><span class="line"><span class="keyword">int</span> char_pre[Maxn], char_suf[Maxn]; <span class="comment">// 前i个字符中1的数量，后i个字符中0的数量</span></span><br><span class="line">ll cnt_pre[Maxn], cnt_suf[Maxn];<span class="comment">// 前i个字符构成的愤怒值，后i个字符构成的愤怒值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %lld %lld&quot;</span>, s + <span class="number">1</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123; <span class="comment">// 让01 &gt; 10 的情况转化为 01 &lt; 10的情况，这样把情况做了统一</span></span><br><span class="line">std::<span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">s[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">s[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>) &#123; </span><br><span class="line"><span class="comment">// 这里之所以记录1的数量而不是0，是因为在x&lt;y的时候&#x27;0&#x27;和&#x27;?&#x27;是被归到一类里面，这样容易统计</span></span><br><span class="line">char_pre[i] = char_pre[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">cnt_pre[i] = cnt_pre[i - <span class="number">1</span>] + (i - char_pre[i]) * x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 这里把&#x27;?&#x27;看作为0</span></span><br><span class="line">char_pre[i] = char_pre[i - <span class="number">1</span>];</span><br><span class="line">cnt_pre[i] = cnt_pre[i - <span class="number">1</span>] + char_pre[i - <span class="number">1</span>] * y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">char_suf[i] = char_suf[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">cnt_suf[i] = cnt_suf[i + <span class="number">1</span>] + (n - i + <span class="number">1</span> - char_suf[i]) * x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 这里把&#x27;?&#x27;看作为1</span></span><br><span class="line">char_suf[i] = char_suf[i + <span class="number">1</span>];</span><br><span class="line">cnt_suf[i] = cnt_suf[i + <span class="number">1</span>] + char_suf[i] * y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123; </span><br><span class="line"><span class="comment">// 枚举每个位置，如果这里的字符是&#x27;?&#x27;那么就会当作&#x27;0&#x27;处理（见34行）</span></span><br><span class="line"><span class="comment">// 注意这里的i最开始是从0开始的，而不是从1，是为了处理第一个字符为&#x27;?&#x27;的情况</span></span><br><span class="line">ans = std::<span class="built_in">min</span>(ans, cnt_pre[i] + cnt_suf[i + <span class="number">1</span>] + </span><br><span class="line"><span class="number">1LL</span> * char_pre[i] * char_suf[i + <span class="number">1</span>] * y + </span><br><span class="line"><span class="number">1LL</span> * (i - char_pre[i]) * (n - i - char_suf[i + <span class="number">1</span>]) * x);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">i以及i之前的字符构成的字符串（所有的?看作0）的总贡献 + </span></span><br><span class="line"><span class="comment">i之后的字符构成的字符串（所有的?看作1）的总贡献 +</span></span><br><span class="line"><span class="comment">i以及i之前的字符中1的数量（所有?看作0） * i之后的字符中0的数量（所有?看作1） + </span></span><br><span class="line"><span class="comment">i以及i之前的字符中0的数量（所有?看作0） * i之后的字符中1的数量（所有?看作1）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1474-A. Puzzle From the Future</title>
      <link href="/2021/01/20/CF1474-A.%20Puzzle%20From%20the%20Future/"/>
      <url>/2021/01/20/CF1474-A.%20Puzzle%20From%20the%20Future/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="有两个由-0-1-组成的、长度相等字符串-a-b-，两个字符串按位相加得到一个新的字符串-s-，对-s-取-unique-即可得到由-0，1，2-组成的字符串-c-。现在给出你字符串-b-，让你找到一个字符串-a-，使得经过上述操作之后得到的字符串-c-所代表的数字最大。"><a href="#有两个由-0-1-组成的、长度相等字符串-a-b-，两个字符串按位相加得到一个新的字符串-s-，对-s-取-unique-即可得到由-0，1，2-组成的字符串-c-。现在给出你字符串-b-，让你找到一个字符串-a-，使得经过上述操作之后得到的字符串-c-所代表的数字最大。" class="headerlink" title="有两个由$0,1$组成的、长度相等字符串$a, b$，两个字符串按位相加得到一个新的字符串$s$，对$s$取$unique$即可得到由$0，1，2$组成的字符串$c$。现在给出你字符串$b$，让你找到一个字符串$a$，使得经过上述操作之后得到的字符串$c$所代表的数字最大。"></a>有两个由$0,1$组成的、长度相等字符串$a, b$，两个字符串按位相加得到一个新的字符串$s$，对$s$取$unique$即可得到由$0，1，2$组成的字符串$c$。现在给出你字符串$b$，让你找到一个字符串$a$，使得经过上述操作之后得到的字符串$c$所代表的数字最大。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="简单的贪心（虽然当时卡了一会儿-）。让字符串-c-前面的数字尽量的大，而且要保证取-unique-操作的时候长度没有变化，因为那样数字必然会变小（毕竟不在一个数量级上了）。"><a href="#简单的贪心（虽然当时卡了一会儿-）。让字符串-c-前面的数字尽量的大，而且要保证取-unique-操作的时候长度没有变化，因为那样数字必然会变小（毕竟不在一个数量级上了）。" class="headerlink" title="简单的贪心（虽然当时卡了一会儿:( ）。让字符串$c$前面的数字尽量的大，而且要保证取$unique$操作的时候长度没有变化，因为那样数字必然会变小（毕竟不在一个数量级上了）。"></a>简单的贪心（虽然当时卡了一会儿:( ）。让字符串$c$前面的数字尽量的大，而且要保证取$unique$操作的时候长度没有变化，因为那样数字必然会变小（毕竟不在一个数量级上了）。</h3><h3 id="具体的做法是，先找到一个最大的-c-，然后用-c-b-按位减就可以得到-a-。首先-b-的第一位先加上-1-得到-c-的第一位-c-0-b-0-1-。然后对于第二位开始的每一位-b-i-，如果-c-i-1-不等于-b-i-1-，那么当前位-c-i-b-i-1-，否则不做任何操作，即-c-i-b-i-。这样就可以得到最大的字符串-c-，也就得到了目标字符串-a-。"><a href="#具体的做法是，先找到一个最大的-c-，然后用-c-b-按位减就可以得到-a-。首先-b-的第一位先加上-1-得到-c-的第一位-c-0-b-0-1-。然后对于第二位开始的每一位-b-i-，如果-c-i-1-不等于-b-i-1-，那么当前位-c-i-b-i-1-，否则不做任何操作，即-c-i-b-i-。这样就可以得到最大的字符串-c-，也就得到了目标字符串-a-。" class="headerlink" title="具体的做法是，先找到一个最大的$c$，然后用$c,b$按位减就可以得到$a$。首先$b$的第一位先加上$1$得到$c$的第一位:$c[0]=b[0]+1$。然后对于第二位开始的每一位$b[i]$，如果$c[i-1]$不等于$b[i]+1$，那么当前位$c[i]=b[i]+1$，否则不做任何操作，即$c[i]=b[i]$。这样就可以得到最大的字符串$c$，也就得到了目标字符串$a$。"></a>具体的做法是，先找到一个最大的$c$，然后用$c,b$按位减就可以得到$a$。首先$b$的第一位先加上$1$得到$c$的第一位:$c[0]=b[0]+1$。然后对于第二位开始的每一位$b[i]$，如果$c[i-1]$不等于$b[i]+1$，那么当前位$c[i]=b[i]+1$，否则不做任何操作，即$c[i]=b[i]$。这样就可以得到最大的字符串$c$，也就得到了目标字符串$a$。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[Maxn], c[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>, &amp;n, b);</span><br><span class="line">    c[<span class="number">0</span>] = b[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i - <span class="number">1</span>] != b[i] + <span class="number">1</span>) &#123;</span><br><span class="line">            c[i] = b[i] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[i] = b[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i] - b[i] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1474-C. Array Destruction</title>
      <link href="/2021/01/20/CF1474-C.%20Array%20Destruction/"/>
      <url>/2021/01/20/CF1474-C.%20Array%20Destruction/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目给出一个长度为-2n-的正整数序列，现在问你是否存在一个-x-使得可以不断的进行如下操作，直到这个序列变为空："><a href="#题目给出一个长度为-2n-的正整数序列，现在问你是否存在一个-x-使得可以不断的进行如下操作，直到这个序列变为空：" class="headerlink" title="题目给出一个长度为$2n$的正整数序列，现在问你是否存在一个$x$使得可以不断的进行如下操作，直到这个序列变为空："></a>题目给出一个长度为$2n$的正整数序列，现在问你是否存在一个$x$使得可以不断的进行如下操作，直到这个序列变为空：</h3><h3 id="从序列中找到两个数字-a-1-a-2-，使得-a-1-a-2-x-，然后从序列中删掉这两个数字，-x-的值也被更新，-x-max-a-1-a-2-。"><a href="#从序列中找到两个数字-a-1-a-2-，使得-a-1-a-2-x-，然后从序列中删掉这两个数字，-x-的值也被更新，-x-max-a-1-a-2-。" class="headerlink" title="从序列中找到两个数字$a_1,a_2$，使得$a_1+a_2==x$，然后从序列中删掉这两个数字，$x$的值也被更新，$x=max(a_1, a+2)$。"></a>从序列中找到两个数字$a_1,a_2$，使得$a_1+a_2==x$，然后从序列中删掉这两个数字，$x$的值也被更新，$x=max(a_1, a+2)$。</h3><hr><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="由于这道题给的数据范围较小-n-leqslant1000-，所以可以通过暴力枚举-x-来得到答案。"><a href="#由于这道题给的数据范围较小-n-leqslant1000-，所以可以通过暴力枚举-x-来得到答案。" class="headerlink" title="由于这道题给的数据范围较小$n\leqslant1000$，所以可以通过暴力枚举$x$来得到答案。"></a>由于这道题给的数据范围较小$n\leqslant1000$，所以可以通过暴力枚举$x$来得到答案。</h3><h3 id="当然这里暴力枚举-x-也有一定的技巧。先说结论，这个最开始的-x-一定等于序列中最大的一个数字-a-max-加上序列中的另外一个数字-a-i-，原因如下："><a href="#当然这里暴力枚举-x-也有一定的技巧。先说结论，这个最开始的-x-一定等于序列中最大的一个数字-a-max-加上序列中的另外一个数字-a-i-，原因如下：" class="headerlink" title="当然这里暴力枚举$x$也有一定的技巧。先说结论，这个最开始的$x$一定等于序列中最大的一个数字$a_{max}$加上序列中的另外一个数字$a_i$，原因如下："></a>当然这里暴力枚举$x$也有一定的技巧。先说结论，这个最开始的$x$一定等于序列中最大的一个数字$a_{max}$加上序列中的另外一个数字$a_i$，原因如下：</h3><h3 id="假设-x-not-a-max-a-i-也就是说-x-a-i-1-a-i-2-max-a-i-1-a-i-2-lt-a-max-，那么当从序列中找到了-a-i-1-a-i-2-之后-x-就被更新为-x-max-a-i-1-a-i-2-，这个时候-a-max-是大于-x-的，-x-不可能在这之后加上一个正整数之后等于-a-max-，因为这之后，-x-一直保持递减的状态。"><a href="#假设-x-not-a-max-a-i-也就是说-x-a-i-1-a-i-2-max-a-i-1-a-i-2-lt-a-max-，那么当从序列中找到了-a-i-1-a-i-2-之后-x-就被更新为-x-max-a-i-1-a-i-2-，这个时候-a-max-是大于-x-的，-x-不可能在这之后加上一个正整数之后等于-a-max-，因为这之后，-x-一直保持递减的状态。" class="headerlink" title="假设$x\not=a_{max}+a_i$,也就是说$x=a_{i_1}+a_{i_2}, max\{a_{i_1},a_{i_2}\}&lt;a_{max}$，那么当从序列中找到了$a_{i_1},a_{i_2}$之后$x$就被更新为$x=max\{a_{i_1},a_{i_2}\}$，这个时候$a_{max}$是大于$x$的，$x$不可能在这之后加上一个正整数之后等于$a_{max}$，因为这之后，$x$一直保持递减的状态。"></a>假设$x\not=a_{max}+a_i$,也就是说$x=a_{i_1}+a_{i_2}, max\{a_{i_1},a_{i_2}\}&lt;a_{max}$，那么当从序列中找到了$a_{i_1},a_{i_2}$之后$x$就被更新为$x=max\{a_{i_1},a_{i_2}\}$，这个时候$a_{max}$是大于$x$的，$x$不可能在这之后加上一个正整数之后等于$a_{max}$，因为这之后，$x$一直保持递减的状态。</h3><h3 id="由此，-x-枚举的值可以为-a-max-a-i-1-leqslant-i-leqslant-n-1-，对于每个枚举的-x-："><a href="#由此，-x-枚举的值可以为-a-max-a-i-1-leqslant-i-leqslant-n-1-，对于每个枚举的-x-：" class="headerlink" title="由此，$x$枚举的值可以为$a_{max}+a_{i},1\leqslant i\leqslant n-1$，对于每个枚举的$x$："></a>由此，$x$枚举的值可以为$a_{max}+a_{i},1\leqslant i\leqslant n-1$，对于每个枚举的$x$：</h3><h3 id="每次找到序列中的最大值-a-max-然后二分搜索-x-a-max-，删掉这两个数字，然后更新-x-…-…如果每次都能找到-x-a-max-这个值并最终将整个序列删掉，那么这个-x-就是答案，如果全部-x-枚举完都没有答案，那么就不存在。"><a href="#每次找到序列中的最大值-a-max-然后二分搜索-x-a-max-，删掉这两个数字，然后更新-x-…-…如果每次都能找到-x-a-max-这个值并最终将整个序列删掉，那么这个-x-就是答案，如果全部-x-枚举完都没有答案，那么就不存在。" class="headerlink" title="每次找到序列中的最大值$a_{max}$然后二分搜索$x-a_{max}$，删掉这两个数字，然后更新$x$… …如果每次都能找到$x-a_{max}$这个值并最终将整个序列删掉，那么这个$x$就是答案，如果全部$x$枚举完都没有答案，那么就不存在。"></a>每次找到序列中的最大值$a_{max}$然后二分搜索$x-a_{max}$，删掉这两个数字，然后更新$x$… …如果每次都能找到$x-a_{max}$这个值并最终将整个序列删掉，那么这个$x$就是答案，如果全部$x$枚举完都没有答案，那么就不存在。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::pii&gt;ans;</span><br><span class="line"><span class="keyword">int</span> a[Maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    ans.<span class="built_in">push_back</span>(std::<span class="built_in">mp</span>(t, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">memset</span> (vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">int</span> cur = n;</span><br><span class="line">    <span class="keyword">while</span> (cur &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> pos_1 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">                pos_1 = i;</span><br><span class="line">                vis[pos_1] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> pos_2 = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(a, a + n, t - a[pos_1]) - a);</span><br><span class="line">        <span class="keyword">while</span> (pos_2 &lt; n &amp;&amp; vis[pos_2]) &#123;</span><br><span class="line">            pos_2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos_2 == n || a[pos_1] + a[pos_2] != t || vis[pos_2]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[pos_2] = <span class="literal">true</span>;</span><br><span class="line">        t = a[pos_1];</span><br><span class="line">        cur -= <span class="number">2</span>;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(std::<span class="built_in">mp</span>(a[pos_1], a[pos_2]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span> (a, a + <span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = a[i] + a[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">        flag = <span class="built_in">check</span>(t, <span class="number">2</span> * n);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;YES\n%d\n&quot;</span>, ans[<span class="number">0</span>].fr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, ans[i].fr, ans[i].sc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1474-D. Cleaning</title>
      <link href="/2021/01/20/CF1474-D.%20Cleaning/"/>
      <url>/2021/01/20/CF1474-D.%20Cleaning/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个长度为-n-的正整数序列，你可以对序列进行如下操作："><a href="#给出一个长度为-n-的正整数序列，你可以对序列进行如下操作：" class="headerlink" title="给出一个长度为$n$的正整数序列，你可以对序列进行如下操作："></a>给出一个长度为$n$的正整数序列，你可以对序列进行如下操作：</h3><ul><li><h3 id="对序列中相邻的两个数字-a-i-a-i-1-同时减去一个数字-t（t-lt-min-a-i-a-i-1-）-。"><a href="#对序列中相邻的两个数字-a-i-a-i-1-同时减去一个数字-t（t-lt-min-a-i-a-i-1-）-。" class="headerlink" title="对序列中相邻的两个数字$a_{i}, a_{i+1}$同时减去一个数字$t（t&lt;=min(a_{i},a_{i+1})）$。"></a>对序列中相邻的两个数字$a_{i}, a_{i+1}$同时减去一个数字$t（t&lt;=min(a_{i},a_{i+1})）$。</h3></li></ul><h3 id="现在你有一次机会可以将序列中任意两个相邻的数字交换位置（可以不交换）。问你可不可以通过上述操作将序列中所有数字都减为-0-。"><a href="#现在你有一次机会可以将序列中任意两个相邻的数字交换位置（可以不交换）。问你可不可以通过上述操作将序列中所有数字都减为-0-。" class="headerlink" title="现在你有一次机会可以将序列中任意两个相邻的数字交换位置（可以不交换）。问你可不可以通过上述操作将序列中所有数字都减为$0$。"></a>现在你有一次机会可以将序列中任意两个相邻的数字交换位置（可以不交换）。问你可不可以通过上述操作将序列中所有数字都减为$0$。</h3><hr><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="在说具体做法之前，先考虑三个事情："><a href="#在说具体做法之前，先考虑三个事情：" class="headerlink" title="在说具体做法之前，先考虑三个事情："></a>在说具体做法之前，先考虑三个事情：</h3><h3 id="1-先不考虑交换数字，在不交换数字的情况我们要把序列中全部的数字都消为-0-（当然也可能不能全部消为0）可以通过什么方法呢？可以通过以下两种操作获得："><a href="#1-先不考虑交换数字，在不交换数字的情况我们要把序列中全部的数字都消为-0-（当然也可能不能全部消为0）可以通过什么方法呢？可以通过以下两种操作获得：" class="headerlink" title="1. 先不考虑交换数字，在不交换数字的情况我们要把序列中全部的数字都消为$0$（当然也可能不能全部消为0）可以通过什么方法呢？可以通过以下两种操作获得："></a>1. 先不考虑交换数字，在不交换数字的情况我们要把序列中全部的数字都消为$0$（当然也可能不能全部消为0）可以通过什么方法呢？可以通过以下两种操作获得：</h3><h3 id="首先我们假设在-a-1-的前面有一个-a-0-0-，那么消除的过程就是-a-1-a-1-a-0-a-2-a-2-a-1-…-a-n-a-n-a-n-1-，这样顺利的话就可以把全部的数字消掉。"><a href="#首先我们假设在-a-1-的前面有一个-a-0-0-，那么消除的过程就是-a-1-a-1-a-0-a-2-a-2-a-1-…-a-n-a-n-a-n-1-，这样顺利的话就可以把全部的数字消掉。" class="headerlink" title="首先我们假设在$a_1$的前面有一个$a_0=0$，那么消除的过程就是$a_1=a_1-a_0, a_2=a_2-a_1,…, a_n=a_n-a_{n-1}$，这样顺利的话就可以把全部的数字消掉。"></a>首先我们假设在$a_1$的前面有一个$a_0=0$，那么消除的过程就是$a_1=a_1-a_0, a_2=a_2-a_1,…, a_n=a_n-a_{n-1}$，这样顺利的话就可以把全部的数字消掉。</h3><h3 id="或者我们假设在-a-n-的后面有一个-a-n-1-0-，那么过程为-a-n-a-n-a-n-1-a-n-1-a-n-1-a-n-…-a-1-a-1-a-2-，同样也可以把全部的数字都消掉。"><a href="#或者我们假设在-a-n-的后面有一个-a-n-1-0-，那么过程为-a-n-a-n-a-n-1-a-n-1-a-n-1-a-n-…-a-1-a-1-a-2-，同样也可以把全部的数字都消掉。" class="headerlink" title="或者我们假设在$a_n$的后面有一个$a_{n+1}=0$，那么过程为$a_n=a_n-a_{n+1}, a_{n-1}=a_{n-1}-a_n,…, a_1=a_1-a_2$，同样也可以把全部的数字都消掉。"></a>或者我们假设在$a_n$的后面有一个$a_{n+1}=0$，那么过程为$a_n=a_n-a_{n+1}, a_{n-1}=a_{n-1}-a_n,…, a_1=a_1-a_2$，同样也可以把全部的数字都消掉。</h3><h3 id="上述操作为顺利情况下消除的过程，但实际上并不一直是那么的顺利。以上述的第一种操作为例，假如有-a-i-1-gt-a-i-，那么就会出现-a-i-lt-0-的情况，这显然是不可能的，同样第二种操作也可能会出现这种情况。"><a href="#上述操作为顺利情况下消除的过程，但实际上并不一直是那么的顺利。以上述的第一种操作为例，假如有-a-i-1-gt-a-i-，那么就会出现-a-i-lt-0-的情况，这显然是不可能的，同样第二种操作也可能会出现这种情况。" class="headerlink" title="上述操作为顺利情况下消除的过程，但实际上并不一直是那么的顺利。以上述的第一种操作为例，假如有$a_{i-1}&gt;a_{i}$，那么就会出现$a_{i}&lt;0$的情况，这显然是不可能的，同样第二种操作也可能会出现这种情况。"></a>上述操作为顺利情况下消除的过程，但实际上并不一直是那么的顺利。以上述的第一种操作为例，假如有$a_{i-1}&gt;a_{i}$，那么就会出现$a_{i}&lt;0$的情况，这显然是不可能的，同样第二种操作也可能会出现这种情况。</h3><h3 id="2-如果从前往后减，那么在交换了-a-i-a-i-1-这两个数字之后会不会对-a-i-1-之前的数字造成影响呢？同样的从后往前减，交换-a-i-a-i-1-之后会不会对-a-i-1-之后的数字造成影响呢？这两个问题的答案是否定的，均不会造成影响。"><a href="#2-如果从前往后减，那么在交换了-a-i-a-i-1-这两个数字之后会不会对-a-i-1-之前的数字造成影响呢？同样的从后往前减，交换-a-i-a-i-1-之后会不会对-a-i-1-之后的数字造成影响呢？这两个问题的答案是否定的，均不会造成影响。" class="headerlink" title="2. 如果从前往后减，那么在交换了$a_{i},a_{i-1}$这两个数字之后会不会对$a_{i-1}$之前的数字造成影响呢？同样的从后往前减，交换$a_{i},a_{i+1}$之后会不会对$a_{i+1}$之后的数字造成影响呢？这两个问题的答案是否定的，均不会造成影响。"></a>2. 如果从前往后减，那么在交换了$a_{i},a_{i-1}$这两个数字之后会不会对$a_{i-1}$之前的数字造成影响呢？同样的从后往前减，交换$a_{i},a_{i+1}$之后会不会对$a_{i+1}$之后的数字造成影响呢？这两个问题的答案是否定的，均不会造成影响。</h3><h3 id="3-对于一个序列，假设现在这个序列可以从前往后把所有数字都消掉，那么先从前往后消掉一部分，那么可不可以从后往前把剩下的一部分全部消掉呢？再假设这个序列不能从前往后或从后往前把全部数字消掉，那么能不能通过先从前往后消掉一部分再从后往前消掉另一部分把整个序列消掉？"><a href="#3-对于一个序列，假设现在这个序列可以从前往后把所有数字都消掉，那么先从前往后消掉一部分，那么可不可以从后往前把剩下的一部分全部消掉呢？再假设这个序列不能从前往后或从后往前把全部数字消掉，那么能不能通过先从前往后消掉一部分再从后往前消掉另一部分把整个序列消掉？" class="headerlink" title="3. 对于一个序列，假设现在这个序列可以从前往后把所有数字都消掉，那么先从前往后消掉一部分，那么可不可以从后往前把剩下的一部分全部消掉呢？再假设这个序列不能从前往后或从后往前把全部数字消掉，那么能不能通过先从前往后消掉一部分再从后往前消掉另一部分把整个序列消掉？"></a>3. 对于一个序列，假设现在这个序列可以从前往后把所有数字都消掉，那么先从前往后消掉一部分，那么可不可以从后往前把剩下的一部分全部消掉呢？再假设这个序列不能从前往后或从后往前把全部数字消掉，那么能不能通过先从前往后消掉一部分再从后往前消掉另一部分把整个序列消掉？</h3><h3 id="换句话说，对于一个序列而言，先从前往后消去一部分，再从后往前消去另一部分，是否和只从前往后或只从后往前消除是等效的呢（能全部消掉或不能）？答案是肯定的，这也是本题的关键。"><a href="#换句话说，对于一个序列而言，先从前往后消去一部分，再从后往前消去另一部分，是否和只从前往后或只从后往前消除是等效的呢（能全部消掉或不能）？答案是肯定的，这也是本题的关键。" class="headerlink" title="换句话说，对于一个序列而言，先从前往后消去一部分，再从后往前消去另一部分，是否和只从前往后或只从后往前消除是等效的呢（能全部消掉或不能）？答案是肯定的，这也是本题的关键。"></a>换句话说，对于一个序列而言，先从前往后消去一部分，再从后往前消去另一部分，是否和只从前往后或只从后往前消除是等效的呢（能全部消掉或不能）？答案是肯定的，这也是本题的关键。</h3><hr><h3 id="前面作了那么多铺垫，现在说一下做法。先定义两个数组-pre-prefix-和-suf-suffix-，-pre-i-表示从前往后消掉了-a-1-a-2-…-a-i-1-之后-a-i-的值，-suf-i-表示从后往前消掉了-a-n-a-n-1-…-a-i-1-之后-a-i-的值。这里说一下，不论是从前往后还是从后往前，如果-a-i-减完之后得到了一个负数，那么他之后的所有数字不论是正是负都没有意义了，所以-a-i-以及-a-i-之后所有数字就需要用一个特殊的标记这个-pre-或-suf-是无效的。"><a href="#前面作了那么多铺垫，现在说一下做法。先定义两个数组-pre-prefix-和-suf-suffix-，-pre-i-表示从前往后消掉了-a-1-a-2-…-a-i-1-之后-a-i-的值，-suf-i-表示从后往前消掉了-a-n-a-n-1-…-a-i-1-之后-a-i-的值。这里说一下，不论是从前往后还是从后往前，如果-a-i-减完之后得到了一个负数，那么他之后的所有数字不论是正是负都没有意义了，所以-a-i-以及-a-i-之后所有数字就需要用一个特殊的标记这个-pre-或-suf-是无效的。" class="headerlink" title="前面作了那么多铺垫，现在说一下做法。先定义两个数组$pre(prefix)$和$suf(suffix)$，$pre[i]$表示从前往后消掉了$a_{1}, a_{2},…, a_{i-1}$之后$a_{i}$的值，$suf[i]$表示从后往前消掉了$a_{n}, a_{n-1},…,a_{i+1}$之后$a[i]$的值。这里说一下，不论是从前往后还是从后往前，如果$a_{i}$减完之后得到了一个负数，那么他之后的所有数字不论是正是负都没有意义了，所以$a_{i}$以及$a_{i}$之后所有数字就需要用一个特殊的标记这个$pre$或$suf$是无效的。"></a>前面作了那么多铺垫，现在说一下做法。先定义两个数组$pre(prefix)$和$suf(suffix)$，$pre[i]$表示从前往后消掉了$a_{1}, a_{2},…, a_{i-1}$之后$a_{i}$的值，$suf[i]$表示从后往前消掉了$a_{n}, a_{n-1},…,a_{i+1}$之后$a[i]$的值。这里说一下，不论是从前往后还是从后往前，如果$a_{i}$减完之后得到了一个负数，那么他之后的所有数字不论是正是负都没有意义了，所以$a_{i}$以及$a_{i}$之后所有数字就需要用一个特殊的标记这个$pre$或$suf$是无效的。</h3><h3 id="现在就可以枚举交换的数字了，比如现在要枚举的是交换-a-i-和-a-i-1-，那么只需要看-pre-i-1-a-i-1-a-i-suf-i-2-这几个数字构成的序列可不可以通过从前往后或者从后往前给全部消掉即可，如果可以答案就是-YES-，后面也就不用继续枚举了；如果全部枚举之后都不能那么答案就是-NO-。当然这有个前提就是-pre-i-1-和-suf-i-2-不能是无效的，也就是不能是你之前打过特殊标记的。"><a href="#现在就可以枚举交换的数字了，比如现在要枚举的是交换-a-i-和-a-i-1-，那么只需要看-pre-i-1-a-i-1-a-i-suf-i-2-这几个数字构成的序列可不可以通过从前往后或者从后往前给全部消掉即可，如果可以答案就是-YES-，后面也就不用继续枚举了；如果全部枚举之后都不能那么答案就是-NO-。当然这有个前提就是-pre-i-1-和-suf-i-2-不能是无效的，也就是不能是你之前打过特殊标记的。" class="headerlink" title="现在就可以枚举交换的数字了，比如现在要枚举的是交换$a_{i}$和$a_{i+1}$，那么只需要看$pre[i-1],a[i+1],a[i],suf[i+2]$这几个数字构成的序列可不可以通过从前往后或者从后往前给全部消掉即可，如果可以答案就是$YES$，后面也就不用继续枚举了；如果全部枚举之后都不能那么答案就是$NO$。当然这有个前提就是$pre[i-1]$和$suf[i+2]$不能是无效的，也就是不能是你之前打过特殊标记的。"></a>现在就可以枚举交换的数字了，比如现在要枚举的是交换$a_{i}$和$a_{i+1}$，那么只需要看$pre[i-1],a[i+1],a[i],suf[i+2]$这几个数字构成的序列可不可以通过从前往后或者从后往前给全部消掉即可，如果可以答案就是$YES$，后面也就不用继续枚举了；如果全部枚举之后都不能那么答案就是$NO$。当然这有个前提就是$pre[i-1]$和$suf[i+2]$不能是无效的，也就是不能是你之前打过特殊标记的。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">a</span>(n + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">pre</span>(n + <span class="number">2</span>), <span class="built_in">suf</span>(n + <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (pre[i - <span class="number">1</span>] == <span class="number">-1</span> || a[i] &lt; pre[i - <span class="number">1</span>]) &#123;</span><br><span class="line">pre[i] = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pre[i] = a[i] - pre[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre[n] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (suf[i + <span class="number">1</span>] == <span class="number">-1</span> || a[i] &lt; suf[i + <span class="number">1</span>]) &#123;</span><br><span class="line">suf[i] = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">suf[i] = a[i] - suf[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> l = i, r = i + <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (pre[l] == <span class="number">-1</span> || suf[r] == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[r - <span class="number">1</span>] &gt;= pre[l] &amp;&amp; a[l + <span class="number">1</span>] &gt;= suf[r] &amp;&amp; a[r - <span class="number">1</span>] - pre[l] == a[l + <span class="number">1</span>] - suf[r]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><h3 id="本题本质上就是暴力，只不过-O-n-2-的暴力是不能接受的，所以先对原来数据进行预处理，使得最终时间复杂度从-O-n-2-减为-O-n-。"><a href="#本题本质上就是暴力，只不过-O-n-2-的暴力是不能接受的，所以先对原来数据进行预处理，使得最终时间复杂度从-O-n-2-减为-O-n-。" class="headerlink" title="本题本质上就是暴力，只不过$O(n^2)$的暴力是不能接受的，所以先对原来数据进行预处理，使得最终时间复杂度从$O(n^2)$减为$O(n)$。"></a>本题本质上就是暴力，只不过$O(n^2)$的暴力是不能接受的，所以先对原来数据进行预处理，使得最终时间复杂度从$O(n^2)$减为$O(n)$。</h3>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1474-B. Different Divisors</title>
      <link href="/2021/01/20/CF1474-B.%20Different%20Divisors/"/>
      <url>/2021/01/20/CF1474-B.%20Different%20Divisors/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目给出你一个-d-，要求你找出一个数字-y-，找到的-y-至少有四个整数因子并且任意两个因子之间的差至少为-d-。"><a href="#题目给出你一个-d-，要求你找出一个数字-y-，找到的-y-至少有四个整数因子并且任意两个因子之间的差至少为-d-。" class="headerlink" title="题目给出你一个$d$，要求你找出一个数字$y$，找到的$y$至少有四个整数因子并且任意两个因子之间的差至少为$d$。"></a>题目给出你一个$d$，要求你找出一个数字$y$，找到的$y$至少有四个整数因子并且任意两个因子之间的差至少为$d$。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="首先-1-是任何数字的因子，任何数自己本身也是自己的一个因子，所以我们只需要找到两个差值不小于-d-的数字-x-1-x-2-，并且-min-x-1-x-2-与-1-的差值也不小于-d-，那么第四个因子就是-x-1x-2-，也就是我们要找的-y-。所以最终答案就是-y-1-1-d-1-d-d-…-吗？这个答案看上去没什么问题，但是再看一遍题目，要求任意两个因子之间的差至少为-d-，而-y-可能还有其他的因子，其他的因子的差可能会小于-d-，所以这样是不可以的。"><a href="#首先-1-是任何数字的因子，任何数自己本身也是自己的一个因子，所以我们只需要找到两个差值不小于-d-的数字-x-1-x-2-，并且-min-x-1-x-2-与-1-的差值也不小于-d-，那么第四个因子就是-x-1x-2-，也就是我们要找的-y-。所以最终答案就是-y-1-1-d-1-d-d-…-吗？这个答案看上去没什么问题，但是再看一遍题目，要求任意两个因子之间的差至少为-d-，而-y-可能还有其他的因子，其他的因子的差可能会小于-d-，所以这样是不可以的。" class="headerlink" title="首先$1$是任何数字的因子，任何数自己本身也是自己的一个因子，所以我们只需要找到两个差值不小于$d$的数字$x_1, x_2$，并且$min(x_1, x_2)$与$1$的差值也不小于$d$，那么第四个因子就是$x_1x_2$，也就是我们要找的$y$。所以最终答案就是$y=1(1+d)*(1+d+d)$…..吗？这个答案看上去没什么问题，但是再看一遍题目，要求任意两个因子之间的差至少为$d$，而$y$可能还有其他的因子，其他的因子的差可能会小于$d$，所以这样是不可以的。"></a>首先$1$是任何数字的因子，任何数自己本身也是自己的一个因子，所以我们只需要找到两个差值不小于$d$的数字$x_1, x_2$，并且$min(x_1, x_2)$与$1$的差值也不小于$d$，那么第四个因子就是$x_1<em>x_2$，也就是我们要找的$y$。所以最终答案就是$y=1</em>(1+d)*(1+d+d)$…..吗？这个答案看上去没什么问题，但是再看一遍题目，要求任意两个因子之间的差至少为$d$，而$y$可能还有其他的因子，其他的因子的差可能会小于$d$，所以这样是不可以的。</h3><h3 id="但是这并不能说明这个方法是不可取的，如果取到的-x-1-x-2-除了-1-和它本身没有其他的因子，那么-y-也就不会有除了-1，-x-1-x-2-y-其他的因子了。而-x-1-x-2-取质数就可以很好的解决问题了。用质数筛筛出质数，两次二分查找就能找到答案。"><a href="#但是这并不能说明这个方法是不可取的，如果取到的-x-1-x-2-除了-1-和它本身没有其他的因子，那么-y-也就不会有除了-1，-x-1-x-2-y-其他的因子了。而-x-1-x-2-取质数就可以很好的解决问题了。用质数筛筛出质数，两次二分查找就能找到答案。" class="headerlink" title="但是这并不能说明这个方法是不可取的，如果取到的$x_1, x_2$除了$1$和它本身没有其他的因子，那么$y$也就不会有除了$1， x_1, x_2, y$其他的因子了。而$x_1, x_2$取质数就可以很好的解决问题了。用质数筛筛出质数，两次二分查找就能找到答案。"></a>但是这并不能说明这个方法是不可取的，如果取到的$x_1, x_2$除了$1$和它本身没有其他的因子，那么$y$也就不会有除了$1， x_1, x_2, y$其他的因子了。而$x_1, x_2$取质数就可以很好的解决问题了。用质数筛筛出质数，两次二分查找就能找到答案。</h3><hr><h3 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Maxn = <span class="number">30005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isPrime[Maxn];</span><br><span class="line"><span class="keyword">int</span> Prime[Maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">isPrime[<span class="number">0</span>] = isPrime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isPrime[i]) &#123;</span><br><span class="line">Prime[cnt++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; i * Prime[j] &lt;= n; j++) &#123;</span><br><span class="line">isPrime[i * Prime[j]] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (i % Prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line"><span class="keyword">int</span> p1 = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(Prime, Prime + cnt, <span class="number">1</span> + d) - Prime);</span><br><span class="line"><span class="keyword">int</span> p2 = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(Prime, Prime + cnt, Prime[p1] + d) - Prime);</span><br><span class="line">ll ans = <span class="number">1LL</span> * Prime[p1] * Prime[p2];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">getPrime</span>(<span class="number">30000</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1465-C. Peaceful Rooks</title>
      <link href="/2021/01/19/CF1465-C.%20Peaceful%20Rooks/"/>
      <url>/2021/01/19/CF1465-C.%20Peaceful%20Rooks/</url>
      
        <content type="html"><![CDATA[<h3 id="预备小知识："><a href="#预备小知识：" class="headerlink" title="预备小知识："></a>预备小知识：</h3><blockquote><p>Rook（国际象棋中的车）。</p><p>国际象棋中的棋子。每人有2个，他只能直走，不能斜走，除王车易位外不能越子。</p><p>—— 来自《百度百科》</p></blockquote><hr><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="题目给出一个-n-times-n-的棋盘，棋盘中有-m-m-lt-n-个车。最一开始任意两个车都不能打到对方（即都不在同一行或同一列）。"><a href="#题目给出一个-n-times-n-的棋盘，棋盘中有-m-m-lt-n-个车。最一开始任意两个车都不能打到对方（即都不在同一行或同一列）。" class="headerlink" title="题目给出一个$n\times n$的棋盘，棋盘中有$m(m&lt;n)$个车。最一开始任意两个车都不能打到对方（即都不在同一行或同一列）。"></a>题目给出一个$n\times n$的棋盘，棋盘中有$m(m&lt;n)$个车。最一开始任意两个车都不能打到对方（即都不在同一行或同一列）。</h3><h3 id="每一个回合你可以让一个车水平或垂直移动任意距离，但是要求车移动后不能让其他车可以打到它。现在问你至少多少回合之后，所有车能够都移动到主对角线上。"><a href="#每一个回合你可以让一个车水平或垂直移动任意距离，但是要求车移动后不能让其他车可以打到它。现在问你至少多少回合之后，所有车能够都移动到主对角线上。" class="headerlink" title="每一个回合你可以让一个车水平或垂直移动任意距离，但是要求车移动后不能让其他车可以打到它。现在问你至少多少回合之后，所有车能够都移动到主对角线上。"></a>每一个回合你可以让一个车水平或垂直移动任意距离，但是要求车移动后不能让其他车可以打到它。现在问你至少多少回合之后，所有车能够都移动到主对角线上。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="正常情况下每个车直接移动到它对应的主对角线上肯定是最优解。"><a href="#正常情况下每个车直接移动到它对应的主对角线上肯定是最优解。" class="headerlink" title="正常情况下每个车直接移动到它对应的主对角线上肯定是最优解。"></a>正常情况下每个车直接移动到它对应的主对角线上肯定是最优解。</h3><h3 id="但是大部分情况下车要移动到它对应的主对角线上的时候会发现那个位置要么所在行有车，要么所在列有车，那么所在行或列上的那个棋子就要先移动到那个棋子对应的主对角线上，但是又发现那个棋子对应主对角线上的位置的行或列有车，那么就要…-…这种最终会有两种情况发生："><a href="#但是大部分情况下车要移动到它对应的主对角线上的时候会发现那个位置要么所在行有车，要么所在列有车，那么所在行或列上的那个棋子就要先移动到那个棋子对应的主对角线上，但是又发现那个棋子对应主对角线上的位置的行或列有车，那么就要…-…这种最终会有两种情况发生：" class="headerlink" title="但是大部分情况下车要移动到它对应的主对角线上的时候会发现那个位置要么所在行有车，要么所在列有车，那么所在行或列上的那个棋子就要先移动到那个棋子对应的主对角线上，但是又发现那个棋子对应主对角线上的位置的行或列有车，那么就要… …这种最终会有两种情况发生："></a>但是大部分情况下车要移动到它对应的主对角线上的时候会发现那个位置要么所在行有车，要么所在列有车，那么所在行或列上的那个棋子就要先移动到那个棋子对应的主对角线上，但是又发现那个棋子对应主对角线上的位置的行或列有车，那么就要… …这种最终会有两种情况发生：</h3><h3 id="一种是最终的棋子对应的主对角线位置所在行或列上都没有棋子，那么这时候它以及它之前的所有棋子都可以一步到达主对角线上；"><a href="#一种是最终的棋子对应的主对角线位置所在行或列上都没有棋子，那么这时候它以及它之前的所有棋子都可以一步到达主对角线上；" class="headerlink" title="一种是最终的棋子对应的主对角线位置所在行或列上都没有棋子，那么这时候它以及它之前的所有棋子都可以一步到达主对角线上；"></a>一种是最终的棋子对应的主对角线位置所在行或列上都没有棋子，那么这时候它以及它之前的所有棋子都可以一步到达主对角线上；</h3><h3 id="另一种是最终的棋子对应的主对角线位置所在行或列上有棋子，并且这个棋子是第一个棋子，即形成了这样的环：-a-gt-b-gt-c-gt-d-gt-a-，那么这时候只要也只有破坏这个环之后，才能把每个棋子移动到主对角线位置。破坏的方法其实很简单，只要把环中的某一个棋子移动到一个所在行所在列没有其他棋子的位置就可以破坏这个环，等其他棋子都移动到主对角线上再把这个棋子移动到它对应的主对角线上即可。这样第二种情况移动的总次数就是环中所有棋子的个数加一（破坏环的时候多移动了一步）。"><a href="#另一种是最终的棋子对应的主对角线位置所在行或列上有棋子，并且这个棋子是第一个棋子，即形成了这样的环：-a-gt-b-gt-c-gt-d-gt-a-，那么这时候只要也只有破坏这个环之后，才能把每个棋子移动到主对角线位置。破坏的方法其实很简单，只要把环中的某一个棋子移动到一个所在行所在列没有其他棋子的位置就可以破坏这个环，等其他棋子都移动到主对角线上再把这个棋子移动到它对应的主对角线上即可。这样第二种情况移动的总次数就是环中所有棋子的个数加一（破坏环的时候多移动了一步）。" class="headerlink" title="另一种是最终的棋子对应的主对角线位置所在行或列上有棋子，并且这个棋子是第一个棋子，即形成了这样的环：$a-&gt;b-&gt;c-&gt;d-&gt;a$，那么这时候只要也只有破坏这个环之后，才能把每个棋子移动到主对角线位置。破坏的方法其实很简单，只要把环中的某一个棋子移动到一个所在行所在列没有其他棋子的位置就可以破坏这个环，等其他棋子都移动到主对角线上再把这个棋子移动到它对应的主对角线上即可。这样第二种情况移动的总次数就是环中所有棋子的个数加一（破坏环的时候多移动了一步）。"></a>另一种是最终的棋子对应的主对角线位置所在行或列上有棋子，并且这个棋子是第一个棋子，即形成了这样的环：$a-&gt;b-&gt;c-&gt;d-&gt;a$，那么这时候只要也只有破坏这个环之后，才能把每个棋子移动到主对角线位置。破坏的方法其实很简单，只要把环中的某一个棋子移动到一个所在行所在列没有其他棋子的位置就可以破坏这个环，等其他棋子都移动到主对角线上再把这个棋子移动到它对应的主对角线上即可。这样第二种情况移动的总次数就是环中所有棋子的个数加一（破坏环的时候多移动了一步）。</h3><h3 id="判断环就用并查集就可以（本蒟蒻一开始还用dfs。。），每个车-x-y-相当于一个边连接了点-x-和点-y-，答案就是不在对角线上车的数量加上环的数量。"><a href="#判断环就用并查集就可以（本蒟蒻一开始还用dfs。。），每个车-x-y-相当于一个边连接了点-x-和点-y-，答案就是不在对角线上车的数量加上环的数量。" class="headerlink" title="判断环就用并查集就可以（本蒟蒻一开始还用dfs。。），每个车$(x, y)$相当于一个边连接了点$x$和点$y$，答案就是不在对角线上车的数量加上环的数量。"></a>判断环就用并查集就可以（本蒟蒻一开始还用dfs。。），每个车$(x, y)$相当于一个边连接了点$x$和点$y$，答案就是不在对角线上车的数量加上环的数量。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> father[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">Find</span> (father[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Find</span>(u) != <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">father[<span class="built_in">Find</span>(u)] = <span class="built_in">Find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">father[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="keyword">if</span> (u == v) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Find</span>(u) == <span class="built_in">Find</span>(v)) &#123;</span><br><span class="line">ans += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Union</span>(u, v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1466-D. 13th Labour of Heracles</title>
      <link href="/2021/01/18/CF1466-D.%2013th%20Labour%20of%20Heracles/"/>
      <url>/2021/01/18/CF1466-D.%2013th%20Labour%20of%20Heracles/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由-n-个点构成的树，每个点都有一个权值。现在你可以用-k-k-subset-1-n-个颜色来给这棵树上的边涂色（这-k-种颜色不一定都要用上）。对于每种颜色都有一个权重，权值是这样定义的："><a href="#给出一个由-n-个点构成的树，每个点都有一个权值。现在你可以用-k-k-subset-1-n-个颜色来给这棵树上的边涂色（这-k-种颜色不一定都要用上）。对于每种颜色都有一个权重，权值是这样定义的：" class="headerlink" title="给出一个由$n$个点构成的树，每个点都有一个权值。现在你可以用$k,k\subset$$[1, n]$个颜色来给这棵树上的边涂色（这$k$种颜色不一定都要用上）。对于每种颜色都有一个权重，权值是这样定义的："></a>给出一个由$n$个点构成的树，每个点都有一个权值。现在你可以用$k,k\subset$$[1, n]$个颜色来给这棵树上的边涂色（这$k$种颜色不一定都要用上）。对于每种颜色都有一个权重，权值是这样定义的：</h3><blockquote><h3 id="将除了当前颜色-col-i-其他颜色的边删掉，剩余的边构成了一个个联通分量。对于任意一个联通分量我们设它的权重是-w-i-，那么-w-i-就等于该联通分量中所有点的权值之和，则对于当前颜色，它的权值就是-w-col-i-max-w-1-w-2-cdots-w-n"><a href="#将除了当前颜色-col-i-其他颜色的边删掉，剩余的边构成了一个个联通分量。对于任意一个联通分量我们设它的权重是-w-i-，那么-w-i-就等于该联通分量中所有点的权值之和，则对于当前颜色，它的权值就是-w-col-i-max-w-1-w-2-cdots-w-n" class="headerlink" title="将除了当前颜色$col_i$其他颜色的边删掉，剩余的边构成了一个个联通分量。对于任意一个联通分量我们设它的权重是$w_i$，那么$w_i$就等于该联通分量中所有点的权值之和，则对于当前颜色，它的权值就是$w_{col_i}=max\{w_1, w_2,\cdots,w_n\}$"></a>将除了当前颜色$col_i$其他颜色的边删掉，剩余的边构成了一个个联通分量。对于任意一个联通分量我们设它的权重是$w_i$，那么$w_i$就等于该联通分量中所有点的权值之和，则对于当前颜色，它的权值就是$w_{col_i}=max\{w_1, w_2,\cdots,w_n\}$</h3><h3 id="需要注意的是，这个联通分量是通过删边得到的，所以不会出现联通分量中只有一个点的情况。对于一个空的联通分量，我们认为它的权重为0。"><a href="#需要注意的是，这个联通分量是通过删边得到的，所以不会出现联通分量中只有一个点的情况。对于一个空的联通分量，我们认为它的权重为0。" class="headerlink" title="需要注意的是，这个联通分量是通过删边得到的，所以不会出现联通分量中只有一个点的情况。对于一个空的联通分量，我们认为它的权重为0。"></a>需要注意的是，这个联通分量是通过删边得到的，所以不会出现联通分量中只有一个点的情况。对于一个空的联通分量，我们认为它的权重为0。</h3></blockquote><h3 id="现在又定义对于每个-k-也有一个权值，它等于它包含的所有颜色的权值之和，即-w-k-sum-i-1-kw-col-i"><a href="#现在又定义对于每个-k-也有一个权值，它等于它包含的所有颜色的权值之和，即-w-k-sum-i-1-kw-col-i" class="headerlink" title="现在又定义对于每个$k$也有一个权值，它等于它包含的所有颜色的权值之和，即$w_k=\sum_{i=1}^kw_{col_i}$."></a>现在又定义对于每个$k$也有一个权值，它等于它包含的所有颜色的权值之和，即$w_k=\sum_{i=1}^kw_{col_i}$.</h3><h3 id="现在让你求出对于每个-k-，它的权值-w-k-的最大值是多少。"><a href="#现在让你求出对于每个-k-，它的权值-w-k-的最大值是多少。" class="headerlink" title="现在让你求出对于每个$k$，它的权值$w_k$的最大值是多少。"></a>现在让你求出对于每个$k$，它的权值$w_k$的最大值是多少。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="首先非常显然的一个道理，我们不能涂完颜色后让一个或多个颜色被分割成多个联通分量然后取-max-，这样无论如何都不可能比单一的联通分量的权值大。"><a href="#首先非常显然的一个道理，我们不能涂完颜色后让一个或多个颜色被分割成多个联通分量然后取-max-，这样无论如何都不可能比单一的联通分量的权值大。" class="headerlink" title="首先非常显然的一个道理，我们不能涂完颜色后让一个或多个颜色被分割成多个联通分量然后取$max$，这样无论如何都不可能比单一的联通分量的权值大。"></a>首先非常显然的一个道理，我们不能涂完颜色后让一个或多个颜色被分割成多个联通分量然后取$max$，这样无论如何都不可能比单一的联通分量的权值大。</h3><h3 id="我们可以试着模拟从涂一个颜色到涂两个颜色的过程，-变化的就是让其中一个点从只被计算一次变成被计算两次，对于从两个颜色到三个，三个到四个…都可以依次推广得到相同的结论。所以这里利用贪心的思想优先让权值大的点先被计算多次，再依次减少。"><a href="#我们可以试着模拟从涂一个颜色到涂两个颜色的过程，-变化的就是让其中一个点从只被计算一次变成被计算两次，对于从两个颜色到三个，三个到四个…都可以依次推广得到相同的结论。所以这里利用贪心的思想优先让权值大的点先被计算多次，再依次减少。" class="headerlink" title="我们可以试着模拟从涂一个颜色到涂两个颜色的过程， 变化的就是让其中一个点从只被计算一次变成被计算两次，对于从两个颜色到三个，三个到四个…都可以依次推广得到相同的结论。所以这里利用贪心的思想优先让权值大的点先被计算多次，再依次减少。"></a>我们可以试着模拟从涂一个颜色到涂两个颜色的过程， 变化的就是让其中一个点从只被计算一次变成被计算两次，对于从两个颜色到三个，三个到四个…都可以依次推广得到相同的结论。所以这里利用贪心的思想优先让权值大的点先被计算多次，再依次减少。</h3><h3 id="对于每一个点，他能够被计算的最多的次数就是它的度-（degree-。当-k-1-的时候，它的最大值只有一个就是每个点的权值之和。这时候每个边都会被计算一次，所有的边度都减去一，对于剩下的所有度还大于1的点，我们就按照上面说到的贪心方法进行计算就可以得到最终结果。"><a href="#对于每一个点，他能够被计算的最多的次数就是它的度-（degree-。当-k-1-的时候，它的最大值只有一个就是每个点的权值之和。这时候每个边都会被计算一次，所有的边度都减去一，对于剩下的所有度还大于1的点，我们就按照上面说到的贪心方法进行计算就可以得到最终结果。" class="headerlink" title="对于每一个点，他能够被计算的最多的次数就是它的度$（degree)$。当$k=1$的时候，它的最大值只有一个就是每个点的权值之和。这时候每个边都会被计算一次，所有的边度都减去一，对于剩下的所有度还大于1的点，我们就按照上面说到的贪心方法进行计算就可以得到最终结果。"></a>对于每一个点，他能够被计算的最多的次数就是它的度$（degree)$。当$k=1$的时候，它的最大值只有一个就是每个点的权值之和。这时候每个边都会被计算一次，所有的边度都减去一，对于剩下的所有度还大于1的点，我们就按照上面说到的贪心方法进行计算就可以得到最终结果。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><p>这段代码我借鉴了一些大佬的数据处理方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line">ll w[maxn], a[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> deg[maxn], tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cases, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cases);</span><br><span class="line"><span class="keyword">while</span>(cases--) &#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">deg[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;w[i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">deg[u]++; deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; deg[i]; j++) &#123;</span><br><span class="line">a[tot++] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">ans += w[i];</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(a, a + tot, std::greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, ans);</span><br><span class="line">ans += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1466-C. Canine poetry</title>
      <link href="/2021/01/18/CF1466-C.%20Canine%20poetry/"/>
      <url>/2021/01/18/CF1466-C.%20Canine%20poetry/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个字符串，这个字符串里面可能会包含多个回文子字符串。现在你可以任意修改这个字符串中的任意一个字符任意次数，问你最少多少操作数之后这个字符串中所有的回文子字符串的长度不超过1。"><a href="#给出一个字符串，这个字符串里面可能会包含多个回文子字符串。现在你可以任意修改这个字符串中的任意一个字符任意次数，问你最少多少操作数之后这个字符串中所有的回文子字符串的长度不超过1。" class="headerlink" title="给出一个字符串，这个字符串里面可能会包含多个回文子字符串。现在你可以任意修改这个字符串中的任意一个字符任意次数，问你最少多少操作数之后这个字符串中所有的回文子字符串的长度不超过1。"></a>给出一个字符串，这个字符串里面可能会包含多个回文子字符串。现在你可以任意修改这个字符串中的任意一个字符任意次数，问你最少多少操作数之后这个字符串中所有的回文子字符串的长度不超过1。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="对于一个字符串，如果它想要是一个回文字符串，那么它需要先保证它内部是一个回文字符串，像-abcdhedcba-这个字符串，他非常像回文字符串，但是它最中间的部分不能构成回文字符串，所以它外面的字符无论是什么也就都没有意义了。现在我们就根据这个性质，只扫描构成长度为2或3的回文字符串然后将它破坏掉，那么它可能所在的更长的回文字符串也就被破坏了。"><a href="#对于一个字符串，如果它想要是一个回文字符串，那么它需要先保证它内部是一个回文字符串，像-abcdhedcba-这个字符串，他非常像回文字符串，但是它最中间的部分不能构成回文字符串，所以它外面的字符无论是什么也就都没有意义了。现在我们就根据这个性质，只扫描构成长度为2或3的回文字符串然后将它破坏掉，那么它可能所在的更长的回文字符串也就被破坏了。" class="headerlink" title="对于一个字符串，如果它想要是一个回文字符串，那么它需要先保证它内部是一个回文字符串，像$abcdhedcba$这个字符串，他非常像回文字符串，但是它最中间的部分不能构成回文字符串，所以它外面的字符无论是什么也就都没有意义了。现在我们就根据这个性质，只扫描构成长度为2或3的回文字符串然后将它破坏掉，那么它可能所在的更长的回文字符串也就被破坏了。"></a>对于一个字符串，如果它想要是一个回文字符串，那么它需要先保证它内部是一个回文字符串，像$abcdhedcba$这个字符串，他非常像回文字符串，但是它最中间的部分不能构成回文字符串，所以它外面的字符无论是什么也就都没有意义了。现在我们就根据这个性质，只扫描构成长度为2或3的回文字符串然后将它破坏掉，那么它可能所在的更长的回文字符串也就被破坏了。</h3><h3 id="破坏字符串的时候，我们需要将原有的字符替换掉，但是这会引发一个新的问题：如果替换的字符又和其他字符构成了新的回文字符串，而每个字符只能被替换一次，所以显然这个字符不能随意替换。我们考虑一下，如果当前的字符串是ai，那么ai只要在替换前后不和ai-1-ai-2-ai-1-ai-2构成回文字符串就可以了，而ai-1-ai-2-ai-1-ai-2最多只包含4个字符，所以一定会有符合的字符，所以下面代码我用一个-vis-数组来记录一个字符是否被修改过，如果修改过那么这个字符无论如何都不可能被用来构成回文字符串。"><a href="#破坏字符串的时候，我们需要将原有的字符替换掉，但是这会引发一个新的问题：如果替换的字符又和其他字符构成了新的回文字符串，而每个字符只能被替换一次，所以显然这个字符不能随意替换。我们考虑一下，如果当前的字符串是ai，那么ai只要在替换前后不和ai-1-ai-2-ai-1-ai-2构成回文字符串就可以了，而ai-1-ai-2-ai-1-ai-2最多只包含4个字符，所以一定会有符合的字符，所以下面代码我用一个-vis-数组来记录一个字符是否被修改过，如果修改过那么这个字符无论如何都不可能被用来构成回文字符串。" class="headerlink" title="破坏字符串的时候，我们需要将原有的字符替换掉，但是这会引发一个新的问题：如果替换的字符又和其他字符构成了新的回文字符串，而每个字符只能被替换一次，所以显然这个字符不能随意替换。我们考虑一下，如果当前的字符串是ai，那么ai只要在替换前后不和ai-1,ai-2,ai+1,ai+2构成回文字符串就可以了，而ai-1,ai-2,ai+1,ai+2最多只包含4个字符，所以一定会有符合的字符，所以下面代码我用一个$vis$数组来记录一个字符是否被修改过，如果修改过那么这个字符无论如何都不可能被用来构成回文字符串。"></a>破坏字符串的时候，我们需要将原有的字符替换掉，但是这会引发一个新的问题：如果替换的字符又和其他字符构成了新的回文字符串，而每个字符只能被替换一次，所以显然这个字符不能随意替换。我们考虑一下，如果当前的字符串是a<sub>i</sub>，那么a<sub>i</sub>只要在替换前后不和a<sub>i-1</sub>,a<sub>i-2</sub>,a<sub>i+1</sub>,a<sub>i+2</sub>构成回文字符串就可以了，而a<sub>i-1</sub>,a<sub>i-2</sub>,a<sub>i+1</sub>,a<sub>i+2</sub>最多只包含4个字符，所以一定会有符合的字符，所以下面代码我用一个$vis$数组来记录一个字符是否被修改过，如果修改过那么这个字符无论如何都不可能被用来构成回文字符串。</h3><hr><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (s[i] == s[i - <span class="number">1</span>] &amp;&amp; !vis[i - <span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; s[i] == s[i - <span class="number">2</span>] &amp;&amp; !vis[i - <span class="number">2</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans += flag;</span><br><span class="line">vis[i] = flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1463-D. Pairs</title>
      <link href="/2021/01/17/CF1463-D.%20Pairs/"/>
      <url>/2021/01/17/CF1463-D.%20Pairs/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="有从-1-到-2n-一共-2n-个数字，让你将这-2n-个数字分成-n-组，每组有两个数字。对于这-n-组数字，你可以从中挑选-x-组做-min-操作，其他的-n-x-组中做-max-操作，这样就可以得到一个新的数组-b-；-现在题目给你得到的数组-b-，问你可以有多少不同的-x-使得可以得到数组-b-。"><a href="#有从-1-到-2n-一共-2n-个数字，让你将这-2n-个数字分成-n-组，每组有两个数字。对于这-n-组数字，你可以从中挑选-x-组做-min-操作，其他的-n-x-组中做-max-操作，这样就可以得到一个新的数组-b-；-现在题目给你得到的数组-b-，问你可以有多少不同的-x-使得可以得到数组-b-。" class="headerlink" title="有从$1$到$2n$一共$2n$个数字，让你将这$2n$个数字分成$n$组，每组有两个数字。对于这$n$组数字，你可以从中挑选$x$组做$min$操作，其他的$n-x$组中做$max$操作，这样就可以得到一个新的数组$b$； 现在题目给你得到的数组$b$，问你可以有多少不同的$x$使得可以得到数组$b$。"></a>有从$1$到$2n$一共$2n$个数字，让你将这$2n$个数字分成$n$组，每组有两个数字。对于这$n$组数字，你可以从中挑选$x$组做$min$操作，其他的$n-x$组中做$max$操作，这样就可以得到一个新的数组$b$； 现在题目给你得到的数组$b$，问你可以有多少不同的$x$使得可以得到数组$b$。</h3><hr><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="我们从这-2n-个数字中去掉数组-b-中的数，剩下的就是数组-a-中的数。对-a-，-b-数组排序之后，我们现在先枚举每个-x-让-a-中最大的-x-个数字从小到达与-b-中最小的x个数字从小到大组合，让-a-中剩余的-n-x-个数字从小到大与-b-中剩余的-n-x-个数字从小到大组合（类似于贪心的思想），这个应该是最优的情况，如果这样还是不能通过前-x-个取-min-后-n-x-取-max-得到数组-b-，那么对于这个-x-无论你再怎么组合都不可能得到数组-b-。"><a href="#我们从这-2n-个数字中去掉数组-b-中的数，剩下的就是数组-a-中的数。对-a-，-b-数组排序之后，我们现在先枚举每个-x-让-a-中最大的-x-个数字从小到达与-b-中最小的x个数字从小到大组合，让-a-中剩余的-n-x-个数字从小到大与-b-中剩余的-n-x-个数字从小到大组合（类似于贪心的思想），这个应该是最优的情况，如果这样还是不能通过前-x-个取-min-后-n-x-取-max-得到数组-b-，那么对于这个-x-无论你再怎么组合都不可能得到数组-b-。" class="headerlink" title="我们从这$2n$个数字中去掉数组$b$中的数，剩下的就是数组$a$中的数。对$a$，$b$数组排序之后，我们现在先枚举每个$x$让$a$中最大的$x$个数字从小到达与$b$中最小的x个数字从小到大组合，让$a$中剩余的$n-x$个数字从小到大与$b$中剩余的$n-x$个数字从小到大组合（类似于贪心的思想），这个应该是最优的情况，如果这样还是不能通过前$x$个取$min$后$n-x$取$max$得到数组$b$，那么对于这个$x$无论你再怎么组合都不可能得到数组$b$。"></a>我们从这$2n$个数字中去掉数组$b$中的数，剩下的就是数组$a$中的数。对$a$，$b$数组排序之后，我们现在先枚举每个$x$让$a$中最大的$x$个数字从小到达与$b$中最小的x个数字从小到大组合，让$a$中剩余的$n-x$个数字从小到大与$b$中剩余的$n-x$个数字从小到大组合（类似于贪心的思想），这个应该是最优的情况，如果这样还是不能通过前$x$个取$min$后$n-x$取$max$得到数组$b$，那么对于这个$x$无论你再怎么组合都不可能得到数组$b$。</h3><h3 id="从理论上来说上面这种枚举-贪心的方法肯定能得到最终的答案，但是时间复杂度达到了-o-n-2-，这是不能接受的。我们再仔细分析一下，会发现符合要求的-x-是连续的、在一个区间里面的，原因如下："><a href="#从理论上来说上面这种枚举-贪心的方法肯定能得到最终的答案，但是时间复杂度达到了-o-n-2-，这是不能接受的。我们再仔细分析一下，会发现符合要求的-x-是连续的、在一个区间里面的，原因如下：" class="headerlink" title="从理论上来说上面这种枚举+贪心的方法肯定能得到最终的答案，但是时间复杂度达到了$o(n^2)$，这是不能接受的。我们再仔细分析一下，会发现符合要求的$x$是连续的、在一个区间里面的，原因如下："></a>从理论上来说上面这种枚举+贪心的方法肯定能得到最终的答案，但是时间复杂度达到了$o(n^2)$，这是不能接受的。我们再仔细分析一下，会发现符合要求的$x$是连续的、在一个区间里面的，原因如下：</h3><h4 id="我们假设符合要求的-x-的区间为-L-R-。现在我们将-x-R-情况对应的组合进行操作可以得到-x-R-1-的情况：将数组-a-中-n-x-个最小的数字中最大的一个数字（称它为-i-）与数组-b-中-x-个最小的数字中最小的一个数字（称它为-j-）进行组合，这时候一定是因为-i-lt-j-从而取-min-操作时不能得到-j-所以不符合条件。而对于之后的-x-R-1-…-x-n-的情况，-b-中-x-个数字最小的数字中最小的数字是不变的，而-a-中-x-个最小的数字是不断变小的，所以之后的情况也都是不符合的。同理我们也可以从-x-L-1-…-x-0-这些情况中得到同样的结论。"><a href="#我们假设符合要求的-x-的区间为-L-R-。现在我们将-x-R-情况对应的组合进行操作可以得到-x-R-1-的情况：将数组-a-中-n-x-个最小的数字中最大的一个数字（称它为-i-）与数组-b-中-x-个最小的数字中最小的一个数字（称它为-j-）进行组合，这时候一定是因为-i-lt-j-从而取-min-操作时不能得到-j-所以不符合条件。而对于之后的-x-R-1-…-x-n-的情况，-b-中-x-个数字最小的数字中最小的数字是不变的，而-a-中-x-个最小的数字是不断变小的，所以之后的情况也都是不符合的。同理我们也可以从-x-L-1-…-x-0-这些情况中得到同样的结论。" class="headerlink" title="我们假设符合要求的$x$的区间为$[L, R]$。现在我们将$x=R$情况对应的组合进行操作可以得到$x=R+1$的情况：将数组$a$中$n-x$个最小的数字中最大的一个数字（称它为$i$）与数组$b$中$x$个最小的数字中最小的一个数字（称它为$j$）进行组合，这时候一定是因为$i&lt;j$从而取$min$操作时不能得到$j$所以不符合条件。而对于之后的$x=R+1, …, x=n$的情况，$b$中$x$个数字最小的数字中最小的数字是不变的，而$a$中$x$个最小的数字是不断变小的，所以之后的情况也都是不符合的。同理我们也可以从$x=L-1,…, x=0$这些情况中得到同样的结论。"></a>我们假设符合要求的$x$的区间为$[L, R]$。现在我们将$x=R$情况对应的组合进行操作可以得到$x=R+1$的情况：将数组$a$中$n-x$个最小的数字中最大的一个数字（称它为$i$）与数组$b$中$x$个最小的数字中最小的一个数字（称它为$j$）进行组合，这时候一定是因为$i&lt;j$从而取$min$操作时不能得到$j$所以不符合条件。而对于之后的$x=R+1, …, x=n$的情况，$b$中$x$个数字最小的数字中最小的数字是不变的，而$a$中$x$个最小的数字是不断变小的，所以之后的情况也都是不符合的。同理我们也可以从$x=L-1,…, x=0$这些情况中得到同样的结论。</h4><h3 id="通过这个结论，我们可以通过两次二分查找，找到符合条件的-x-区间-L-R-的-L-和-R-，这样就可以将时间复杂度优化到-o-nlogn-。"><a href="#通过这个结论，我们可以通过两次二分查找，找到符合条件的-x-区间-L-R-的-L-和-R-，这样就可以将时间复杂度优化到-o-nlogn-。" class="headerlink" title="通过这个结论，我们可以通过两次二分查找，找到符合条件的$x$区间$[L, R]$的$L$和$R$，这样就可以将时间复杂度优化到$o(nlogn)$。"></a>通过这个结论，我们可以通过两次二分查找，找到符合条件的$x$区间$[L, R]$的$L$和$R$，这样就可以将时间复杂度优化到$o(nlogn)$。</h3><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> mid, <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 0 suit;  1 l = mid + 1; 2 r = mid - 1;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mid; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &gt; a[n - mid + i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - mid; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; b[mid + i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line">std::<span class="built_in">sort</span>(b, b + n);</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> == b[cur]) &#123;</span><br><span class="line">cur++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[tot++] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid, n) != <span class="number">1</span>) &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L = l;</span><br><span class="line">l = <span class="number">0</span>, r = n;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid, n) != <span class="number">2</span>) &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> R = r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, R - L + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1463-B. Find The Array</title>
      <link href="/2020/12/28/CF1463-B.%20Find%20The%20Array/"/>
      <url>/2020/12/28/CF1463-B.%20Find%20The%20Array/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由n个数组成的数组a，这个数组的元素和为S，要求你找出一个由n个数字组成数组b，这个数组满足："><a href="#给出一个由n个数组成的数组a，这个数组的元素和为S，要求你找出一个由n个数字组成数组b，这个数组满足：" class="headerlink" title="给出一个由n个数组成的数组a，这个数组的元素和为S，要求你找出一个由n个数字组成数组b，这个数组满足："></a>给出一个由n个数组成的数组a，这个数组的元素和为S，要求你找出一个由n个数字组成数组b，这个数组满足：</h3><ul><li><h4 id="数组中的每个数可以将他两边的数字整除或者被他两边的数字整除"><a href="#数组中的每个数可以将他两边的数字整除或者被他两边的数字整除" class="headerlink" title="数组中的每个数可以将他两边的数字整除或者被他两边的数字整除"></a>数组中的每个数可以将他两边的数字整除或者被他两边的数字整除</h4></li><li><h4 id="数组b中每个位置的数字减去数组a中相应位置的数字的绝对值和的二倍小于等于S"><a href="#数组b中每个位置的数字减去数组a中相应位置的数字的绝对值和的二倍小于等于S" class="headerlink" title="数组b中每个位置的数字减去数组a中相应位置的数字的绝对值和的二倍小于等于S"></a>数组b中每个位置的数字减去数组a中相应位置的数字的绝对值和的二倍小于等于S</h4></li></ul><h3 id="输出任意一个满足的数组b"><a href="#输出任意一个满足的数组b" class="headerlink" title="输出任意一个满足的数组b"></a>输出任意一个满足的数组b</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="考虑到1可以整除任何数字，那么可以让1作为桥梁，两边可以放置任意数字就可以构造出一个符合第一个要求的数组b，之后也可以按照这个思路进行构造。"><a href="#考虑到1可以整除任何数字，那么可以让1作为桥梁，两边可以放置任意数字就可以构造出一个符合第一个要求的数组b，之后也可以按照这个思路进行构造。" class="headerlink" title="考虑到1可以整除任何数字，那么可以让1作为桥梁，两边可以放置任意数字就可以构造出一个符合第一个要求的数组b，之后也可以按照这个思路进行构造。"></a>考虑到1可以整除任何数字，那么可以让1作为桥梁，两边可以放置任意数字就可以构造出一个符合第一个要求的数组b，之后也可以按照这个思路进行构造。</h3><h3 id="现在我们可以想到，让较小的数字减去1，让较大的数字减去我们任意放置的数字，这样可以让最终求出来的和尽量小，那么这个任意放置的数字是多少的时候可以让最终求出来的和尽量小呢？让较大的数字减去他自己是最小的。"><a href="#现在我们可以想到，让较小的数字减去1，让较大的数字减去我们任意放置的数字，这样可以让最终求出来的和尽量小，那么这个任意放置的数字是多少的时候可以让最终求出来的和尽量小呢？让较大的数字减去他自己是最小的。" class="headerlink" title="现在我们可以想到，让较小的数字减去1，让较大的数字减去我们任意放置的数字，这样可以让最终求出来的和尽量小，那么这个任意放置的数字是多少的时候可以让最终求出来的和尽量小呢？让较大的数字减去他自己是最小的。"></a>现在我们可以想到，让较小的数字减去1，让较大的数字减去我们任意放置的数字，这样可以让最终求出来的和尽量小，那么这个任意放置的数字是多少的时候可以让最终求出来的和尽量小呢？让较大的数字减去他自己是最小的。</h3><h3 id="最后要考虑的是，我们应该把1这个跳板放在什么位置呢？我们可以按照数组a下表的奇偶统计他们和分别是多少，这样将1放在和较小的位置上。比如奇数位置上和较小，那么构造出来的b数组就是-a-0-1-a-2-1-a-4-1…-同理偶数。"><a href="#最后要考虑的是，我们应该把1这个跳板放在什么位置呢？我们可以按照数组a下表的奇偶统计他们和分别是多少，这样将1放在和较小的位置上。比如奇数位置上和较小，那么构造出来的b数组就是-a-0-1-a-2-1-a-4-1…-同理偶数。" class="headerlink" title="最后要考虑的是，我们应该把1这个跳板放在什么位置呢？我们可以按照数组a下表的奇偶统计他们和分别是多少，这样将1放在和较小的位置上。比如奇数位置上和较小，那么构造出来的b数组就是$\{a_0, 1, a_2, 1, a_4, 1…\}$, 同理偶数。"></a>最后要考虑的是，我们应该把1这个跳板放在什么位置呢？我们可以按照数组a下表的奇偶统计他们和分别是多少，这样将1放在和较小的位置上。比如奇数位置上和较小，那么构造出来的b数组就是$\{a_0, 1, a_2, 1, a_4, 1…\}$, 同理偶数。</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        ll t[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">            t[i &amp; <span class="number">1</span>] += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[<span class="number">0</span>] &gt; t[<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">printf</span> (<span class="string">&quot;%lld%c&quot;</span>, i &amp; <span class="number">1</span> ? <span class="number">1</span> : a[i], <span class="string">&quot; \n&quot;</span> [i == n - <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span> (<span class="string">&quot;%lld%c&quot;</span>, i &amp; <span class="number">1</span> ? a[i] : <span class="number">1</span>, <span class="string">&quot; \n&quot;</span> [i == n - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1463-C. Busy Robot</title>
      <link href="/2020/12/28/CF1463-C.%20Busy%20Robot/"/>
      <url>/2020/12/28/CF1463-C.%20Busy%20Robot/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="你有一个机器人，这个机器人在一维坐标轴上移动。你可以给这个机器人下达指令，指令的形式为-t-i-x-i-意味着机器人在第-t-i-秒的时候获得一条指令，此时这个机器人以-1-s-的速度从现在的位置开始向-x-i-移动。若机器人执行当前指令的过程中收到其他命令，那么其他命令会被忽略。"><a href="#你有一个机器人，这个机器人在一维坐标轴上移动。你可以给这个机器人下达指令，指令的形式为-t-i-x-i-意味着机器人在第-t-i-秒的时候获得一条指令，此时这个机器人以-1-s-的速度从现在的位置开始向-x-i-移动。若机器人执行当前指令的过程中收到其他命令，那么其他命令会被忽略。" class="headerlink" title="你有一个机器人，这个机器人在一维坐标轴上移动。你可以给这个机器人下达指令，指令的形式为 $t_i, x_i$ ,意味着机器人在第$t_i$秒的时候获得一条指令，此时这个机器人以$1/s$的速度从现在的位置开始向$x_i$移动。若机器人执行当前指令的过程中收到其他命令，那么其他命令会被忽略。"></a>你有一个机器人，这个机器人在一维坐标轴上移动。你可以给这个机器人下达指令，指令的形式为 $t_i, x_i$ ,意味着机器人在第$t_i$秒的时候获得一条指令，此时这个机器人以$1/s$的速度从现在的位置开始向$x_i$移动。若机器人执行当前指令的过程中收到其他命令，那么其他命令会被忽略。</h3><h3 id="现在问你给出的指令中被成功执行的命令有几条，被成功执行的命令的定义并不是字面意义上的成功之行，题目给出的成功之行命令的条件为："><a href="#现在问你给出的指令中被成功执行的命令有几条，被成功执行的命令的定义并不是字面意义上的成功之行，题目给出的成功之行命令的条件为：" class="headerlink" title="现在问你给出的指令中被成功执行的命令有几条，被成功执行的命令的定义并不是字面意义上的成功之行，题目给出的成功之行命令的条件为："></a>现在问你给出的指令中被成功执行的命令有几条，被成功执行的命令的定义并不是字面意义上的成功之行，题目给出的成功之行命令的条件为：</h3><h3 id="假设当前命令为-t-i-x-i-若机器人在-t-i-到-t-i-1-这个时间区间（包括边界）内到达过-x-i-这个位置，则称这条命令被成功执行。"><a href="#假设当前命令为-t-i-x-i-若机器人在-t-i-到-t-i-1-这个时间区间（包括边界）内到达过-x-i-这个位置，则称这条命令被成功执行。" class="headerlink" title="假设当前命令为 $t_i, x_i$ , 若机器人在 $t_i$ 到 $t_{i+1}$这个时间区间（包括边界）内到达过 $x_i$ 这个位置，则称这条命令被成功执行。"></a>假设当前命令为 $t_i, x_i$ , 若机器人在 $t_i$ 到 $t_{i+1}$这个时间区间（包括边界）内到达过 $x_i$ 这个位置，则称这条命令被成功执行。</h3><h3 id="对于最后一条命令-t-n-x-n-，我们认为有一个-t-n-1-∞-。"><a href="#对于最后一条命令-t-n-x-n-，我们认为有一个-t-n-1-∞-。" class="headerlink" title="对于最后一条命令 $t_n, x_n$ ，我们认为有一个$t_{n+1}=∞$ 。"></a>对于最后一条命令 $t_n, x_n$ ，我们认为有一个$t_{n+1}=∞$ 。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="从第一条命令开始，我们记录它的起始时间-start-time-，结束时间-end-time-，之后排着扫命令："><a href="#从第一条命令开始，我们记录它的起始时间-start-time-，结束时间-end-time-，之后排着扫命令：" class="headerlink" title="从第一条命令开始，我们记录它的起始时间 $start_time$ ，结束时间 $end_time$ ，之后排着扫命令："></a>从第一条命令开始，我们记录它的起始时间 $start_time$ ，结束时间 $end_time$ ，之后排着扫命令：</h3><ul><li><h4 id="若命令的-t-i-小于-start-end-那么就算出-t-i-时机器人的位置和-min-t-i-1-end-time-时机器人的位置，若-x-i-在这个区间内，那么这条命令就算被成功执行了；"><a href="#若命令的-t-i-小于-start-end-那么就算出-t-i-时机器人的位置和-min-t-i-1-end-time-时机器人的位置，若-x-i-在这个区间内，那么这条命令就算被成功执行了；" class="headerlink" title="若命令的$t_i$ 小于$start_end$ , 那么就算出 $t_i$ 时机器人的位置和 $min(t_{i+1}, end_time)$ 时机器人的位置，若 $x_i$ 在这个区间内，那么这条命令就算被成功执行了；"></a>若命令的$t_i$ 小于$start_end$ , 那么就算出 $t_i$ 时机器人的位置和 $min(t_{i+1}, end_time)$ 时机器人的位置，若 $x_i$ 在这个区间内，那么这条命令就算被成功执行了；</h4></li><li><h4 id="若命令的-t-i-大于等于-start-time-那么就更新-start-time-和-end-time-。"><a href="#若命令的-t-i-大于等于-start-time-那么就更新-start-time-和-end-time-。" class="headerlink" title="若命令的 $t_i$ 大于等于 $start_time$ , 那么就更新$start_time$ 和 $end_time$ 。"></a>若命令的 $t_i$ 大于等于 $start_time$ , 那么就更新$start_time$ 和 $end_time$ 。</h4></li></ul><h3 id="本题有一些处理上的小技巧，可以在代码中看到。"><a href="#本题有一些处理上的小技巧，可以在代码中看到。" class="headerlink" title="本题有一些处理上的小技巧，可以在代码中看到。"></a>本题有一些处理上的小技巧，可以在代码中看到。</h3><h3 id="此外这道题个地方需要注意：题目里说的认为有一个-t-n-1-∞-这里我最开始的代码无穷取了-0x3F3F3F3F-但是这里无穷取这个值会出问题，因为他的范围是从-10-9-lt-x-i-lt-10-9-若数据给了从最左边到最右边是最后一个指令，那么取这个值会导致它不能走到最右边。（这个地方卡了我一下午。。）"><a href="#此外这道题个地方需要注意：题目里说的认为有一个-t-n-1-∞-这里我最开始的代码无穷取了-0x3F3F3F3F-但是这里无穷取这个值会出问题，因为他的范围是从-10-9-lt-x-i-lt-10-9-若数据给了从最左边到最右边是最后一个指令，那么取这个值会导致它不能走到最右边。（这个地方卡了我一下午。。）" class="headerlink" title="此外这道题个地方需要注意：题目里说的认为有一个 $t_{n+1}=∞$ , 这里我最开始的代码无穷取了 $0x3F3F3F3F$ , 但是这里无穷取这个值会出问题，因为他的范围是从 $-10^9 &lt;= x_i &lt;= 10^9$, 若数据给了从最左边到最右边是最后一个指令，那么取这个值会导致它不能走到最右边。（这个地方卡了我一下午。。）"></a>此外这道题个地方需要注意：题目里说的认为有一个 $t_{n+1}=∞$ , 这里我最开始的代码无穷取了 $0x3F3F3F3F$ , 但是这里无穷取这个值会出问题，因为他的范围是从 $-10^9 &lt;= x_i &lt;= 10^9$, 若数据给了从最左边到最右边是最后一个指令，那么取这个值会导致它不能走到最右边。（这个地方卡了我一下午。。）</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ll t, p;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%lld %lld&quot;</span>, &amp;a[i].t, &amp;a[i].p);</span><br><span class="line">        &#125;</span><br><span class="line">        a[n].t = inf;</span><br><span class="line">        ll start_pos = <span class="number">0</span>;</span><br><span class="line">        ll end_pos = <span class="number">0</span>;</span><br><span class="line">        ll start_time = <span class="number">0</span>;</span><br><span class="line">        ll end_time = <span class="number">-1</span>;</span><br><span class="line">        ll dir = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].t &gt;= end_time) &#123;</span><br><span class="line">                start_pos = end_pos;</span><br><span class="line">                end_pos = a[i].p;</span><br><span class="line">                start_time = a[i].t;</span><br><span class="line">                end_time = start_time + std::<span class="built_in">abs</span>(a[i].p - start_pos);</span><br><span class="line">                dir = (a[i].p - start_pos) == <span class="number">0</span> ? <span class="number">0</span> : (a[i].p - start_pos) / std::<span class="built_in">abs</span>(a[i].p - start_pos);</span><br><span class="line">            &#125;</span><br><span class="line">            ll s = start_pos + (a[i].t - start_time) * dir;</span><br><span class="line">            ll t = start_pos + (a[i + <span class="number">1</span>].t - start_time) * dir;</span><br><span class="line">            <span class="keyword">if</span> (a[i + <span class="number">1</span>].t &gt; end_time) &#123;</span><br><span class="line">                t = end_pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s &gt; t) std::<span class="built_in">swap</span> (s, t);</span><br><span class="line">            <span class="keyword">if</span> (a[i].p &gt;= s &amp;&amp; a[i].p &lt;= t) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1463-A. Dungeon</title>
      <link href="/2020/12/28/CF1463-A.%20Dungeon/"/>
      <url>/2020/12/28/CF1463-A.%20Dungeon/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="你面前有三个怪物，他们分别有a-b-c点血量。现在你可以指定一个怪物，用大炮向他们射击，之后该怪物就会掉一滴血。每七次射击就会使得炮弹威力加强一次，即第7，-14，-21次射击的时候炮弹威力会被加强，加强的炮弹可以对三个怪物分别造成一点伤害。现在问你可不可能在某次被加强的炮弹发射后，使得所有的怪物血量变成0。"><a href="#你面前有三个怪物，他们分别有a-b-c点血量。现在你可以指定一个怪物，用大炮向他们射击，之后该怪物就会掉一滴血。每七次射击就会使得炮弹威力加强一次，即第7，-14，-21次射击的时候炮弹威力会被加强，加强的炮弹可以对三个怪物分别造成一点伤害。现在问你可不可能在某次被加强的炮弹发射后，使得所有的怪物血量变成0。" class="headerlink" title="你面前有三个怪物，他们分别有a, b, c点血量。现在你可以指定一个怪物，用大炮向他们射击，之后该怪物就会掉一滴血。每七次射击就会使得炮弹威力加强一次，即第7， 14， 21次射击的时候炮弹威力会被加强，加强的炮弹可以对三个怪物分别造成一点伤害。现在问你可不可能在某次被加强的炮弹发射后，使得所有的怪物血量变成0。"></a>你面前有三个怪物，他们分别有a, b, c点血量。现在你可以指定一个怪物，用大炮向他们射击，之后该怪物就会掉一滴血。每七次射击就会使得炮弹威力加强一次，即第7， 14， 21次射击的时候炮弹威力会被加强，加强的炮弹可以对三个怪物分别造成一点伤害。现在问你可不可能在某次被加强的炮弹发射后，使得所有的怪物血量变成0。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="首先每七次射击，总共会造成9点伤害（6-3），因此如果要让所有怪物在某次被加强的炮弹发射后血量变为0，则需要他们的血量和为9的倍数。其次每个怪物的血量不能少于被加强的炮弹的发射个数，因为每次被加强的炮弹发射后所有的怪物血量都会减一，而血量不会不会为负数。"><a href="#首先每七次射击，总共会造成9点伤害（6-3），因此如果要让所有怪物在某次被加强的炮弹发射后血量变为0，则需要他们的血量和为9的倍数。其次每个怪物的血量不能少于被加强的炮弹的发射个数，因为每次被加强的炮弹发射后所有的怪物血量都会减一，而血量不会不会为负数。" class="headerlink" title="首先每七次射击，总共会造成9点伤害（6 + 3），因此如果要让所有怪物在某次被加强的炮弹发射后血量变为0，则需要他们的血量和为9的倍数。其次每个怪物的血量不能少于被加强的炮弹的发射个数，因为每次被加强的炮弹发射后所有的怪物血量都会减一，而血量不会不会为负数。"></a>首先每七次射击，总共会造成9点伤害（6 + 3），因此如果要让所有怪物在某次被加强的炮弹发射后血量变为0，则需要他们的血量和为9的倍数。其次每个怪物的血量不能少于被加强的炮弹的发射个数，因为每次被加强的炮弹发射后所有的怪物血量都会减一，而血量不会不会为负数。</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, a[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tot = <span class="number">0</span>, minn = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">            tot += a[i];</span><br><span class="line">            minn = std::<span class="built_in">min</span> (minn, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minn &lt; tot / <span class="number">9</span> || tot % <span class="number">9</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1462-E2. Close Tuples (hard version)</title>
      <link href="/2020/12/28/CF1462-E2.%20Close%20Tuples%20(hard%20version)/"/>
      <url>/2020/12/28/CF1462-E2.%20Close%20Tuples%20(hard%20version)/</url>
      
        <content type="html"><![CDATA[<p>本题为hard版，还有一个easy版，区别在于k和m的取值不同。</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由n个数字组成的数组-a-。现在定义一种子集为-A-1-A-2-A-3-…-A-m-，使得这个子集中的最大值和最小值的差值不超过k，其中m和k是给出的。现在问你这种子集有几个。"><a href="#给出一个由n个数字组成的数组-a-。现在定义一种子集为-A-1-A-2-A-3-…-A-m-，使得这个子集中的最大值和最小值的差值不超过k，其中m和k是给出的。现在问你这种子集有几个。" class="headerlink" title="给出一个由n个数字组成的数组 $a$。现在定义一种子集为$\{A_1, A_2, A_3, …, A_m\}$，使得这个子集中的最大值和最小值的差值不超过k，其中m和k是给出的。现在问你这种子集有几个。"></a>给出一个由n个数字组成的数组 $a$。现在定义一种子集为$\{A_1, A_2, A_3, …, A_m\}$，使得这个子集中的最大值和最小值的差值不超过k，其中m和k是给出的。现在问你这种子集有几个。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="对给出的数组进行排序，用-for-循环枚举子集中的-A-1-，之后用upper-bound找到数组中第一个数字，使得这个数字减去-A-1-大于k。若这个数字和-A-1-之间元素的个数大于-m-1-，那么利用组合数-C-n-m-就可以求出部分答案。最后将每一部分的答案加起来就可以得到最终答案。"><a href="#对给出的数组进行排序，用-for-循环枚举子集中的-A-1-，之后用upper-bound找到数组中第一个数字，使得这个数字减去-A-1-大于k。若这个数字和-A-1-之间元素的个数大于-m-1-，那么利用组合数-C-n-m-就可以求出部分答案。最后将每一部分的答案加起来就可以得到最终答案。" class="headerlink" title="对给出的数组进行排序，用$for$循环枚举子集中的$A_1$，之后用upper_bound找到数组中第一个数字，使得这个数字减去$A_1$大于k。若这个数字和$A_1$之间元素的个数大于$m - 1$，那么利用组合数$C_n^m$就可以求出部分答案。最后将每一部分的答案加起来就可以得到最终答案。"></a>对给出的数组进行排序，用$for$循环枚举子集中的$A_1$，之后用upper_bound找到数组中第一个数字，使得这个数字减去$A_1$大于k。若这个数字和$A_1$之间元素的个数大于$m - 1$，那么利用组合数$C_n^m$就可以求出部分答案。最后将每一部分的答案加起来就可以得到最终答案。</h3><h2 id="额外知识："><a href="#额外知识：" class="headerlink" title="额外知识："></a>额外知识：</h2><h3 id="由于题目要求取模，但是组合数中却有除法，不能直接取模，所以需要用到逆元。-组合数取模板子"><a href="#由于题目要求取模，但是组合数中却有除法，不能直接取模，所以需要用到逆元。-组合数取模板子" class="headerlink" title="由于题目要求取模，但是组合数中却有除法，不能直接取模，所以需要用到逆元。 组合数取模板子"></a>由于题目要求取模，但是组合数中却有除法，不能直接取模，所以需要用到逆元。 <a href="https://www.cnblogs.com/chantmee/p/14167344.html">组合数取模板子</a></h3><h2 id="AC代码（直接用板子）："><a href="#AC代码（直接用板子）：" class="headerlink" title="AC代码（直接用板子）："></a>AC代码（直接用板子）：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll f[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>, base = a;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base * base % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2e5</span>; i++) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">cal</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * f[n] * <span class="built_in">qpow</span>(f[m], mod - <span class="number">2</span>) % mod * <span class="built_in">qpow</span>(f[n - m], mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> T, n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span> (a, a + n);</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            p = (<span class="keyword">int</span>)(std::<span class="built_in">upper_bound</span>(a, a + n, a[i] + k) - a);</span><br><span class="line">            <span class="keyword">if</span> (p - i &gt;= m) &#123;</span><br><span class="line">                ans = ans + <span class="built_in">cal</span>(p - i - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">                ans = ans % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1462-F. The Treasure of The Segments</title>
      <link href="/2020/12/28/CF1462-F.%20The%20Treasure%20of%20The%20Segments/"/>
      <url>/2020/12/28/CF1462-F.%20The%20Treasure%20of%20The%20Segments/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出n个线段组成的集合，第i个线段用-l-i-r-i-表示线段从坐标轴的点-l-i-横跨到点-r-i-。现在你可以删除其中的一些线段，使得剩下的线段组成的集合中至少存在一个线段满足：这个线段与所有其他线段都相交。现在问你最少需要删除几条边可以得到满足要求的线段集合。"><a href="#给出n个线段组成的集合，第i个线段用-l-i-r-i-表示线段从坐标轴的点-l-i-横跨到点-r-i-。现在你可以删除其中的一些线段，使得剩下的线段组成的集合中至少存在一个线段满足：这个线段与所有其他线段都相交。现在问你最少需要删除几条边可以得到满足要求的线段集合。" class="headerlink" title="给出n个线段组成的集合，第i个线段用 $\{l_i, r_i\}$ 表示线段从坐标轴的点$l_i$横跨到点$r_i$。现在你可以删除其中的一些线段，使得剩下的线段组成的集合中至少存在一个线段满足：这个线段与所有其他线段都相交。现在问你最少需要删除几条边可以得到满足要求的线段集合。"></a>给出n个线段组成的集合，第i个线段用 $\{l_i, r_i\}$ 表示线段从坐标轴的点$l_i$横跨到点$r_i$。现在你可以删除其中的一些线段，使得剩下的线段组成的集合中至少存在一个线段满足：这个线段与所有其他线段都相交。现在问你最少需要删除几条边可以得到满足要求的线段集合。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="我们枚举每个线段，让这个线段能够与所有其他线段相交，这时候我们只需要算出不和这个边相交的线段的个数。算这个的方法也很简单，可以想一下什么情况下两个线段-l-1-r-1-l-2-r-2-不相交，也就是-l-2-gt-r1-或者-r-2-lt-l-1-的情况下，两个边就不会相交。所以我们可以用两个数组来分别存储边的-l-和-r-，排序之后，就可以用二分来快速找到不与当前枚举的边相交的边的个数。"><a href="#我们枚举每个线段，让这个线段能够与所有其他线段相交，这时候我们只需要算出不和这个边相交的线段的个数。算这个的方法也很简单，可以想一下什么情况下两个线段-l-1-r-1-l-2-r-2-不相交，也就是-l-2-gt-r1-或者-r-2-lt-l-1-的情况下，两个边就不会相交。所以我们可以用两个数组来分别存储边的-l-和-r-，排序之后，就可以用二分来快速找到不与当前枚举的边相交的边的个数。" class="headerlink" title="我们枚举每个线段，让这个线段能够与所有其他线段相交，这时候我们只需要算出不和这个边相交的线段的个数。算这个的方法也很简单，可以想一下什么情况下两个线段 $\{l_1, r_1\}$ $\{l_2, r_2\}$ 不相交，也就是 $l_2 &gt; r1$ 或者 $r_2 &lt; l_1$ 的情况下，两个边就不会相交。所以我们可以用两个数组来分别存储边的$l$ 和$r$，排序之后，就可以用二分来快速找到不与当前枚举的边相交的边的个数。"></a>我们枚举每个线段，让这个线段能够与所有其他线段相交，这时候我们只需要算出不和这个边相交的线段的个数。算这个的方法也很简单，可以想一下什么情况下两个线段 $\{l_1, r_1\}$ $\{l_2, r_2\}$ 不相交，也就是 $l_2 &gt; r1$ 或者 $r_2 &lt; l_1$ 的情况下，两个边就不会相交。所以我们可以用两个数组来分别存储边的$l$ 和$r$，排序之后，就可以用二分来快速找到不与当前枚举的边相交的边的个数。</h3><h2 id="小注："><a href="#小注：" class="headerlink" title="小注："></a>小注：</h2><h3 id="之前有看其他博主写的博客，有提到二分比较难写，主要是因为没有善用-lower-bound-和-upper-bound-。"><a href="#之前有看其他博主写的博客，有提到二分比较难写，主要是因为没有善用-lower-bound-和-upper-bound-。" class="headerlink" title="之前有看其他博主写的博客，有提到二分比较难写，主要是因为没有善用$lower_bound$和$upper_bound$。"></a>之前有看其他博主写的博客，有提到二分比较难写，主要是因为没有善用$lower_bound$和$upper_bound$。</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">std::pii a[maxn];</span><br><span class="line"><span class="keyword">int</span> l[maxn], r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;a[i].fr, &amp;a[i].sc);</span><br><span class="line">            l[i] = a[i].fr;</span><br><span class="line">            r[i] = a[i].sc;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span> (l, l + n);</span><br><span class="line">        std::<span class="built_in">sort</span> (r, r + n);</span><br><span class="line">        <span class="keyword">int</span> ans = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            tot = <span class="number">0</span>;</span><br><span class="line">            tot += (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(r, r + n, a[i].fr) - r);</span><br><span class="line">            tot += n - (<span class="keyword">int</span>)(std::<span class="built_in">upper_bound</span>(l, l + n, a[i].sc) - l);</span><br><span class="line">            ans = std::<span class="built_in">min</span> (ans, tot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="这题一开始没想到那么简洁的做法，最开始用线段树维护不和当前枚举的线段相交的个数，结果。。。T了。"><a href="#这题一开始没想到那么简洁的做法，最开始用线段树维护不和当前枚举的线段相交的个数，结果。。。T了。" class="headerlink" title="这题一开始没想到那么简洁的做法，最开始用线段树维护不和当前枚举的线段相交的个数，结果。。。T了。"></a>这题一开始没想到那么简洁的做法，最开始用线段树维护不和当前枚举的线段相交的个数，结果。。。T了。</h3><h2 id="杀鸡用牛刀超时未AC代码："><a href="#杀鸡用牛刀超时未AC代码：" class="headerlink" title="杀鸡用牛刀超时未AC代码："></a>杀鸡用牛刀超时未AC代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(a, b) make_pair(a, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">std::pii in[maxn], num[maxn];</span><br><span class="line"><span class="keyword">int</span> lisan[maxn &lt;&lt; <span class="number">1</span>], tot_lisan = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">seg_tree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span> (tree, <span class="number">0</span>, <span class="keyword">sizeof</span> tree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_up</span> <span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        tree[p] = tree[p &lt;&lt; <span class="number">1</span>] + tree[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> idx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tree[p]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt;= mid) &#123;</span><br><span class="line">                <span class="built_in">update</span> (p &lt;&lt; <span class="number">1</span>, l, mid, idx);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">update</span> (p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, idx);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">push_up</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span> <span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r &lt; ql || l &gt; qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[p];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">            ans += <span class="built_in">query</span> (p &lt;&lt; <span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">            ans += <span class="built_in">query</span> (p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t1, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n;</span><br><span class="line">    <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        t1.<span class="built_in">init</span>();</span><br><span class="line">        t2.<span class="built_in">init</span>();</span><br><span class="line">        tot_lisan = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span> (num , <span class="number">0</span>, <span class="keyword">sizeof</span> num);</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span> (<span class="string">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">            in[i] = std::<span class="built_in">mp</span>(l, r);</span><br><span class="line">            lisan[tot_lisan++] = l;</span><br><span class="line">            lisan[tot_lisan++] = r;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span> (lisan, lisan + tot_lisan);</span><br><span class="line">        std::<span class="built_in">sort</span> (in, in + n);</span><br><span class="line">        tot_lisan = (<span class="keyword">int</span>)(std::<span class="built_in">unique</span>(lisan, lisan + tot_lisan) - lisan);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pl = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(lisan, lisan + tot_lisan, in[i].fr) - lisan);</span><br><span class="line">            <span class="keyword">int</span> pr = (<span class="keyword">int</span>)(std::<span class="built_in">lower_bound</span>(lisan, lisan + tot_lisan, in[i].sc) - lisan);</span><br><span class="line">            num[i].fr = pl;</span><br><span class="line">            num[i].sc = pr;</span><br><span class="line">            t1.<span class="built_in">update</span> (<span class="number">1</span>, <span class="number">0</span>, tot_lisan, pl);</span><br><span class="line">            t2.<span class="built_in">update</span> (<span class="number">1</span>, <span class="number">0</span>, tot_lisan, pr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pl = num[i].fr;</span><br><span class="line">            <span class="keyword">int</span> pr = num[i].sc;</span><br><span class="line">            <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">            tot += t1.<span class="built_in">query</span> (<span class="number">1</span>, <span class="number">0</span>, tot_lisan, pr + <span class="number">1</span>, tot_lisan);</span><br><span class="line">            tot += t2.<span class="built_in">query</span> (<span class="number">1</span>, <span class="number">0</span>, tot_lisan, <span class="number">0</span>, pl - <span class="number">1</span>);</span><br><span class="line">            ans = std::<span class="built_in">min</span> (ans, tot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1462-C. Unique Number</title>
      <link href="/2020/12/28/CF1462-C.%20Unique%20Number/"/>
      <url>/2020/12/28/CF1462-C.%20Unique%20Number/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个数字x，让你找出一个由1到9这九个数字组成的数字，这个数字的每一位加起来等于x，并且1到9每个数字只能出现一次。若能找到这样的数字，输出这其中最小的一个，否则输出-1。"><a href="#给出一个数字x，让你找出一个由1到9这九个数字组成的数字，这个数字的每一位加起来等于x，并且1到9每个数字只能出现一次。若能找到这样的数字，输出这其中最小的一个，否则输出-1。" class="headerlink" title="给出一个数字x，让你找出一个由1到9这九个数字组成的数字，这个数字的每一位加起来等于x，并且1到9每个数字只能出现一次。若能找到这样的数字，输出这其中最小的一个，否则输出-1。"></a>给出一个数字x，让你找出一个由1到9这九个数字组成的数字，这个数字的每一位加起来等于x，并且1到9每个数字只能出现一次。若能找到这样的数字，输出这其中最小的一个，否则输出-1。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="利用二进制枚举，枚举每个1到9这九个数字是否出现。每次枚举若和等于x，则将被选中的数字从小到大排列，取得到的数字中最小的一个。若全部枚举完之后并没有找到符合要求的数字，则不存在这样的数字。由于枚举9个数字是否出现，所以最坏情况是-2-9-，也就是-1e3-的复杂度，必然不会超时。"><a href="#利用二进制枚举，枚举每个1到9这九个数字是否出现。每次枚举若和等于x，则将被选中的数字从小到大排列，取得到的数字中最小的一个。若全部枚举完之后并没有找到符合要求的数字，则不存在这样的数字。由于枚举9个数字是否出现，所以最坏情况是-2-9-，也就是-1e3-的复杂度，必然不会超时。" class="headerlink" title="利用二进制枚举，枚举每个1到9这九个数字是否出现。每次枚举若和等于x，则将被选中的数字从小到大排列，取得到的数字中最小的一个。若全部枚举完之后并没有找到符合要求的数字，则不存在这样的数字。由于枚举9个数字是否出现，所以最坏情况是$2^9$，也就是$1e3$的复杂度，必然不会超时。"></a>利用二进制枚举，枚举每个1到9这九个数字是否出现。每次枚举若和等于x，则将被选中的数字从小到大排列，取得到的数字中最小的一个。若全部枚举完之后并没有找到符合要求的数字，则不存在这样的数字。由于枚举9个数字是否出现，所以最坏情况是$2^9$，也就是$1e3$的复杂度，必然不会超时。</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">const int inf = 0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">    int T, x;</span><br><span class="line">    scanf (&quot;%d&quot;, &amp;T);</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        scanf (&quot;%d&quot;, &amp;x);</span><br><span class="line">        int ans = inf;</span><br><span class="line">        for (int i = 0; i &lt; (1 &lt;&lt; 9); i++) &#123;</span><br><span class="line">            int t = 0, s = 0;</span><br><span class="line">            for (int j = 0; j &lt; 9; j++) &#123;</span><br><span class="line">                if (i &amp; (1 &lt;&lt; j)) &#123;</span><br><span class="line">                    t = t + j + 1;</span><br><span class="line">                    s = s * 10 + j + 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (t == x) &#123;</span><br><span class="line">                ans = std::min(ans, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf (&quot;%d\n&quot;, ans == inf ? -1 : ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1462-D. Add to Neighbour and Remove</title>
      <link href="/2020/12/28/CF1462-D.%20Add%20to%20Neighbour%20and%20Remove/"/>
      <url>/2020/12/28/CF1462-D.%20Add%20to%20Neighbour%20and%20Remove/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1462/D">codeforces1462D</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由n个数组成的数组，现在你可以对这个数组进行如下操作：将数组中的一个元素加到这个元素的两边中的一边，然后将这个元素删掉。若该元素在最左边，那么该元素不能加到左边，因为它的左边已经没有元素了，同理最右边。现在问你最少几次这样的操作可以让整个数组的每个元素都相等。"><a href="#给出一个由n个数组成的数组，现在你可以对这个数组进行如下操作：将数组中的一个元素加到这个元素的两边中的一边，然后将这个元素删掉。若该元素在最左边，那么该元素不能加到左边，因为它的左边已经没有元素了，同理最右边。现在问你最少几次这样的操作可以让整个数组的每个元素都相等。" class="headerlink" title="给出一个由n个数组成的数组，现在你可以对这个数组进行如下操作：将数组中的一个元素加到这个元素的两边中的一边，然后将这个元素删掉。若该元素在最左边，那么该元素不能加到左边，因为它的左边已经没有元素了，同理最右边。现在问你最少几次这样的操作可以让整个数组的每个元素都相等。"></a>给出一个由n个数组成的数组，现在你可以对这个数组进行如下操作：将数组中的一个元素加到这个元素的两边中的一边，然后将这个元素删掉。若该元素在最左边，那么该元素不能加到左边，因为它的左边已经没有元素了，同理最右边。现在问你最少几次这样的操作可以让整个数组的每个元素都相等。</h3><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="由于该题目的数据范围并不是很大，只有-1e3-，所以可以用-n-2-的做法得出结果：求出这个数组的前缀和，我们枚举前-n-个数作为最终数组每个元素的大小-当找到第一个符合的前缀和-也就是可以通过划分这个数组，让这个数组的每个部分和都是当前枚举的前缀和的时候，可以保证其是最优解，当前的操作数就是答案。由于最差情况也可以通过全部合并得出，所以不存在没有结果的情况。"><a href="#由于该题目的数据范围并不是很大，只有-1e3-，所以可以用-n-2-的做法得出结果：求出这个数组的前缀和，我们枚举前-n-个数作为最终数组每个元素的大小-当找到第一个符合的前缀和-也就是可以通过划分这个数组，让这个数组的每个部分和都是当前枚举的前缀和的时候，可以保证其是最优解，当前的操作数就是答案。由于最差情况也可以通过全部合并得出，所以不存在没有结果的情况。" class="headerlink" title="由于该题目的数据范围并不是很大，只有$1e3$，所以可以用$n^2$的做法得出结果：求出这个数组的前缀和，我们枚举前$n$个数作为最终数组每个元素的大小,当找到第一个符合的前缀和,也就是可以通过划分这个数组，让这个数组的每个部分和都是当前枚举的前缀和的时候，可以保证其是最优解，当前的操作数就是答案。由于最差情况也可以通过全部合并得出，所以不存在没有结果的情况。"></a>由于该题目的数据范围并不是很大，只有$1e3$，所以可以用$n^2$的做法得出结果：求出这个数组的前缀和，我们枚举前$n$个数作为最终数组每个元素的大小,当找到第一个符合的前缀和,也就是可以通过划分这个数组，让这个数组的每个部分和都是当前枚举的前缀和的时候，可以保证其是最优解，当前的操作数就是答案。由于最差情况也可以通过全部合并得出，所以不存在没有结果的情况。</h3><h1 id="ac代码："><a href="#ac代码：" class="headerlink" title="ac代码："></a>ac代码：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line"></span><br><span class="line">const int maxn = 3e3 + 5;</span><br><span class="line"></span><br><span class="line">int a[maxn], pre[maxn];</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">    int T, n;</span><br><span class="line">    scanf (&quot;%d&quot;, &amp;T);</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        scanf (&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">            scanf (&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        memset (pre, 0, sizeof pre);</span><br><span class="line">        pre[0] = a[0];</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            pre[i] = pre[i - 1] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            int t = 0;</span><br><span class="line">            bool flag = false;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                t = t + a[j];</span><br><span class="line">                ans++;</span><br><span class="line">                if (t == pre[i]) &#123;</span><br><span class="line">                    t = 0;</span><br><span class="line">                    ans--;</span><br><span class="line">                    if (j == n - 1) flag = true;</span><br><span class="line">                &#125; else if (t &gt; pre[i]) break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (flag) break;</span><br><span class="line">            else ans = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        printf (&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1462-E1. Close Tuples (easy version)</title>
      <link href="/2020/12/28/CF1462-E1.%20Close%20Tuples%20(easy%20version)/"/>
      <url>/2020/12/28/CF1462-E1.%20Close%20Tuples%20(easy%20version)/</url>
      
        <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><h3 id="给出一个由n个数字组成的数组，先让你找出符合下列条件的子集的数量："><a href="#给出一个由n个数字组成的数组，先让你找出符合下列条件的子集的数量：" class="headerlink" title="给出一个由n个数字组成的数组，先让你找出符合下列条件的子集的数量："></a>给出一个由n个数字组成的数组，先让你找出符合下列条件的子集的数量：</h3><ul><li><h3 id="每个子集包含的数字个数为m-3"><a href="#每个子集包含的数字个数为m-3" class="headerlink" title="每个子集包含的数字个数为m = 3"></a>每个子集包含的数字个数为m = 3</h3></li><li><h3 id="这三个数字中的最大值减去最小值不超过k-2"><a href="#这三个数字中的最大值减去最小值不超过k-2" class="headerlink" title="这三个数字中的最大值减去最小值不超过k = 2"></a>这三个数字中的最大值减去最小值不超过k = 2</h3></li></ul><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="首先对给出的数组进行排序，现在假设这个数组为-a-，这个子集为-A-1-A-2-A-3-，那么我们每次枚举-A-1-，用一个指针记录数组中最后一个满足-a-p-A-1-的位置，那么如果-p-和-A-1-之间元素的个数n再加上1大于等于2，那么答案的总数就加上-C-n-2-。"><a href="#首先对给出的数组进行排序，现在假设这个数组为-a-，这个子集为-A-1-A-2-A-3-，那么我们每次枚举-A-1-，用一个指针记录数组中最后一个满足-a-p-A-1-的位置，那么如果-p-和-A-1-之间元素的个数n再加上1大于等于2，那么答案的总数就加上-C-n-2-。" class="headerlink" title="首先对给出的数组进行排序，现在假设这个数组为$a$，这个子集为$\{A_1, A_2, A_3\}$，那么我们每次枚举$A_1$，用一个指针记录数组中最后一个满足$a[p] - A_1$的位置，那么如果$p$和$A_1$之间元素的个数n再加上1大于等于2，那么答案的总数就加上$C_n^2$。"></a>首先对给出的数组进行排序，现在假设这个数组为$a$，这个子集为$\{A_1, A_2, A_3\}$，那么我们每次枚举$A_1$，用一个指针记录数组中最后一个满足$a[p] - A_1$的位置，那么如果$p$和$A_1$之间元素的个数n再加上1大于等于2，那么答案的总数就加上$C_n^2$。</h3><h3 id="这里有个地方需要注意，由于指针p指向的位置只会越来越靠后，所以p不用每次都从-A-1-的位置开始找，只需要从上一次p的位置开始往后找就可以了。我不会说因为这个我T了好几次的"><a href="#这里有个地方需要注意，由于指针p指向的位置只会越来越靠后，所以p不用每次都从-A-1-的位置开始找，只需要从上一次p的位置开始往后找就可以了。我不会说因为这个我T了好几次的" class="headerlink" title="这里有个地方需要注意，由于指针p指向的位置只会越来越靠后，所以p不用每次都从$A_1$的位置开始找，只需要从上一次p的位置开始往后找就可以了。我不会说因为这个我T了好几次的 :("></a>这里有个地方需要注意，由于指针p指向的位置只会越来越靠后，所以p不用每次都从$A_1$的位置开始找，只需要从上一次p的位置开始往后找就可以了。我不会说因为这个我T了好几次的 :(</h3><h2 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn = 2e5 + 5;</span><br><span class="line"></span><br><span class="line">int a[maxn];</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">    int T, n;</span><br><span class="line">    scanf (&quot;%d&quot;, &amp;T);</span><br><span class="line">    while (T--) &#123;</span><br><span class="line">        scanf (&quot;%d&quot;, &amp;n);</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            scanf (&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        std::sort (a, a + n);</span><br><span class="line">        ll p = 0, ans = 0;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            while (a[p + 1] - a[i] &lt;= 2 &amp;&amp; p + 1 &lt; n) &#123;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (p - i &gt;= 2) &#123;</span><br><span class="line">                ans = ans + (p - i) * (p - i - 1) / 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf (&quot;%lld\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
